#include <stdio.h>
#ifndef JLMUNIX
#include <io.h>
#endif
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <time.h>
#include <string.h>

//      SboxLinearAppx.cpp
//      Linear approximations for S boxes
//      distance from linear using headamard transform
//
//      John Manferdelli

typedef unsigned char byte;


// ---------------------------------------------------------------------------------


//      DES data

byte ip[64]= {
    58,50,42,34,26,18,10, 2,60,52,44,36,28,20,12, 4,
    62,54,46,38,30,22,14, 6,64,56,48,40,32,24,16, 8,
    57,49,41,33,25,17, 9, 1,59,51,43,35,27,19,11, 3,
    61,53,45,37,29,21,13, 5,63,55,47,39,31,23,15, 7};
byte ipi[64]= {
    40, 8,48,16,56,24,64,32,39, 7,47,15,55,23,63,31,
    38, 6,46,14,54,22,62,30,37, 5,45,13,53,21,61,29,
    36, 4,44,12,52,20,60,28,35, 3,43,11,51,19,59,27,
    34, 2,42,10,50,18,58,26,33, 1,41, 9,49,17,57,25};
byte P[32]= {
    16, 7,20,21,29,12,28,17, 1,15,23,26, 5,18,31,10,
     2, 8,24,14,32,27, 3, 9,19,13,30, 6,22,11, 4,25};
byte eb[48]= {
    32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9,
     8, 9,10,11,12,13, 12,13,14,15,16,17,
    16,17,18,19,20,21, 20,21,22,23,24,25,
    24,25,26,27,28,29, 28,29,30,31,32,1 };

byte s[512]= {
    /* s1 */
    14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,
    0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,
    4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,
    15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13,
    /* s2 */
    15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,
    3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,
    0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,
    13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9,
    /* s3 */
    10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,
    13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,
    13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,
    1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12,
    /* s4 */
    7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,
    13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,
    10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,
    3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14,
    /* s5 */
    2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,
    14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,
    4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,
    11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3,
    /* s6 */
    12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,
    10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,
    9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,
    4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13,
    /* s7 */
    4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,
    13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,
    1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,
    6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12,
    /* s8 */
    13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,
    1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,
    7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,
    2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11};

byte pc1[64]= {
    57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,
    59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,
    31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,
    29,21,13,5,28,20,12,4,1,1,1,1,1,1,1,1};

byte pc2[48]= {
    14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,
    26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,
    51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32};

int krot[16]={1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};



// ----------------------------------------------------------------------- 


void prmat(short int* mat, int size, int iSizeBlock)

// pretty print block

{
    int i, n;

    for(i=0;i<size;i++) {
        n= (int)mat[i];
        printf(" %03d", n);
        if((i%iSizeBlock)==(iSizeBlock-1))
            printf("\n");
    }
    return;
}


void tobits(unsigned in, byte* out)

{
    int i;

    for(i=0;i<32;i++)  {
        out[31-i]= in&0x1;
        in>>= 1;
        }
    return;
}


void frbits(byte* in, unsigned* out)

{
    int i;

    for(i=0;i<32;i++) {
        *out<<=1;
        *out|= in[i];
        }

    return;
}


// --------------------------------------------------------------------


//      DES Algorithm


void sub(byte m1[], byte m2[], int box)

{
    int i,j,k;

    k= (m1[0]<<1)|m1[5];
    for(i=1;i<5;i++)
        k= (k<<1)|m1[i];

    j= s[64*box+k];
    for(i=3;i>=0;i--) {
        m2[i]= j&0x1;
        j>>= 1;
        }
    return;
}


byte SB(int box, byte in)
{
    int     base= 64*(box-1);
    byte    n;

    n=  (in&0x20) | ((in<<4)&0x10) | ((in>>1)&0xf);
    return s[base+((int) n)];
}

//  ------------------------------------------------------------------ 


int invert(byte a[], byte b[], int n)

{
    int i,j;

    for(i=0;i<n;i++) {
        j= a[i];
        b[j-1]= i+1;
    }
    return(1);
}


byte dot(byte a, byte b)
{
    int     i;
    byte    dp= 0;

    a&= b;
    for(i=0; i<8; i++) {
        dp^= (a&0x1);
        a>>= 1;
    }
    return dp;
}


void dist(byte* t, short int* ht)
{
    int     i, j;
    int     d;
    byte    x;

    for(i=0; i<64; i++) {
        d= 0;
        for(j=0;j<64;j++) {
            x= dot((byte)j,(byte)i);
            x^= t[j];
            d+= 2*((int)x)-1;
        }
        ht[i]= d;
    }
}


int main(int argn, char* argv[])

{
    int         i, j, k, lc, sn;
    byte        x, y;
    byte        t[64];
    short int   ht[64];
    short int   w[64];
    byte        PInverse[32];

    for(j=0;j<64;j++)
        w[j]= (short int)j;
    for(sn=1; sn<=8; sn++) {
        for(lc=0; lc<16; lc++) {
            // compute linear combination put it in t
            for(x=0; x<64; x++) {
                y= SB(sn,x);
                t[x]= dot(y, (byte)lc);
            }
        dist(t,ht);
        printf("S%d, Y[", sn);
        for(k=0;k<4;k++)
            if(lc&(1<<(3-k)))
                printf("%d ", k+1);
        printf("]:\n\n", sn);
        printf("w : "); prmat(&w[0], 16, 18); printf("\n");
        printf("ht: "); prmat(&ht[0], 16, 18); printf("\n\n");
        printf("w : "); prmat(&w[16], 16, 18); printf("\n");
        printf("ht: "); prmat(&ht[16], 16, 18); printf("\n\n");
        printf("w : "); prmat(&w[32], 16, 18); printf("\n");
        printf("ht: "); prmat(&ht[32], 16, 18); printf("\n\n");
        printf("w : "); prmat(&w[48], 16, 18); printf("\n");
        printf("ht: "); prmat(&ht[48], 16, 18); printf("\n\n");
        printf("\n", sn);
        }
    }

    invert(P, PInverse, 32);
    printf("\n\nSBox output bit use\n");

    for(i=0; i<8;i++) {
        printf("\tS[%d]: ", i+1);
        for(j=0;j<4;j++) {
            printf("%d ", PInverse[4*i+j]);
        }
        printf("\n");
    }

    printf("\n\ndone\n");
    return 0;
}

// ------------------------------------------------------------------- 


