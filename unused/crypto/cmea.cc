#include <stdio.h>
#include <time.h>
#include <string.h>

//  cmea.cpp
//  (c), 2010, John L. Manferdelli

#define MAXPAIRS 512
#define MAXTRIALKEYS 128

    
#ifndef byte
typedef unsigned char byte;
#endif

// ---------------------------------------------------------------------------------------

byte HexDigit(char a) {
  if (a >= '0' && a <= '9')
    return a - '0';
  if (a >= 'a' && a <= 'f')
    return a - 'a' + 10;
  return 0;
}

bool Get64(const char* str, byte* out) {
  if ((strlen(str) & 1) != 0)
    return false;
  byte c, d;
  while (*str != 0) {
    c= HexDigit(*(str++));
    d= HexDigit(*(str++));
    *(out++) = (c<<4)|d;
  }
  return true;
}

void PrintBytes(int l, byte* b) {
  for (int j = 0; j < l; j++)
    printf("%02x", b[j]);
}

byte C[256] = {
  0xd9,0x23,0x5f,0xe6,0xca,0x68,0x97,0xb0,0x7b,0xf2,0x0c,0x34,0x11,0xa5,0x8d,0x4e,
  0x0a,0x46,0x77,0x8d,0x10,0x9f,0x5e,0x62,0xf1,0x34,0xec,0xa5,0xc9,0xb3,0xd8,0x2b,
  0x59,0x47,0xe3,0xd2,0xff,0xae,0x64,0xca,0x15,0x8b,0x7d,0x38,0x21,0xbc,0x96,0x00,
  0x49,0x56,0x23,0x15,0x97,0xe4,0xcb,0x6f,0xf2,0x70,0x3c,0x88,0xba,0xd1,0x0d,0xae,
  0xe2,0x38,0xba,0x44,0x9f,0x83,0x5d,0x1c,0xde,0xab,0xc7,0x65,0xf1,0x76,0x09,0x20,
  0x86,0xbd,0x0a,0xf1,0x3c,0xa7,0x29,0x93,0xcb,0x45,0x5f,0xe8,0x10,0x74,0x62,0xde,
  0xb8,0x77,0x80,0xd1,0x12,0x26,0xac,0x6d,0xe9,0xcf,0xf3,0x54,0x3a,0x0b,0x95,0x4e,
  0xb1,0x30,0xa4,0x96,0xf8,0x57,0x49,0x8e,0x05,0x1f,0x62,0x7c,0xc3,0x2b,0xda,0xed,
  0xbb,0x86,0x0d,0x7a,0x97,0x13,0x6c,0x4e,0x51,0x30,0xe5,0xf2,0x2f,0xd8,0xc4,0xa9,
  0x91,0x76,0xf0,0x17,0x43,0x38,0x29,0x84,0xa2,0xdb,0xef,0x65,0x5e,0xca,0x0d,0xbc,
  0xe7,0xfa,0xd8,0x81,0x6f,0x00,0x14,0x42,0x25,0x7c,0x5d,0xc9,0x9e,0xb6,0x33,0xab,
  0x5a,0x6f,0x9b,0xd9,0xfe,0x71,0x44,0xc5,0x37,0xa2,0x88,0x2d,0x00,0xb6,0x13,0xec,
  0x4e,0x96,0xa8,0x5a,0xb5,0xd7,0xc3,0x8d,0x3f,0xf2,0xec,0x04,0x60,0x71,0x1b,0x29,
  0x04,0x79,0xe3,0xc7,0x1b,0x66,0x81,0x4a,0x25,0x9d,0xdc,0x5f,0x3e,0xb0,0xf8,0xa2,
  0x91,0x34,0xf6,0x5c,0x67,0x89,0x73,0x05,0x22,0xaa,0xcb,0xee,0xbf,0x18,0xd0,0x4d,
  0xf5,0x36,0xae,0x01,0x2f,0x94,0xc3,0x49,0x8b,0xbd,0x58,0x12,0xe0,0x77,0x6c,0xda
  };

byte Q(byte* key, byte x) {
  byte t = (x^key[0])+key[1];
  t = C[t] + x;
  return t;
}

byte R(byte* key, byte x) {
  byte t = (Q(key, x)^key[2])+key[3];
  t = C[t] + x;
  return t;
}

byte S(byte* key, byte x) {
  byte t = (R(key, x)^key[4])+key[5];
  t = C[t] + x;
  return t;
}

byte T(byte* key, byte x) {
  byte t = (S(key, x)^key[6])+key[7];
  t = C[t] + x;
  return t;
}

void printVars(int n, byte z, byte k, char c, byte x) {
  printf("    n: %d, z: %02x, k: %02x, %c: %02x\n", n, z, k, 'p', x);
}

void CMEAEncrypt(byte* key, int size, byte* plain, byte* cipher) {
  byte t = 0;
  byte k = 0;
  byte z = 0;

#if 0
  printf("\n");
  printf("Part 1: "); PrintBytes(8, plain); printf("\n");
#endif

  z = 0;
  for (int n = 0; n < size; n++) {
    k = T(key, z ^ ((byte)n));
    plain[n] += k;
    z += plain[n];
#if 0
    printVars(n, z, k, 'p', plain[n]);
#endif
  }

#if 0
  printf("\n");
  printf("Part 2: "); PrintBytes(8, plain); printf("\n");
#endif
  for (int h = 0; h < (size / 2); h++) {
    plain[h] ^= plain[size - 1 - h] | 1;
  }

#if 0
  printf("\n");
  printf("Part 3: "); PrintBytes(8, plain); printf("\n");
#endif
  z = 0;
  for (int n = 0; n < size; n++) {
    k = T(key, z ^ ((byte)n));
    z += plain[n];
    cipher[n] = plain[n] - k;
#if 0
    printVars(n, z, k, 'c', cipher[n]);
#endif
  }
#if 0
  printf("\n");
#endif
}

int main(int an, char** av) {
  byte key[8] = {
    1,2,3,4,5,6,7,8
  };
  byte plain[8] = {
    0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88
  };
  byte cipher[8];
  byte t_plain[8];

  memcpy(t_plain, plain, 8);

  printf("Key    : "); PrintBytes(8, key); printf("\n");
  printf("Plain  : "); PrintBytes(8, plain); printf("\n");

  CMEAEncrypt(key, 8, plain, cipher);
  printf("Cipher : "); PrintBytes(8, cipher); printf("\n");
  CMEAEncrypt(key, 8, cipher, plain);
  printf("Decrypt: "); PrintBytes(8, plain); printf("\n");

  if (memcmp(plain, t_plain, 8) == 0) {
    printf("\nPlain and decrypted match\n");
  } else {
    printf("\nPlain and decrypted don't match\n");
  }

  return 0;
}

// ---------------------------------------------------------------------------------------

