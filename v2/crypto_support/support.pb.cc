// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: support.proto

#include "support.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_support_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_cert_algorithm_message_support_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_support_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cert_ecc_parameters_message_support_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_support_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cert_name_message_support_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_support_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cert_properties_message_support_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_support_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cert_rsa_parameters_message_support_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_support_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_hmac_parameters_message_support_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_support_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_key_message_support_2eproto;
class binary_blobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<binary_blob> _instance;
} _binary_blob_default_instance_;
class encrypted_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<encrypted_message> _instance;
} _encrypted_message_default_instance_;
class signature_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<signature_message> _instance;
} _signature_message_default_instance_;
class rsa_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rsa_parameters_message> _instance;
} _rsa_parameters_message_default_instance_;
class ecc_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ecc_parameters_message> _instance;
} _ecc_parameters_message_default_instance_;
class rsa_public_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rsa_public_parameters_message> _instance;
} _rsa_public_parameters_message_default_instance_;
class ecc_public_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ecc_public_parameters_message> _instance;
} _ecc_public_parameters_message_default_instance_;
class rsa_private_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<rsa_private_parameters_message> _instance;
} _rsa_private_parameters_message_default_instance_;
class ecc_private_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ecc_private_parameters_message> _instance;
} _ecc_private_parameters_message_default_instance_;
class curve_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<curve_parameters_message> _instance;
} _curve_parameters_message_default_instance_;
class hmac_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<hmac_parameters_message> _instance;
} _hmac_parameters_message_default_instance_;
class key_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<key_message> _instance;
} _key_message_default_instance_;
class scheme_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<scheme_message> _instance;
} _scheme_message_default_instance_;
class crypto_signatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<crypto_signature> _instance;
} _crypto_signature_default_instance_;
class cert_name_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cert_name_message> _instance;
} _cert_name_message_default_instance_;
class cert_principal_name_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cert_principal_name_message> _instance;
} _cert_principal_name_message_default_instance_;
class cert_rsa_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cert_rsa_parameters_message> _instance;
} _cert_rsa_parameters_message_default_instance_;
class cert_ecc_parameters_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cert_ecc_parameters_message> _instance;
} _cert_ecc_parameters_message_default_instance_;
class cert_algorithm_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cert_algorithm_message> _instance;
} _cert_algorithm_message_default_instance_;
class cert_properties_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cert_properties_message> _instance;
} _cert_properties_message_default_instance_;
class certificate_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<certificate_message> _instance;
} _certificate_message_default_instance_;
static void InitDefaultsscc_info_binary_blob_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_binary_blob_default_instance_;
    new (ptr) ::binary_blob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::binary_blob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_binary_blob_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_binary_blob_support_2eproto}, {}};

static void InitDefaultsscc_info_cert_algorithm_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_cert_algorithm_message_default_instance_;
    new (ptr) ::cert_algorithm_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cert_algorithm_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_cert_algorithm_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_cert_algorithm_message_support_2eproto}, {
      &scc_info_cert_rsa_parameters_message_support_2eproto.base,
      &scc_info_cert_ecc_parameters_message_support_2eproto.base,}};

static void InitDefaultsscc_info_cert_ecc_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_cert_ecc_parameters_message_default_instance_;
    new (ptr) ::cert_ecc_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cert_ecc_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cert_ecc_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cert_ecc_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_cert_name_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_cert_name_message_default_instance_;
    new (ptr) ::cert_name_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cert_name_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cert_name_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cert_name_message_support_2eproto}, {}};

static void InitDefaultsscc_info_cert_principal_name_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_cert_principal_name_message_default_instance_;
    new (ptr) ::cert_principal_name_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cert_principal_name_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_cert_principal_name_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_cert_principal_name_message_support_2eproto}, {
      &scc_info_cert_name_message_support_2eproto.base,}};

static void InitDefaultsscc_info_cert_properties_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_cert_properties_message_default_instance_;
    new (ptr) ::cert_properties_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cert_properties_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cert_properties_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cert_properties_message_support_2eproto}, {}};

static void InitDefaultsscc_info_cert_rsa_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_cert_rsa_parameters_message_default_instance_;
    new (ptr) ::cert_rsa_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cert_rsa_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cert_rsa_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_cert_rsa_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_certificate_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_certificate_message_default_instance_;
    new (ptr) ::certificate_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::certificate_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_certificate_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_certificate_message_support_2eproto}, {
      &scc_info_cert_name_message_support_2eproto.base,
      &scc_info_cert_algorithm_message_support_2eproto.base,
      &scc_info_cert_properties_message_support_2eproto.base,}};

static void InitDefaultsscc_info_crypto_signature_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_crypto_signature_default_instance_;
    new (ptr) ::crypto_signature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::crypto_signature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_crypto_signature_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_crypto_signature_support_2eproto}, {}};

static void InitDefaultsscc_info_curve_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_curve_parameters_message_default_instance_;
    new (ptr) ::curve_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::curve_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_curve_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_curve_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_ecc_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ecc_parameters_message_default_instance_;
    new (ptr) ::ecc_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecc_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ecc_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ecc_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_ecc_private_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ecc_private_parameters_message_default_instance_;
    new (ptr) ::ecc_private_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecc_private_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ecc_private_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ecc_private_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_ecc_public_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ecc_public_parameters_message_default_instance_;
    new (ptr) ::ecc_public_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ecc_public_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ecc_public_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ecc_public_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_encrypted_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_encrypted_message_default_instance_;
    new (ptr) ::encrypted_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::encrypted_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_encrypted_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_encrypted_message_support_2eproto}, {}};

static void InitDefaultsscc_info_hmac_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_hmac_parameters_message_default_instance_;
    new (ptr) ::hmac_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hmac_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_hmac_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_hmac_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_key_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_key_message_default_instance_;
    new (ptr) ::key_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::key_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_key_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_key_message_support_2eproto}, {}};

static void InitDefaultsscc_info_rsa_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_rsa_parameters_message_default_instance_;
    new (ptr) ::rsa_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsa_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rsa_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rsa_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_rsa_private_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_rsa_private_parameters_message_default_instance_;
    new (ptr) ::rsa_private_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsa_private_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rsa_private_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rsa_private_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_rsa_public_parameters_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_rsa_public_parameters_message_default_instance_;
    new (ptr) ::rsa_public_parameters_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsa_public_parameters_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_rsa_public_parameters_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_rsa_public_parameters_message_support_2eproto}, {}};

static void InitDefaultsscc_info_scheme_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_scheme_message_default_instance_;
    new (ptr) ::scheme_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::scheme_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_scheme_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_scheme_message_support_2eproto}, {
      &scc_info_key_message_support_2eproto.base,
      &scc_info_hmac_parameters_message_support_2eproto.base,}};

static void InitDefaultsscc_info_signature_message_support_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_signature_message_default_instance_;
    new (ptr) ::signature_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signature_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_signature_message_support_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_signature_message_support_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_support_2eproto[21];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_support_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_support_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_support_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::binary_blob, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::binary_blob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::binary_blob, blob_),
  0,
  PROTOBUF_FIELD_OFFSET(::encrypted_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::encrypted_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::encrypted_message, scheme_identifier_),
  PROTOBUF_FIELD_OFFSET(::encrypted_message, message_identifier_),
  PROTOBUF_FIELD_OFFSET(::encrypted_message, source_),
  PROTOBUF_FIELD_OFFSET(::encrypted_message, destination_),
  PROTOBUF_FIELD_OFFSET(::encrypted_message, date_),
  PROTOBUF_FIELD_OFFSET(::encrypted_message, buffer_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signature_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsa_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecc_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsa_public_parameters_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rsa_public_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsa_public_parameters_message, modulus_),
  PROTOBUF_FIELD_OFFSET(::rsa_public_parameters_message, exponent_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ecc_public_parameters_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ecc_public_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ecc_public_parameters_message, p_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsa_private_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ecc_private_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::curve_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hmac_parameters_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::hmac_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::hmac_parameters_message, algorithm_),
  PROTOBUF_FIELD_OFFSET(::hmac_parameters_message, size_),
  PROTOBUF_FIELD_OFFSET(::hmac_parameters_message, secret_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::key_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::key_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::key_message, algorithm_type_),
  PROTOBUF_FIELD_OFFSET(::key_message, key_name_),
  PROTOBUF_FIELD_OFFSET(::key_message, key_size_),
  PROTOBUF_FIELD_OFFSET(::key_message, purpose_),
  PROTOBUF_FIELD_OFFSET(::key_message, notbefore_),
  PROTOBUF_FIELD_OFFSET(::key_message, notafter_),
  PROTOBUF_FIELD_OFFSET(::key_message, secret_),
  0,
  1,
  6,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::scheme_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::scheme_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::scheme_message, scheme_type_),
  PROTOBUF_FIELD_OFFSET(::scheme_message, encryption_key_),
  PROTOBUF_FIELD_OFFSET(::scheme_message, parameters_),
  PROTOBUF_FIELD_OFFSET(::scheme_message, public_nonce_),
  0,
  2,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::crypto_signature, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::crypto_signature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::crypto_signature, encryption_algorithm_name_),
  PROTOBUF_FIELD_OFFSET(::crypto_signature, serialized_statement_),
  PROTOBUF_FIELD_OFFSET(::crypto_signature, signature_),
  PROTOBUF_FIELD_OFFSET(::crypto_signature, signer_name_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::cert_name_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cert_name_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cert_name_message, name_type_),
  PROTOBUF_FIELD_OFFSET(::cert_name_message, name_value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cert_principal_name_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cert_principal_name_message, names_),
  PROTOBUF_FIELD_OFFSET(::cert_rsa_parameters_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cert_rsa_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cert_rsa_parameters_message, modulus_size_),
  PROTOBUF_FIELD_OFFSET(::cert_rsa_parameters_message, exponent_size_),
  PROTOBUF_FIELD_OFFSET(::cert_rsa_parameters_message, exponent_),
  PROTOBUF_FIELD_OFFSET(::cert_rsa_parameters_message, modulus_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::cert_ecc_parameters_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cert_ecc_parameters_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cert_ecc_parameters_message, prime_size_),
  PROTOBUF_FIELD_OFFSET(::cert_ecc_parameters_message, prime_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::cert_algorithm_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cert_algorithm_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cert_algorithm_message, algorithm_name_),
  PROTOBUF_FIELD_OFFSET(::cert_algorithm_message, rsa_params_),
  PROTOBUF_FIELD_OFFSET(::cert_algorithm_message, ecc_params_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::cert_properties_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cert_properties_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cert_properties_message, property_name_),
  PROTOBUF_FIELD_OFFSET(::cert_properties_message, property_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::certificate_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::certificate_message, version_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, subject_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, subject_key_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, properties_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, purpose_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, not_before_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, not_after_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, nonce_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, canonical_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, revocation_address_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, date_signed_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, issuer_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, signing_key_),
  PROTOBUF_FIELD_OFFSET(::certificate_message, signature_),
  0,
  ~0u,
  9,
  ~0u,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  10,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::binary_blob)},
  { 7, 18, sizeof(::encrypted_message)},
  { 24, -1, sizeof(::signature_message)},
  { 29, -1, sizeof(::rsa_parameters_message)},
  { 34, -1, sizeof(::ecc_parameters_message)},
  { 39, 46, sizeof(::rsa_public_parameters_message)},
  { 48, 54, sizeof(::ecc_public_parameters_message)},
  { 55, -1, sizeof(::rsa_private_parameters_message)},
  { 60, -1, sizeof(::ecc_private_parameters_message)},
  { 65, -1, sizeof(::curve_parameters_message)},
  { 70, 78, sizeof(::hmac_parameters_message)},
  { 81, 93, sizeof(::key_message)},
  { 100, 109, sizeof(::scheme_message)},
  { 113, 122, sizeof(::crypto_signature)},
  { 126, 133, sizeof(::cert_name_message)},
  { 135, -1, sizeof(::cert_principal_name_message)},
  { 141, 150, sizeof(::cert_rsa_parameters_message)},
  { 154, 161, sizeof(::cert_ecc_parameters_message)},
  { 163, 171, sizeof(::cert_algorithm_message)},
  { 174, 181, sizeof(::cert_properties_message)},
  { 183, 202, sizeof(::certificate_message)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_binary_blob_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_encrypted_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_signature_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_rsa_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ecc_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_rsa_public_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ecc_public_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_rsa_private_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ecc_private_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_curve_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_hmac_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_key_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_scheme_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_crypto_signature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cert_name_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cert_principal_name_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cert_rsa_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cert_ecc_parameters_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cert_algorithm_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_cert_properties_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_certificate_message_default_instance_),
};

const char descriptor_table_protodef_support_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsupport.proto\"\033\n\013binary_blob\022\014\n\004blob\030\001"
  " \001(\t\"\215\001\n\021encrypted_message\022\031\n\021scheme_ide"
  "ntifier\030\001 \001(\t\022\032\n\022message_identifier\030\002 \001("
  "\t\022\016\n\006source\030\003 \001(\t\022\023\n\013destination\030\004 \001(\t\022\014"
  "\n\004date\030\005 \001(\t\022\016\n\006buffer\030\006 \001(\014\"\023\n\021signatur"
  "e_message\"\030\n\026rsa_parameters_message\"\030\n\026e"
  "cc_parameters_message\"B\n\035rsa_public_para"
  "meters_message\022\017\n\007modulus\030\001 \001(\014\022\020\n\010expon"
  "ent\030\002 \001(\014\"*\n\035ecc_public_parameters_messa"
  "ge\022\t\n\001p\030\001 \001(\014\" \n\036rsa_private_parameters_"
  "message\" \n\036ecc_private_parameters_messag"
  "e\"\032\n\030curve_parameters_message\"J\n\027hmac_pa"
  "rameters_message\022\021\n\talgorithm\030\001 \001(\t\022\014\n\004s"
  "ize\030\002 \001(\005\022\016\n\006secret\030\003 \001(\014\"\217\001\n\013key_messag"
  "e\022\026\n\016algorithm_type\030\001 \001(\t\022\020\n\010key_name\030\002 "
  "\001(\t\022\020\n\010key_size\030\003 \001(\005\022\017\n\007purpose\030\004 \001(\t\022\021"
  "\n\tnotBefore\030\005 \001(\t\022\020\n\010notAfter\030\006 \001(\t\022\016\n\006s"
  "ecret\030\007 \001(\014\"\217\001\n\016scheme_message\022\023\n\013scheme"
  "_type\030\001 \001(\t\022$\n\016encryption_key\030\002 \001(\0132\014.ke"
  "y_message\022,\n\nparameters\030\003 \001(\0132\030.hmac_par"
  "ameters_message\022\024\n\014public_nonce\030\004 \001(\014\"{\n"
  "\020crypto_signature\022!\n\031encryption_algorith"
  "m_name\030\001 \002(\t\022\034\n\024serialized_statement\030\002 \002"
  "(\t\022\021\n\tsignature\030\003 \001(\t\022\023\n\013signer_name\030\004 \001"
  "(\t\":\n\021cert_name_message\022\021\n\tname_type\030\001 \001"
  "(\t\022\022\n\nname_value\030\002 \001(\t\"@\n\033cert_principal"
  "_name_message\022!\n\005names\030\001 \003(\0132\022.cert_name"
  "_message\"m\n\033cert_rsa_parameters_message\022"
  "\024\n\014modulus_size\030\001 \001(\005\022\025\n\rexponent_size\030\002"
  " \001(\005\022\020\n\010exponent\030\003 \001(\014\022\017\n\007modulus\030\004 \001(\014\""
  "@\n\033cert_ecc_parameters_message\022\022\n\nprime_"
  "size\030\001 \001(\005\022\r\n\005prime\030\002 \001(\014\"\224\001\n\026cert_algor"
  "ithm_message\022\026\n\016algorithm_name\030\001 \002(\t\0220\n\n"
  "rsa_params\030\002 \001(\0132\034.cert_rsa_parameters_m"
  "essage\0220\n\necc_params\030\003 \001(\0132\034.cert_ecc_pa"
  "rameters_message\"H\n\027cert_properties_mess"
  "age\022\025\n\rproperty_name\030\001 \001(\t\022\026\n\016property_v"
  "alue\030\002 \001(\t\"\227\003\n\023certificate_message\022\017\n\007ve"
  "rsion\030\001 \002(\t\022#\n\007subject\030\002 \003(\0132\022.cert_name"
  "_message\022,\n\013subject_key\030\003 \001(\0132\027.cert_alg"
  "orithm_message\022,\n\nproperties\030\004 \003(\0132\030.cer"
  "t_properties_message\022\017\n\007purpose\030\005 \001(\t\022\022\n"
  "\nnot_before\030\006 \001(\t\022\021\n\tnot_after\030\007 \001(\t\022\r\n\005"
  "nonce\030\010 \001(\014\022\021\n\tcanonical\030\t \001(\014\022\032\n\022revoca"
  "tion_address\030\n \001(\t\022\023\n\013date_signed\030\013 \001(\t\022"
  "\"\n\006issuer\030\014 \003(\0132\022.cert_name_message\022,\n\013s"
  "igning_key\030\r \001(\0132\027.cert_algorithm_messag"
  "e\022\021\n\tsignature\030\016 \001(\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_support_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_support_2eproto_sccs[21] = {
  &scc_info_binary_blob_support_2eproto.base,
  &scc_info_cert_algorithm_message_support_2eproto.base,
  &scc_info_cert_ecc_parameters_message_support_2eproto.base,
  &scc_info_cert_name_message_support_2eproto.base,
  &scc_info_cert_principal_name_message_support_2eproto.base,
  &scc_info_cert_properties_message_support_2eproto.base,
  &scc_info_cert_rsa_parameters_message_support_2eproto.base,
  &scc_info_certificate_message_support_2eproto.base,
  &scc_info_crypto_signature_support_2eproto.base,
  &scc_info_curve_parameters_message_support_2eproto.base,
  &scc_info_ecc_parameters_message_support_2eproto.base,
  &scc_info_ecc_private_parameters_message_support_2eproto.base,
  &scc_info_ecc_public_parameters_message_support_2eproto.base,
  &scc_info_encrypted_message_support_2eproto.base,
  &scc_info_hmac_parameters_message_support_2eproto.base,
  &scc_info_key_message_support_2eproto.base,
  &scc_info_rsa_parameters_message_support_2eproto.base,
  &scc_info_rsa_private_parameters_message_support_2eproto.base,
  &scc_info_rsa_public_parameters_message_support_2eproto.base,
  &scc_info_scheme_message_support_2eproto.base,
  &scc_info_signature_message_support_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_support_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_support_2eproto = {
  false, false, descriptor_table_protodef_support_2eproto, "support.proto", 1900,
  &descriptor_table_support_2eproto_once, descriptor_table_support_2eproto_sccs, descriptor_table_support_2eproto_deps, 21, 0,
  schemas, file_default_instances, TableStruct_support_2eproto::offsets,
  file_level_metadata_support_2eproto, 21, file_level_enum_descriptors_support_2eproto, file_level_service_descriptors_support_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_support_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_support_2eproto)), true);

// ===================================================================

void binary_blob::InitAsDefaultInstance() {
}
class binary_blob::_Internal {
 public:
  using HasBits = decltype(std::declval<binary_blob>()._has_bits_);
  static void set_has_blob(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

binary_blob::binary_blob(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:binary_blob)
}
binary_blob::binary_blob(const binary_blob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_blob()) {
    blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_blob(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:binary_blob)
}

void binary_blob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_binary_blob_support_2eproto.base);
  blob_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

binary_blob::~binary_blob() {
  // @@protoc_insertion_point(destructor:binary_blob)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void binary_blob::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  blob_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void binary_blob::ArenaDtor(void* object) {
  binary_blob* _this = reinterpret_cast< binary_blob* >(object);
  (void)_this;
}
void binary_blob::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void binary_blob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const binary_blob& binary_blob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_binary_blob_support_2eproto.base);
  return *internal_default_instance();
}


void binary_blob::Clear() {
// @@protoc_insertion_point(message_clear_start:binary_blob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    blob_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* binary_blob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string blob = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_blob();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "binary_blob.blob");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* binary_blob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:binary_blob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string blob = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_blob().data(), static_cast<int>(this->_internal_blob().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "binary_blob.blob");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_blob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:binary_blob)
  return target;
}

size_t binary_blob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:binary_blob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string blob = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blob());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void binary_blob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:binary_blob)
  GOOGLE_DCHECK_NE(&from, this);
  const binary_blob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<binary_blob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:binary_blob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:binary_blob)
    MergeFrom(*source);
  }
}

void binary_blob::MergeFrom(const binary_blob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:binary_blob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_blob()) {
    _internal_set_blob(from._internal_blob());
  }
}

void binary_blob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:binary_blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void binary_blob::CopyFrom(const binary_blob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:binary_blob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool binary_blob::IsInitialized() const {
  return true;
}

void binary_blob::InternalSwap(binary_blob* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blob_.Swap(&other->blob_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata binary_blob::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void encrypted_message::InitAsDefaultInstance() {
}
class encrypted_message::_Internal {
 public:
  using HasBits = decltype(std::declval<encrypted_message>()._has_bits_);
  static void set_has_scheme_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_message_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

encrypted_message::encrypted_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:encrypted_message)
}
encrypted_message::encrypted_message(const encrypted_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scheme_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scheme_identifier()) {
    scheme_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scheme_identifier(),
      GetArena());
  }
  message_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message_identifier()) {
    message_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_identifier(),
      GetArena());
  }
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source()) {
    source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_source(),
      GetArena());
  }
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_destination()) {
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destination(),
      GetArena());
  }
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date()) {
    date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date(),
      GetArena());
  }
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_buffer()) {
    buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_buffer(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:encrypted_message)
}

void encrypted_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_encrypted_message_support_2eproto.base);
  scheme_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

encrypted_message::~encrypted_message() {
  // @@protoc_insertion_point(destructor:encrypted_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void encrypted_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scheme_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buffer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void encrypted_message::ArenaDtor(void* object) {
  encrypted_message* _this = reinterpret_cast< encrypted_message* >(object);
  (void)_this;
}
void encrypted_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void encrypted_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const encrypted_message& encrypted_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_encrypted_message_support_2eproto.base);
  return *internal_default_instance();
}


void encrypted_message::Clear() {
// @@protoc_insertion_point(message_clear_start:encrypted_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      scheme_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      message_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      source_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      destination_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      date_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      buffer_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* encrypted_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string scheme_identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scheme_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "encrypted_message.scheme_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string message_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "encrypted_message.message_identifier");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "encrypted_message.source");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string destination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "encrypted_message.destination");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_date();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "encrypted_message.date");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes buffer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_buffer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* encrypted_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:encrypted_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scheme_identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scheme_identifier().data(), static_cast<int>(this->_internal_scheme_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "encrypted_message.scheme_identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scheme_identifier(), target);
  }

  // optional string message_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message_identifier().data(), static_cast<int>(this->_internal_message_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "encrypted_message.message_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_identifier(), target);
  }

  // optional string source = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "encrypted_message.source");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  // optional string destination = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "encrypted_message.destination");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_destination(), target);
  }

  // optional string date = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date().data(), static_cast<int>(this->_internal_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "encrypted_message.date");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_date(), target);
  }

  // optional bytes buffer = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_buffer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:encrypted_message)
  return target;
}

size_t encrypted_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:encrypted_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string scheme_identifier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scheme_identifier());
    }

    // optional string message_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_identifier());
    }

    // optional string source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional string destination = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_destination());
    }

    // optional string date = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date());
    }

    // optional bytes buffer = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_buffer());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void encrypted_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:encrypted_message)
  GOOGLE_DCHECK_NE(&from, this);
  const encrypted_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<encrypted_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:encrypted_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:encrypted_message)
    MergeFrom(*source);
  }
}

void encrypted_message::MergeFrom(const encrypted_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:encrypted_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_scheme_identifier(from._internal_scheme_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_message_identifier(from._internal_message_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_destination(from._internal_destination());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_date(from._internal_date());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_buffer(from._internal_buffer());
    }
  }
}

void encrypted_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:encrypted_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void encrypted_message::CopyFrom(const encrypted_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:encrypted_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool encrypted_message::IsInitialized() const {
  return true;
}

void encrypted_message::InternalSwap(encrypted_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scheme_identifier_.Swap(&other->scheme_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_identifier_.Swap(&other->message_identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_.Swap(&other->date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  buffer_.Swap(&other->buffer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata encrypted_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void signature_message::InitAsDefaultInstance() {
}
class signature_message::_Internal {
 public:
};

signature_message::signature_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:signature_message)
}
signature_message::signature_message(const signature_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:signature_message)
}

void signature_message::SharedCtor() {
}

signature_message::~signature_message() {
  // @@protoc_insertion_point(destructor:signature_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void signature_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void signature_message::ArenaDtor(void* object) {
  signature_message* _this = reinterpret_cast< signature_message* >(object);
  (void)_this;
}
void signature_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void signature_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const signature_message& signature_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_signature_message_support_2eproto.base);
  return *internal_default_instance();
}


void signature_message::Clear() {
// @@protoc_insertion_point(message_clear_start:signature_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* signature_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* signature_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signature_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signature_message)
  return target;
}

size_t signature_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signature_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void signature_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signature_message)
  GOOGLE_DCHECK_NE(&from, this);
  const signature_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<signature_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signature_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signature_message)
    MergeFrom(*source);
  }
}

void signature_message::MergeFrom(const signature_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signature_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void signature_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signature_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void signature_message::CopyFrom(const signature_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signature_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool signature_message::IsInitialized() const {
  return true;
}

void signature_message::InternalSwap(signature_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata signature_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rsa_parameters_message::InitAsDefaultInstance() {
}
class rsa_parameters_message::_Internal {
 public:
};

rsa_parameters_message::rsa_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rsa_parameters_message)
}
rsa_parameters_message::rsa_parameters_message(const rsa_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rsa_parameters_message)
}

void rsa_parameters_message::SharedCtor() {
}

rsa_parameters_message::~rsa_parameters_message() {
  // @@protoc_insertion_point(destructor:rsa_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rsa_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rsa_parameters_message::ArenaDtor(void* object) {
  rsa_parameters_message* _this = reinterpret_cast< rsa_parameters_message* >(object);
  (void)_this;
}
void rsa_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rsa_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rsa_parameters_message& rsa_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rsa_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void rsa_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:rsa_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rsa_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rsa_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsa_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsa_parameters_message)
  return target;
}

size_t rsa_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsa_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rsa_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsa_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const rsa_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rsa_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsa_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsa_parameters_message)
    MergeFrom(*source);
  }
}

void rsa_parameters_message::MergeFrom(const rsa_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsa_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void rsa_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsa_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsa_parameters_message::CopyFrom(const rsa_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsa_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsa_parameters_message::IsInitialized() const {
  return true;
}

void rsa_parameters_message::InternalSwap(rsa_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rsa_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ecc_parameters_message::InitAsDefaultInstance() {
}
class ecc_parameters_message::_Internal {
 public:
};

ecc_parameters_message::ecc_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ecc_parameters_message)
}
ecc_parameters_message::ecc_parameters_message(const ecc_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ecc_parameters_message)
}

void ecc_parameters_message::SharedCtor() {
}

ecc_parameters_message::~ecc_parameters_message() {
  // @@protoc_insertion_point(destructor:ecc_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ecc_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ecc_parameters_message::ArenaDtor(void* object) {
  ecc_parameters_message* _this = reinterpret_cast< ecc_parameters_message* >(object);
  (void)_this;
}
void ecc_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ecc_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ecc_parameters_message& ecc_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ecc_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void ecc_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:ecc_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ecc_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ecc_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecc_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecc_parameters_message)
  return target;
}

size_t ecc_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecc_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ecc_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecc_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const ecc_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ecc_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecc_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecc_parameters_message)
    MergeFrom(*source);
  }
}

void ecc_parameters_message::MergeFrom(const ecc_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecc_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ecc_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecc_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ecc_parameters_message::CopyFrom(const ecc_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecc_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ecc_parameters_message::IsInitialized() const {
  return true;
}

void ecc_parameters_message::InternalSwap(ecc_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ecc_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rsa_public_parameters_message::InitAsDefaultInstance() {
}
class rsa_public_parameters_message::_Internal {
 public:
  using HasBits = decltype(std::declval<rsa_public_parameters_message>()._has_bits_);
  static void set_has_modulus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

rsa_public_parameters_message::rsa_public_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rsa_public_parameters_message)
}
rsa_public_parameters_message::rsa_public_parameters_message(const rsa_public_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modulus()) {
    modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_modulus(),
      GetArena());
  }
  exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exponent()) {
    exponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exponent(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:rsa_public_parameters_message)
}

void rsa_public_parameters_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_rsa_public_parameters_message_support_2eproto.base);
  modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

rsa_public_parameters_message::~rsa_public_parameters_message() {
  // @@protoc_insertion_point(destructor:rsa_public_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rsa_public_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  modulus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exponent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void rsa_public_parameters_message::ArenaDtor(void* object) {
  rsa_public_parameters_message* _this = reinterpret_cast< rsa_public_parameters_message* >(object);
  (void)_this;
}
void rsa_public_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rsa_public_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rsa_public_parameters_message& rsa_public_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rsa_public_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void rsa_public_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:rsa_public_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      modulus_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      exponent_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rsa_public_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes modulus = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_modulus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes exponent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exponent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rsa_public_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsa_public_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes modulus = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_modulus(), target);
  }

  // optional bytes exponent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_exponent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsa_public_parameters_message)
  return target;
}

size_t rsa_public_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsa_public_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes modulus = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_modulus());
    }

    // optional bytes exponent = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_exponent());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rsa_public_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsa_public_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const rsa_public_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rsa_public_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsa_public_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsa_public_parameters_message)
    MergeFrom(*source);
  }
}

void rsa_public_parameters_message::MergeFrom(const rsa_public_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsa_public_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_modulus(from._internal_modulus());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_exponent(from._internal_exponent());
    }
  }
}

void rsa_public_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsa_public_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsa_public_parameters_message::CopyFrom(const rsa_public_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsa_public_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsa_public_parameters_message::IsInitialized() const {
  return true;
}

void rsa_public_parameters_message::InternalSwap(rsa_public_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modulus_.Swap(&other->modulus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  exponent_.Swap(&other->exponent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata rsa_public_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ecc_public_parameters_message::InitAsDefaultInstance() {
}
class ecc_public_parameters_message::_Internal {
 public:
  using HasBits = decltype(std::declval<ecc_public_parameters_message>()._has_bits_);
  static void set_has_p(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ecc_public_parameters_message::ecc_public_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ecc_public_parameters_message)
}
ecc_public_parameters_message::ecc_public_parameters_message(const ecc_public_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_p()) {
    p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_p(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:ecc_public_parameters_message)
}

void ecc_public_parameters_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ecc_public_parameters_message_support_2eproto.base);
  p_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ecc_public_parameters_message::~ecc_public_parameters_message() {
  // @@protoc_insertion_point(destructor:ecc_public_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ecc_public_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  p_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ecc_public_parameters_message::ArenaDtor(void* object) {
  ecc_public_parameters_message* _this = reinterpret_cast< ecc_public_parameters_message* >(object);
  (void)_this;
}
void ecc_public_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ecc_public_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ecc_public_parameters_message& ecc_public_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ecc_public_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void ecc_public_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:ecc_public_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    p_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ecc_public_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_p();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ecc_public_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecc_public_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes p = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_p(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecc_public_parameters_message)
  return target;
}

size_t ecc_public_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecc_public_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes p = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_p());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ecc_public_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecc_public_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const ecc_public_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ecc_public_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecc_public_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecc_public_parameters_message)
    MergeFrom(*source);
  }
}

void ecc_public_parameters_message::MergeFrom(const ecc_public_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecc_public_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_p()) {
    _internal_set_p(from._internal_p());
  }
}

void ecc_public_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecc_public_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ecc_public_parameters_message::CopyFrom(const ecc_public_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecc_public_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ecc_public_parameters_message::IsInitialized() const {
  return true;
}

void ecc_public_parameters_message::InternalSwap(ecc_public_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  p_.Swap(&other->p_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ecc_public_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void rsa_private_parameters_message::InitAsDefaultInstance() {
}
class rsa_private_parameters_message::_Internal {
 public:
};

rsa_private_parameters_message::rsa_private_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:rsa_private_parameters_message)
}
rsa_private_parameters_message::rsa_private_parameters_message(const rsa_private_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rsa_private_parameters_message)
}

void rsa_private_parameters_message::SharedCtor() {
}

rsa_private_parameters_message::~rsa_private_parameters_message() {
  // @@protoc_insertion_point(destructor:rsa_private_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void rsa_private_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void rsa_private_parameters_message::ArenaDtor(void* object) {
  rsa_private_parameters_message* _this = reinterpret_cast< rsa_private_parameters_message* >(object);
  (void)_this;
}
void rsa_private_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void rsa_private_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const rsa_private_parameters_message& rsa_private_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_rsa_private_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void rsa_private_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:rsa_private_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* rsa_private_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* rsa_private_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsa_private_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsa_private_parameters_message)
  return target;
}

size_t rsa_private_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsa_private_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void rsa_private_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsa_private_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const rsa_private_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<rsa_private_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsa_private_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsa_private_parameters_message)
    MergeFrom(*source);
  }
}

void rsa_private_parameters_message::MergeFrom(const rsa_private_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsa_private_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void rsa_private_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsa_private_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsa_private_parameters_message::CopyFrom(const rsa_private_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsa_private_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsa_private_parameters_message::IsInitialized() const {
  return true;
}

void rsa_private_parameters_message::InternalSwap(rsa_private_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata rsa_private_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ecc_private_parameters_message::InitAsDefaultInstance() {
}
class ecc_private_parameters_message::_Internal {
 public:
};

ecc_private_parameters_message::ecc_private_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ecc_private_parameters_message)
}
ecc_private_parameters_message::ecc_private_parameters_message(const ecc_private_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ecc_private_parameters_message)
}

void ecc_private_parameters_message::SharedCtor() {
}

ecc_private_parameters_message::~ecc_private_parameters_message() {
  // @@protoc_insertion_point(destructor:ecc_private_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ecc_private_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ecc_private_parameters_message::ArenaDtor(void* object) {
  ecc_private_parameters_message* _this = reinterpret_cast< ecc_private_parameters_message* >(object);
  (void)_this;
}
void ecc_private_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ecc_private_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ecc_private_parameters_message& ecc_private_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ecc_private_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void ecc_private_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:ecc_private_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ecc_private_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ecc_private_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ecc_private_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ecc_private_parameters_message)
  return target;
}

size_t ecc_private_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ecc_private_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ecc_private_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ecc_private_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const ecc_private_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ecc_private_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ecc_private_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ecc_private_parameters_message)
    MergeFrom(*source);
  }
}

void ecc_private_parameters_message::MergeFrom(const ecc_private_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ecc_private_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ecc_private_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ecc_private_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ecc_private_parameters_message::CopyFrom(const ecc_private_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ecc_private_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ecc_private_parameters_message::IsInitialized() const {
  return true;
}

void ecc_private_parameters_message::InternalSwap(ecc_private_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ecc_private_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void curve_parameters_message::InitAsDefaultInstance() {
}
class curve_parameters_message::_Internal {
 public:
};

curve_parameters_message::curve_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:curve_parameters_message)
}
curve_parameters_message::curve_parameters_message(const curve_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:curve_parameters_message)
}

void curve_parameters_message::SharedCtor() {
}

curve_parameters_message::~curve_parameters_message() {
  // @@protoc_insertion_point(destructor:curve_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void curve_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void curve_parameters_message::ArenaDtor(void* object) {
  curve_parameters_message* _this = reinterpret_cast< curve_parameters_message* >(object);
  (void)_this;
}
void curve_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void curve_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const curve_parameters_message& curve_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_curve_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void curve_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:curve_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* curve_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* curve_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:curve_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:curve_parameters_message)
  return target;
}

size_t curve_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:curve_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void curve_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:curve_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const curve_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<curve_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:curve_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:curve_parameters_message)
    MergeFrom(*source);
  }
}

void curve_parameters_message::MergeFrom(const curve_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:curve_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void curve_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:curve_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void curve_parameters_message::CopyFrom(const curve_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:curve_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool curve_parameters_message::IsInitialized() const {
  return true;
}

void curve_parameters_message::InternalSwap(curve_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata curve_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void hmac_parameters_message::InitAsDefaultInstance() {
}
class hmac_parameters_message::_Internal {
 public:
  using HasBits = decltype(std::declval<hmac_parameters_message>()._has_bits_);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

hmac_parameters_message::hmac_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:hmac_parameters_message)
}
hmac_parameters_message::hmac_parameters_message(const hmac_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_algorithm()) {
    algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_algorithm(),
      GetArena());
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_secret()) {
    secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_secret(),
      GetArena());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:hmac_parameters_message)
}

void hmac_parameters_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_hmac_parameters_message_support_2eproto.base);
  algorithm_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  size_ = 0;
}

hmac_parameters_message::~hmac_parameters_message() {
  // @@protoc_insertion_point(destructor:hmac_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void hmac_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  algorithm_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void hmac_parameters_message::ArenaDtor(void* object) {
  hmac_parameters_message* _this = reinterpret_cast< hmac_parameters_message* >(object);
  (void)_this;
}
void hmac_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void hmac_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hmac_parameters_message& hmac_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_hmac_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void hmac_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:hmac_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      algorithm_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      secret_.ClearNonDefaultToEmpty();
    }
  }
  size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* hmac_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_algorithm();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "hmac_parameters_message.algorithm");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes secret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* hmac_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hmac_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string algorithm = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_algorithm().data(), static_cast<int>(this->_internal_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "hmac_parameters_message.algorithm");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_algorithm(), target);
  }

  // optional int32 size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_size(), target);
  }

  // optional bytes secret = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hmac_parameters_message)
  return target;
}

size_t hmac_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hmac_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string algorithm = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_algorithm());
    }

    // optional bytes secret = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_secret());
    }

    // optional int32 size = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hmac_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hmac_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const hmac_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<hmac_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hmac_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hmac_parameters_message)
    MergeFrom(*source);
  }
}

void hmac_parameters_message::MergeFrom(const hmac_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hmac_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_algorithm(from._internal_algorithm());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_secret(from._internal_secret());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void hmac_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hmac_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hmac_parameters_message::CopyFrom(const hmac_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hmac_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hmac_parameters_message::IsInitialized() const {
  return true;
}

void hmac_parameters_message::InternalSwap(hmac_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  algorithm_.Swap(&other->algorithm_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata hmac_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void key_message::InitAsDefaultInstance() {
}
class key_message::_Internal {
 public:
  using HasBits = decltype(std::declval<key_message>()._has_bits_);
  static void set_has_algorithm_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_key_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_size(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_notbefore(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_notafter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_secret(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

key_message::key_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:key_message)
}
key_message::key_message(const key_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_algorithm_type()) {
    algorithm_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_algorithm_type(),
      GetArena());
  }
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key_name()) {
    key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key_name(),
      GetArena());
  }
  purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_purpose()) {
    purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_purpose(),
      GetArena());
  }
  notbefore_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notbefore()) {
    notbefore_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notbefore(),
      GetArena());
  }
  notafter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_notafter()) {
    notafter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notafter(),
      GetArena());
  }
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_secret()) {
    secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_secret(),
      GetArena());
  }
  key_size_ = from.key_size_;
  // @@protoc_insertion_point(copy_constructor:key_message)
}

void key_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_key_message_support_2eproto.base);
  algorithm_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notbefore_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notafter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_size_ = 0;
}

key_message::~key_message() {
  // @@protoc_insertion_point(destructor:key_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void key_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  algorithm_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  purpose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notbefore_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notafter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void key_message::ArenaDtor(void* object) {
  key_message* _this = reinterpret_cast< key_message* >(object);
  (void)_this;
}
void key_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void key_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const key_message& key_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_key_message_support_2eproto.base);
  return *internal_default_instance();
}


void key_message::Clear() {
// @@protoc_insertion_point(message_clear_start:key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      algorithm_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      key_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      purpose_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      notbefore_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      notafter_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      secret_.ClearNonDefaultToEmpty();
    }
  }
  key_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* key_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string algorithm_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_algorithm_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.algorithm_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string key_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.key_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 key_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_key_size(&has_bits);
          key_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string purpose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_purpose();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.purpose");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notBefore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_notbefore();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.notBefore");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string notAfter = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_notafter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "key_message.notAfter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes secret = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* key_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:key_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string algorithm_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_algorithm_type().data(), static_cast<int>(this->_internal_algorithm_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.algorithm_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_algorithm_type(), target);
  }

  // optional string key_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key_name().data(), static_cast<int>(this->_internal_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.key_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key_name(), target);
  }

  // optional int32 key_size = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_key_size(), target);
  }

  // optional string purpose = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_purpose().data(), static_cast<int>(this->_internal_purpose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.purpose");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_purpose(), target);
  }

  // optional string notBefore = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notbefore().data(), static_cast<int>(this->_internal_notbefore().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.notBefore");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_notbefore(), target);
  }

  // optional string notAfter = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_notafter().data(), static_cast<int>(this->_internal_notafter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "key_message.notAfter");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_notafter(), target);
  }

  // optional bytes secret = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:key_message)
  return target;
}

size_t key_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:key_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string algorithm_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_algorithm_type());
    }

    // optional string key_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_key_name());
    }

    // optional string purpose = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_purpose());
    }

    // optional string notBefore = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notbefore());
    }

    // optional string notAfter = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notafter());
    }

    // optional bytes secret = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_secret());
    }

    // optional int32 key_size = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_key_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void key_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:key_message)
  GOOGLE_DCHECK_NE(&from, this);
  const key_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<key_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:key_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:key_message)
    MergeFrom(*source);
  }
}

void key_message::MergeFrom(const key_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:key_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_algorithm_type(from._internal_algorithm_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_key_name(from._internal_key_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_purpose(from._internal_purpose());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_notbefore(from._internal_notbefore());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_notafter(from._internal_notafter());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_secret(from._internal_secret());
    }
    if (cached_has_bits & 0x00000040u) {
      key_size_ = from.key_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void key_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void key_message::CopyFrom(const key_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:key_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool key_message::IsInitialized() const {
  return true;
}

void key_message::InternalSwap(key_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  algorithm_type_.Swap(&other->algorithm_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_name_.Swap(&other->key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  purpose_.Swap(&other->purpose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notbefore_.Swap(&other->notbefore_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  notafter_.Swap(&other->notafter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  secret_.Swap(&other->secret_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(key_size_, other->key_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata key_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void scheme_message::InitAsDefaultInstance() {
  ::_scheme_message_default_instance_._instance.get_mutable()->encryption_key_ = const_cast< ::key_message*>(
      ::key_message::internal_default_instance());
  ::_scheme_message_default_instance_._instance.get_mutable()->parameters_ = const_cast< ::hmac_parameters_message*>(
      ::hmac_parameters_message::internal_default_instance());
}
class scheme_message::_Internal {
 public:
  using HasBits = decltype(std::declval<scheme_message>()._has_bits_);
  static void set_has_scheme_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::key_message& encryption_key(const scheme_message* msg);
  static void set_has_encryption_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hmac_parameters_message& parameters(const scheme_message* msg);
  static void set_has_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_public_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::key_message&
scheme_message::_Internal::encryption_key(const scheme_message* msg) {
  return *msg->encryption_key_;
}
const ::hmac_parameters_message&
scheme_message::_Internal::parameters(const scheme_message* msg) {
  return *msg->parameters_;
}
scheme_message::scheme_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:scheme_message)
}
scheme_message::scheme_message(const scheme_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scheme_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scheme_type()) {
    scheme_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scheme_type(),
      GetArena());
  }
  public_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_public_nonce()) {
    public_nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_public_nonce(),
      GetArena());
  }
  if (from._internal_has_encryption_key()) {
    encryption_key_ = new ::key_message(*from.encryption_key_);
  } else {
    encryption_key_ = nullptr;
  }
  if (from._internal_has_parameters()) {
    parameters_ = new ::hmac_parameters_message(*from.parameters_);
  } else {
    parameters_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:scheme_message)
}

void scheme_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_scheme_message_support_2eproto.base);
  scheme_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryption_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parameters_) -
      reinterpret_cast<char*>(&encryption_key_)) + sizeof(parameters_));
}

scheme_message::~scheme_message() {
  // @@protoc_insertion_point(destructor:scheme_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void scheme_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scheme_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  public_nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete encryption_key_;
  if (this != internal_default_instance()) delete parameters_;
}

void scheme_message::ArenaDtor(void* object) {
  scheme_message* _this = reinterpret_cast< scheme_message* >(object);
  (void)_this;
}
void scheme_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void scheme_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const scheme_message& scheme_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_scheme_message_support_2eproto.base);
  return *internal_default_instance();
}


void scheme_message::Clear() {
// @@protoc_insertion_point(message_clear_start:scheme_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      scheme_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      public_nonce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(encryption_key_ != nullptr);
      encryption_key_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(parameters_ != nullptr);
      parameters_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* scheme_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string scheme_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scheme_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "scheme_message.scheme_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .key_message encryption_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_encryption_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .hmac_parameters_message parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes public_nonce = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_public_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* scheme_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:scheme_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string scheme_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scheme_type().data(), static_cast<int>(this->_internal_scheme_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "scheme_message.scheme_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scheme_type(), target);
  }

  // optional .key_message encryption_key = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::encryption_key(this), target, stream);
  }

  // optional .hmac_parameters_message parameters = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::parameters(this), target, stream);
  }

  // optional bytes public_nonce = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_public_nonce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scheme_message)
  return target;
}

size_t scheme_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:scheme_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string scheme_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scheme_type());
    }

    // optional bytes public_nonce = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_public_nonce());
    }

    // optional .key_message encryption_key = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *encryption_key_);
    }

    // optional .hmac_parameters_message parameters = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parameters_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void scheme_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scheme_message)
  GOOGLE_DCHECK_NE(&from, this);
  const scheme_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<scheme_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scheme_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scheme_message)
    MergeFrom(*source);
  }
}

void scheme_message::MergeFrom(const scheme_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scheme_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_scheme_type(from._internal_scheme_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_public_nonce(from._internal_public_nonce());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_encryption_key()->::key_message::MergeFrom(from._internal_encryption_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_parameters()->::hmac_parameters_message::MergeFrom(from._internal_parameters());
    }
  }
}

void scheme_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scheme_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void scheme_message::CopyFrom(const scheme_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scheme_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool scheme_message::IsInitialized() const {
  return true;
}

void scheme_message::InternalSwap(scheme_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scheme_type_.Swap(&other->scheme_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  public_nonce_.Swap(&other->public_nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(scheme_message, parameters_)
      + sizeof(scheme_message::parameters_)
      - PROTOBUF_FIELD_OFFSET(scheme_message, encryption_key_)>(
          reinterpret_cast<char*>(&encryption_key_),
          reinterpret_cast<char*>(&other->encryption_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata scheme_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void crypto_signature::InitAsDefaultInstance() {
}
class crypto_signature::_Internal {
 public:
  using HasBits = decltype(std::declval<crypto_signature>()._has_bits_);
  static void set_has_encryption_algorithm_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serialized_statement(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_signer_name(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

crypto_signature::crypto_signature(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:crypto_signature)
}
crypto_signature::crypto_signature(const crypto_signature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encryption_algorithm_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_encryption_algorithm_name()) {
    encryption_algorithm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encryption_algorithm_name(),
      GetArena());
  }
  serialized_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_serialized_statement()) {
    serialized_statement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_serialized_statement(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  signer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signer_name()) {
    signer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signer_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:crypto_signature)
}

void crypto_signature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_crypto_signature_support_2eproto.base);
  encryption_algorithm_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_statement_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

crypto_signature::~crypto_signature() {
  // @@protoc_insertion_point(destructor:crypto_signature)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void crypto_signature::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  encryption_algorithm_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialized_statement_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signer_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void crypto_signature::ArenaDtor(void* object) {
  crypto_signature* _this = reinterpret_cast< crypto_signature* >(object);
  (void)_this;
}
void crypto_signature::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void crypto_signature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const crypto_signature& crypto_signature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_crypto_signature_support_2eproto.base);
  return *internal_default_instance();
}


void crypto_signature::Clear() {
// @@protoc_insertion_point(message_clear_start:crypto_signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      encryption_algorithm_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_statement_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      signer_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* crypto_signature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string encryption_algorithm_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_encryption_algorithm_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "crypto_signature.encryption_algorithm_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string serialized_statement = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_serialized_statement();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "crypto_signature.serialized_statement");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "crypto_signature.signature");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string signer_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signer_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "crypto_signature.signer_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* crypto_signature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crypto_signature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string encryption_algorithm_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_encryption_algorithm_name().data(), static_cast<int>(this->_internal_encryption_algorithm_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.encryption_algorithm_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_encryption_algorithm_name(), target);
  }

  // required string serialized_statement = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_serialized_statement().data(), static_cast<int>(this->_internal_serialized_statement().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.serialized_statement");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serialized_statement(), target);
  }

  // optional string signature = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.signature");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signature(), target);
  }

  // optional string signer_name = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_signer_name().data(), static_cast<int>(this->_internal_signer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "crypto_signature.signer_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_signer_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crypto_signature)
  return target;
}

size_t crypto_signature::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:crypto_signature)
  size_t total_size = 0;

  if (_internal_has_encryption_algorithm_name()) {
    // required string encryption_algorithm_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encryption_algorithm_name());
  }

  if (_internal_has_serialized_statement()) {
    // required string serialized_statement = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialized_statement());
  }

  return total_size;
}
size_t crypto_signature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crypto_signature)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string encryption_algorithm_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encryption_algorithm_name());

    // required string serialized_statement = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialized_statement());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional string signature = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signature());
    }

    // optional string signer_name = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_signer_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void crypto_signature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:crypto_signature)
  GOOGLE_DCHECK_NE(&from, this);
  const crypto_signature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<crypto_signature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:crypto_signature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:crypto_signature)
    MergeFrom(*source);
  }
}

void crypto_signature::MergeFrom(const crypto_signature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crypto_signature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encryption_algorithm_name(from._internal_encryption_algorithm_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serialized_statement(from._internal_serialized_statement());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_signer_name(from._internal_signer_name());
    }
  }
}

void crypto_signature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:crypto_signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void crypto_signature::CopyFrom(const crypto_signature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crypto_signature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool crypto_signature::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void crypto_signature::InternalSwap(crypto_signature* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  encryption_algorithm_name_.Swap(&other->encryption_algorithm_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serialized_statement_.Swap(&other->serialized_statement_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signer_name_.Swap(&other->signer_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata crypto_signature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cert_name_message::InitAsDefaultInstance() {
}
class cert_name_message::_Internal {
 public:
  using HasBits = decltype(std::declval<cert_name_message>()._has_bits_);
  static void set_has_name_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

cert_name_message::cert_name_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cert_name_message)
}
cert_name_message::cert_name_message(const cert_name_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_type()) {
    name_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name_type(),
      GetArena());
  }
  name_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name_value()) {
    name_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cert_name_message)
}

void cert_name_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cert_name_message_support_2eproto.base);
  name_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

cert_name_message::~cert_name_message() {
  // @@protoc_insertion_point(destructor:cert_name_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cert_name_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cert_name_message::ArenaDtor(void* object) {
  cert_name_message* _this = reinterpret_cast< cert_name_message* >(object);
  (void)_this;
}
void cert_name_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cert_name_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cert_name_message& cert_name_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cert_name_message_support_2eproto.base);
  return *internal_default_instance();
}


void cert_name_message::Clear() {
// @@protoc_insertion_point(message_clear_start:cert_name_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cert_name_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cert_name_message.name_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cert_name_message.name_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cert_name_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cert_name_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_type().data(), static_cast<int>(this->_internal_name_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cert_name_message.name_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_type(), target);
  }

  // optional string name_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name_value().data(), static_cast<int>(this->_internal_name_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cert_name_message.name_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cert_name_message)
  return target;
}

size_t cert_name_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cert_name_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_type());
    }

    // optional string name_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cert_name_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cert_name_message)
  GOOGLE_DCHECK_NE(&from, this);
  const cert_name_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cert_name_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cert_name_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cert_name_message)
    MergeFrom(*source);
  }
}

void cert_name_message::MergeFrom(const cert_name_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cert_name_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name_type(from._internal_name_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name_value(from._internal_name_value());
    }
  }
}

void cert_name_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cert_name_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_name_message::CopyFrom(const cert_name_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cert_name_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_name_message::IsInitialized() const {
  return true;
}

void cert_name_message::InternalSwap(cert_name_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_type_.Swap(&other->name_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_value_.Swap(&other->name_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata cert_name_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cert_principal_name_message::InitAsDefaultInstance() {
}
class cert_principal_name_message::_Internal {
 public:
};

cert_principal_name_message::cert_principal_name_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cert_principal_name_message)
}
cert_principal_name_message::cert_principal_name_message(const cert_principal_name_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:cert_principal_name_message)
}

void cert_principal_name_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cert_principal_name_message_support_2eproto.base);
}

cert_principal_name_message::~cert_principal_name_message() {
  // @@protoc_insertion_point(destructor:cert_principal_name_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cert_principal_name_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void cert_principal_name_message::ArenaDtor(void* object) {
  cert_principal_name_message* _this = reinterpret_cast< cert_principal_name_message* >(object);
  (void)_this;
}
void cert_principal_name_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cert_principal_name_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cert_principal_name_message& cert_principal_name_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cert_principal_name_message_support_2eproto.base);
  return *internal_default_instance();
}


void cert_principal_name_message::Clear() {
// @@protoc_insertion_point(message_clear_start:cert_principal_name_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cert_principal_name_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .cert_name_message names = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_names(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cert_principal_name_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cert_principal_name_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .cert_name_message names = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_names_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_names(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cert_principal_name_message)
  return target;
}

size_t cert_principal_name_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cert_principal_name_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cert_name_message names = 1;
  total_size += 1UL * this->_internal_names_size();
  for (const auto& msg : this->names_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cert_principal_name_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cert_principal_name_message)
  GOOGLE_DCHECK_NE(&from, this);
  const cert_principal_name_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cert_principal_name_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cert_principal_name_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cert_principal_name_message)
    MergeFrom(*source);
  }
}

void cert_principal_name_message::MergeFrom(const cert_principal_name_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cert_principal_name_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
}

void cert_principal_name_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cert_principal_name_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_principal_name_message::CopyFrom(const cert_principal_name_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cert_principal_name_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_principal_name_message::IsInitialized() const {
  return true;
}

void cert_principal_name_message::InternalSwap(cert_principal_name_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cert_principal_name_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cert_rsa_parameters_message::InitAsDefaultInstance() {
}
class cert_rsa_parameters_message::_Internal {
 public:
  using HasBits = decltype(std::declval<cert_rsa_parameters_message>()._has_bits_);
  static void set_has_modulus_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_exponent_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_exponent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_modulus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

cert_rsa_parameters_message::cert_rsa_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cert_rsa_parameters_message)
}
cert_rsa_parameters_message::cert_rsa_parameters_message(const cert_rsa_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_exponent()) {
    exponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_exponent(),
      GetArena());
  }
  modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modulus()) {
    modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_modulus(),
      GetArena());
  }
  ::memcpy(&modulus_size_, &from.modulus_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&exponent_size_) -
    reinterpret_cast<char*>(&modulus_size_)) + sizeof(exponent_size_));
  // @@protoc_insertion_point(copy_constructor:cert_rsa_parameters_message)
}

void cert_rsa_parameters_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cert_rsa_parameters_message_support_2eproto.base);
  exponent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modulus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&modulus_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exponent_size_) -
      reinterpret_cast<char*>(&modulus_size_)) + sizeof(exponent_size_));
}

cert_rsa_parameters_message::~cert_rsa_parameters_message() {
  // @@protoc_insertion_point(destructor:cert_rsa_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cert_rsa_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  exponent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  modulus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cert_rsa_parameters_message::ArenaDtor(void* object) {
  cert_rsa_parameters_message* _this = reinterpret_cast< cert_rsa_parameters_message* >(object);
  (void)_this;
}
void cert_rsa_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cert_rsa_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cert_rsa_parameters_message& cert_rsa_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cert_rsa_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void cert_rsa_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:cert_rsa_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      exponent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      modulus_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&modulus_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exponent_size_) -
        reinterpret_cast<char*>(&modulus_size_)) + sizeof(exponent_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cert_rsa_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 modulus_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_modulus_size(&has_bits);
          modulus_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 exponent_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_exponent_size(&has_bits);
          exponent_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes exponent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_exponent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes modulus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_modulus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cert_rsa_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cert_rsa_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 modulus_size = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_modulus_size(), target);
  }

  // optional int32 exponent_size = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_exponent_size(), target);
  }

  // optional bytes exponent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_exponent(), target);
  }

  // optional bytes modulus = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_modulus(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cert_rsa_parameters_message)
  return target;
}

size_t cert_rsa_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cert_rsa_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes exponent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_exponent());
    }

    // optional bytes modulus = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_modulus());
    }

    // optional int32 modulus_size = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_modulus_size());
    }

    // optional int32 exponent_size = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_exponent_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cert_rsa_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cert_rsa_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const cert_rsa_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cert_rsa_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cert_rsa_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cert_rsa_parameters_message)
    MergeFrom(*source);
  }
}

void cert_rsa_parameters_message::MergeFrom(const cert_rsa_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cert_rsa_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_exponent(from._internal_exponent());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_modulus(from._internal_modulus());
    }
    if (cached_has_bits & 0x00000004u) {
      modulus_size_ = from.modulus_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      exponent_size_ = from.exponent_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cert_rsa_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cert_rsa_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_rsa_parameters_message::CopyFrom(const cert_rsa_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cert_rsa_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_rsa_parameters_message::IsInitialized() const {
  return true;
}

void cert_rsa_parameters_message::InternalSwap(cert_rsa_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  exponent_.Swap(&other->exponent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  modulus_.Swap(&other->modulus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cert_rsa_parameters_message, exponent_size_)
      + sizeof(cert_rsa_parameters_message::exponent_size_)
      - PROTOBUF_FIELD_OFFSET(cert_rsa_parameters_message, modulus_size_)>(
          reinterpret_cast<char*>(&modulus_size_),
          reinterpret_cast<char*>(&other->modulus_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cert_rsa_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cert_ecc_parameters_message::InitAsDefaultInstance() {
}
class cert_ecc_parameters_message::_Internal {
 public:
  using HasBits = decltype(std::declval<cert_ecc_parameters_message>()._has_bits_);
  static void set_has_prime_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

cert_ecc_parameters_message::cert_ecc_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cert_ecc_parameters_message)
}
cert_ecc_parameters_message::cert_ecc_parameters_message(const cert_ecc_parameters_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  prime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_prime()) {
    prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_prime(),
      GetArena());
  }
  prime_size_ = from.prime_size_;
  // @@protoc_insertion_point(copy_constructor:cert_ecc_parameters_message)
}

void cert_ecc_parameters_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cert_ecc_parameters_message_support_2eproto.base);
  prime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  prime_size_ = 0;
}

cert_ecc_parameters_message::~cert_ecc_parameters_message() {
  // @@protoc_insertion_point(destructor:cert_ecc_parameters_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cert_ecc_parameters_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  prime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cert_ecc_parameters_message::ArenaDtor(void* object) {
  cert_ecc_parameters_message* _this = reinterpret_cast< cert_ecc_parameters_message* >(object);
  (void)_this;
}
void cert_ecc_parameters_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cert_ecc_parameters_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cert_ecc_parameters_message& cert_ecc_parameters_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cert_ecc_parameters_message_support_2eproto.base);
  return *internal_default_instance();
}


void cert_ecc_parameters_message::Clear() {
// @@protoc_insertion_point(message_clear_start:cert_ecc_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    prime_.ClearNonDefaultToEmpty();
  }
  prime_size_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cert_ecc_parameters_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 prime_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_prime_size(&has_bits);
          prime_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes prime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_prime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cert_ecc_parameters_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cert_ecc_parameters_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 prime_size = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_prime_size(), target);
  }

  // optional bytes prime = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_prime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cert_ecc_parameters_message)
  return target;
}

size_t cert_ecc_parameters_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cert_ecc_parameters_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes prime = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_prime());
    }

    // optional int32 prime_size = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_prime_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cert_ecc_parameters_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cert_ecc_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  const cert_ecc_parameters_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cert_ecc_parameters_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cert_ecc_parameters_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cert_ecc_parameters_message)
    MergeFrom(*source);
  }
}

void cert_ecc_parameters_message::MergeFrom(const cert_ecc_parameters_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cert_ecc_parameters_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_prime(from._internal_prime());
    }
    if (cached_has_bits & 0x00000002u) {
      prime_size_ = from.prime_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cert_ecc_parameters_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cert_ecc_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_ecc_parameters_message::CopyFrom(const cert_ecc_parameters_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cert_ecc_parameters_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_ecc_parameters_message::IsInitialized() const {
  return true;
}

void cert_ecc_parameters_message::InternalSwap(cert_ecc_parameters_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prime_.Swap(&other->prime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(prime_size_, other->prime_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cert_ecc_parameters_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cert_algorithm_message::InitAsDefaultInstance() {
  ::_cert_algorithm_message_default_instance_._instance.get_mutable()->rsa_params_ = const_cast< ::cert_rsa_parameters_message*>(
      ::cert_rsa_parameters_message::internal_default_instance());
  ::_cert_algorithm_message_default_instance_._instance.get_mutable()->ecc_params_ = const_cast< ::cert_ecc_parameters_message*>(
      ::cert_ecc_parameters_message::internal_default_instance());
}
class cert_algorithm_message::_Internal {
 public:
  using HasBits = decltype(std::declval<cert_algorithm_message>()._has_bits_);
  static void set_has_algorithm_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cert_rsa_parameters_message& rsa_params(const cert_algorithm_message* msg);
  static void set_has_rsa_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::cert_ecc_parameters_message& ecc_params(const cert_algorithm_message* msg);
  static void set_has_ecc_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::cert_rsa_parameters_message&
cert_algorithm_message::_Internal::rsa_params(const cert_algorithm_message* msg) {
  return *msg->rsa_params_;
}
const ::cert_ecc_parameters_message&
cert_algorithm_message::_Internal::ecc_params(const cert_algorithm_message* msg) {
  return *msg->ecc_params_;
}
cert_algorithm_message::cert_algorithm_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cert_algorithm_message)
}
cert_algorithm_message::cert_algorithm_message(const cert_algorithm_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  algorithm_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_algorithm_name()) {
    algorithm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_algorithm_name(),
      GetArena());
  }
  if (from._internal_has_rsa_params()) {
    rsa_params_ = new ::cert_rsa_parameters_message(*from.rsa_params_);
  } else {
    rsa_params_ = nullptr;
  }
  if (from._internal_has_ecc_params()) {
    ecc_params_ = new ::cert_ecc_parameters_message(*from.ecc_params_);
  } else {
    ecc_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:cert_algorithm_message)
}

void cert_algorithm_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cert_algorithm_message_support_2eproto.base);
  algorithm_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rsa_params_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ecc_params_) -
      reinterpret_cast<char*>(&rsa_params_)) + sizeof(ecc_params_));
}

cert_algorithm_message::~cert_algorithm_message() {
  // @@protoc_insertion_point(destructor:cert_algorithm_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cert_algorithm_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  algorithm_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rsa_params_;
  if (this != internal_default_instance()) delete ecc_params_;
}

void cert_algorithm_message::ArenaDtor(void* object) {
  cert_algorithm_message* _this = reinterpret_cast< cert_algorithm_message* >(object);
  (void)_this;
}
void cert_algorithm_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cert_algorithm_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cert_algorithm_message& cert_algorithm_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cert_algorithm_message_support_2eproto.base);
  return *internal_default_instance();
}


void cert_algorithm_message::Clear() {
// @@protoc_insertion_point(message_clear_start:cert_algorithm_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      algorithm_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rsa_params_ != nullptr);
      rsa_params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ecc_params_ != nullptr);
      ecc_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cert_algorithm_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string algorithm_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_algorithm_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cert_algorithm_message.algorithm_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .cert_rsa_parameters_message rsa_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsa_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .cert_ecc_parameters_message ecc_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ecc_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cert_algorithm_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cert_algorithm_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string algorithm_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_algorithm_name().data(), static_cast<int>(this->_internal_algorithm_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cert_algorithm_message.algorithm_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_algorithm_name(), target);
  }

  // optional .cert_rsa_parameters_message rsa_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rsa_params(this), target, stream);
  }

  // optional .cert_ecc_parameters_message ecc_params = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ecc_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cert_algorithm_message)
  return target;
}

size_t cert_algorithm_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cert_algorithm_message)
  size_t total_size = 0;

  // required string algorithm_name = 1;
  if (_internal_has_algorithm_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_algorithm_name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .cert_rsa_parameters_message rsa_params = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rsa_params_);
    }

    // optional .cert_ecc_parameters_message ecc_params = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ecc_params_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cert_algorithm_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cert_algorithm_message)
  GOOGLE_DCHECK_NE(&from, this);
  const cert_algorithm_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cert_algorithm_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cert_algorithm_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cert_algorithm_message)
    MergeFrom(*source);
  }
}

void cert_algorithm_message::MergeFrom(const cert_algorithm_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cert_algorithm_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_algorithm_name(from._internal_algorithm_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_rsa_params()->::cert_rsa_parameters_message::MergeFrom(from._internal_rsa_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ecc_params()->::cert_ecc_parameters_message::MergeFrom(from._internal_ecc_params());
    }
  }
}

void cert_algorithm_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cert_algorithm_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_algorithm_message::CopyFrom(const cert_algorithm_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cert_algorithm_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_algorithm_message::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void cert_algorithm_message::InternalSwap(cert_algorithm_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  algorithm_name_.Swap(&other->algorithm_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(cert_algorithm_message, ecc_params_)
      + sizeof(cert_algorithm_message::ecc_params_)
      - PROTOBUF_FIELD_OFFSET(cert_algorithm_message, rsa_params_)>(
          reinterpret_cast<char*>(&rsa_params_),
          reinterpret_cast<char*>(&other->rsa_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata cert_algorithm_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cert_properties_message::InitAsDefaultInstance() {
}
class cert_properties_message::_Internal {
 public:
  using HasBits = decltype(std::declval<cert_properties_message>()._has_bits_);
  static void set_has_property_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_property_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

cert_properties_message::cert_properties_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cert_properties_message)
}
cert_properties_message::cert_properties_message(const cert_properties_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property_name()) {
    property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_name(),
      GetArena());
  }
  property_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_property_value()) {
    property_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_property_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:cert_properties_message)
}

void cert_properties_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_cert_properties_message_support_2eproto.base);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  property_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

cert_properties_message::~cert_properties_message() {
  // @@protoc_insertion_point(destructor:cert_properties_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void cert_properties_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  property_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void cert_properties_message::ArenaDtor(void* object) {
  cert_properties_message* _this = reinterpret_cast< cert_properties_message* >(object);
  (void)_this;
}
void cert_properties_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void cert_properties_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cert_properties_message& cert_properties_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cert_properties_message_support_2eproto.base);
  return *internal_default_instance();
}


void cert_properties_message::Clear() {
// @@protoc_insertion_point(message_clear_start:cert_properties_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      property_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      property_value_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* cert_properties_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cert_properties_message.property_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string property_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_property_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "cert_properties_message.property_value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* cert_properties_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cert_properties_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string property_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property_name().data(), static_cast<int>(this->_internal_property_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cert_properties_message.property_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // optional string property_value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_property_value().data(), static_cast<int>(this->_internal_property_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "cert_properties_message.property_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_property_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cert_properties_message)
  return target;
}

size_t cert_properties_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cert_properties_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string property_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property_name());
    }

    // optional string property_value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_property_value());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cert_properties_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cert_properties_message)
  GOOGLE_DCHECK_NE(&from, this);
  const cert_properties_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cert_properties_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cert_properties_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cert_properties_message)
    MergeFrom(*source);
  }
}

void cert_properties_message::MergeFrom(const cert_properties_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cert_properties_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_property_name(from._internal_property_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_property_value(from._internal_property_value());
    }
  }
}

void cert_properties_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cert_properties_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cert_properties_message::CopyFrom(const cert_properties_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cert_properties_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cert_properties_message::IsInitialized() const {
  return true;
}

void cert_properties_message::InternalSwap(cert_properties_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  property_name_.Swap(&other->property_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  property_value_.Swap(&other->property_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata cert_properties_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void certificate_message::InitAsDefaultInstance() {
  ::_certificate_message_default_instance_._instance.get_mutable()->subject_key_ = const_cast< ::cert_algorithm_message*>(
      ::cert_algorithm_message::internal_default_instance());
  ::_certificate_message_default_instance_._instance.get_mutable()->signing_key_ = const_cast< ::cert_algorithm_message*>(
      ::cert_algorithm_message::internal_default_instance());
}
class certificate_message::_Internal {
 public:
  using HasBits = decltype(std::declval<certificate_message>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::cert_algorithm_message& subject_key(const certificate_message* msg);
  static void set_has_subject_key(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_not_before(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_not_after(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nonce(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_canonical(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_revocation_address(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_date_signed(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::cert_algorithm_message& signing_key(const certificate_message* msg);
  static void set_has_signing_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::cert_algorithm_message&
certificate_message::_Internal::subject_key(const certificate_message* msg) {
  return *msg->subject_key_;
}
const ::cert_algorithm_message&
certificate_message::_Internal::signing_key(const certificate_message* msg) {
  return *msg->signing_key_;
}
certificate_message::certificate_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subject_(arena),
  properties_(arena),
  issuer_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:certificate_message)
}
certificate_message::certificate_message(const certificate_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      subject_(from.subject_),
      properties_(from.properties_),
      issuer_(from.issuer_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_version()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_purpose()) {
    purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_purpose(),
      GetArena());
  }
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_not_before()) {
    not_before_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_before(),
      GetArena());
  }
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_not_after()) {
    not_after_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_not_after(),
      GetArena());
  }
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nonce()) {
    nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nonce(),
      GetArena());
  }
  canonical_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_canonical()) {
    canonical_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_canonical(),
      GetArena());
  }
  revocation_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_revocation_address()) {
    revocation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_revocation_address(),
      GetArena());
  }
  date_signed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_date_signed()) {
    date_signed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_date_signed(),
      GetArena());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_signature()) {
    signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_signature(),
      GetArena());
  }
  if (from._internal_has_subject_key()) {
    subject_key_ = new ::cert_algorithm_message(*from.subject_key_);
  } else {
    subject_key_ = nullptr;
  }
  if (from._internal_has_signing_key()) {
    signing_key_ = new ::cert_algorithm_message(*from.signing_key_);
  } else {
    signing_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:certificate_message)
}

void certificate_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_certificate_message_support_2eproto.base);
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  purpose_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  canonical_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revocation_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_signed_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&subject_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signing_key_) -
      reinterpret_cast<char*>(&subject_key_)) + sizeof(signing_key_));
}

certificate_message::~certificate_message() {
  // @@protoc_insertion_point(destructor:certificate_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void certificate_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  purpose_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_before_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  not_after_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  canonical_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  revocation_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  date_signed_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subject_key_;
  if (this != internal_default_instance()) delete signing_key_;
}

void certificate_message::ArenaDtor(void* object) {
  certificate_message* _this = reinterpret_cast< certificate_message* >(object);
  (void)_this;
}
void certificate_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void certificate_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const certificate_message& certificate_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_certificate_message_support_2eproto.base);
  return *internal_default_instance();
}


void certificate_message::Clear() {
// @@protoc_insertion_point(message_clear_start:certificate_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.Clear();
  properties_.Clear();
  issuer_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      purpose_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      not_before_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      not_after_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      nonce_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      canonical_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      revocation_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      date_signed_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      signature_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(subject_key_ != nullptr);
      subject_key_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(signing_key_ != nullptr);
      signing_key_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* certificate_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certificate_message.version");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cert_name_message subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subject(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .cert_algorithm_message subject_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subject_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cert_properties_message properties = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string purpose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_purpose();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certificate_message.purpose");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string not_before = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_not_before();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certificate_message.not_before");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string not_after = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_not_after();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certificate_message.not_after");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes nonce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes canonical = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_canonical();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string revocation_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_revocation_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certificate_message.revocation_address");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string date_signed = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_date_signed();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "certificate_message.date_signed");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .cert_name_message issuer = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_issuer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .cert_algorithm_message signing_key = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_signing_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes signature = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* certificate_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:certificate_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "certificate_message.version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // repeated .cert_name_message subject = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subject_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_subject(i), target, stream);
  }

  // optional .cert_algorithm_message subject_key = 3;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::subject_key(this), target, stream);
  }

  // repeated .cert_properties_message properties = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_properties(i), target, stream);
  }

  // optional string purpose = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_purpose().data(), static_cast<int>(this->_internal_purpose().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "certificate_message.purpose");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_purpose(), target);
  }

  // optional string not_before = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_not_before().data(), static_cast<int>(this->_internal_not_before().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "certificate_message.not_before");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_not_before(), target);
  }

  // optional string not_after = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_not_after().data(), static_cast<int>(this->_internal_not_after().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "certificate_message.not_after");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_not_after(), target);
  }

  // optional bytes nonce = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_nonce(), target);
  }

  // optional bytes canonical = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_canonical(), target);
  }

  // optional string revocation_address = 10;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_revocation_address().data(), static_cast<int>(this->_internal_revocation_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "certificate_message.revocation_address");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_revocation_address(), target);
  }

  // optional string date_signed = 11;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_signed().data(), static_cast<int>(this->_internal_date_signed().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "certificate_message.date_signed");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_date_signed(), target);
  }

  // repeated .cert_name_message issuer = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_issuer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_issuer(i), target, stream);
  }

  // optional .cert_algorithm_message signing_key = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::signing_key(this), target, stream);
  }

  // optional bytes signature = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:certificate_message)
  return target;
}

size_t certificate_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:certificate_message)
  size_t total_size = 0;

  // required string version = 1;
  if (_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .cert_name_message subject = 2;
  total_size += 1UL * this->_internal_subject_size();
  for (const auto& msg : this->subject_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cert_properties_message properties = 4;
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .cert_name_message issuer = 12;
  total_size += 1UL * this->_internal_issuer_size();
  for (const auto& msg : this->issuer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional string purpose = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_purpose());
    }

    // optional string not_before = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_not_before());
    }

    // optional string not_after = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_not_after());
    }

    // optional bytes nonce = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_nonce());
    }

    // optional bytes canonical = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_canonical());
    }

    // optional string revocation_address = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_revocation_address());
    }

    // optional string date_signed = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_signed());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional bytes signature = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_signature());
    }

    // optional .cert_algorithm_message subject_key = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *subject_key_);
    }

    // optional .cert_algorithm_message signing_key = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signing_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void certificate_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:certificate_message)
  GOOGLE_DCHECK_NE(&from, this);
  const certificate_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<certificate_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:certificate_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:certificate_message)
    MergeFrom(*source);
  }
}

void certificate_message::MergeFrom(const certificate_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:certificate_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subject_.MergeFrom(from.subject_);
  properties_.MergeFrom(from.properties_);
  issuer_.MergeFrom(from.issuer_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_purpose(from._internal_purpose());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_not_before(from._internal_not_before());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_not_after(from._internal_not_after());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_nonce(from._internal_nonce());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_canonical(from._internal_canonical());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_revocation_address(from._internal_revocation_address());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_date_signed(from._internal_date_signed());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_signature(from._internal_signature());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_subject_key()->::cert_algorithm_message::MergeFrom(from._internal_subject_key());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_signing_key()->::cert_algorithm_message::MergeFrom(from._internal_signing_key());
    }
  }
}

void certificate_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:certificate_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void certificate_message::CopyFrom(const certificate_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:certificate_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool certificate_message::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_subject_key()) {
    if (!subject_key_->IsInitialized()) return false;
  }
  if (_internal_has_signing_key()) {
    if (!signing_key_->IsInitialized()) return false;
  }
  return true;
}

void certificate_message::InternalSwap(certificate_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  subject_.InternalSwap(&other->subject_);
  properties_.InternalSwap(&other->properties_);
  issuer_.InternalSwap(&other->issuer_);
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  purpose_.Swap(&other->purpose_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_before_.Swap(&other->not_before_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  not_after_.Swap(&other->not_after_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  canonical_.Swap(&other->canonical_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  revocation_address_.Swap(&other->revocation_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  date_signed_.Swap(&other->date_signed_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(certificate_message, signing_key_)
      + sizeof(certificate_message::signing_key_)
      - PROTOBUF_FIELD_OFFSET(certificate_message, subject_key_)>(
          reinterpret_cast<char*>(&subject_key_),
          reinterpret_cast<char*>(&other->subject_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata certificate_message::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::binary_blob* Arena::CreateMaybeMessage< ::binary_blob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::binary_blob >(arena);
}
template<> PROTOBUF_NOINLINE ::encrypted_message* Arena::CreateMaybeMessage< ::encrypted_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::encrypted_message >(arena);
}
template<> PROTOBUF_NOINLINE ::signature_message* Arena::CreateMaybeMessage< ::signature_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::signature_message >(arena);
}
template<> PROTOBUF_NOINLINE ::rsa_parameters_message* Arena::CreateMaybeMessage< ::rsa_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsa_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::ecc_parameters_message* Arena::CreateMaybeMessage< ::ecc_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecc_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::rsa_public_parameters_message* Arena::CreateMaybeMessage< ::rsa_public_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsa_public_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::ecc_public_parameters_message* Arena::CreateMaybeMessage< ::ecc_public_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecc_public_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::rsa_private_parameters_message* Arena::CreateMaybeMessage< ::rsa_private_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rsa_private_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::ecc_private_parameters_message* Arena::CreateMaybeMessage< ::ecc_private_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ecc_private_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::curve_parameters_message* Arena::CreateMaybeMessage< ::curve_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::curve_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::hmac_parameters_message* Arena::CreateMaybeMessage< ::hmac_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hmac_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::key_message* Arena::CreateMaybeMessage< ::key_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::key_message >(arena);
}
template<> PROTOBUF_NOINLINE ::scheme_message* Arena::CreateMaybeMessage< ::scheme_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::scheme_message >(arena);
}
template<> PROTOBUF_NOINLINE ::crypto_signature* Arena::CreateMaybeMessage< ::crypto_signature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crypto_signature >(arena);
}
template<> PROTOBUF_NOINLINE ::cert_name_message* Arena::CreateMaybeMessage< ::cert_name_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cert_name_message >(arena);
}
template<> PROTOBUF_NOINLINE ::cert_principal_name_message* Arena::CreateMaybeMessage< ::cert_principal_name_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cert_principal_name_message >(arena);
}
template<> PROTOBUF_NOINLINE ::cert_rsa_parameters_message* Arena::CreateMaybeMessage< ::cert_rsa_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cert_rsa_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::cert_ecc_parameters_message* Arena::CreateMaybeMessage< ::cert_ecc_parameters_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cert_ecc_parameters_message >(arena);
}
template<> PROTOBUF_NOINLINE ::cert_algorithm_message* Arena::CreateMaybeMessage< ::cert_algorithm_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cert_algorithm_message >(arena);
}
template<> PROTOBUF_NOINLINE ::cert_properties_message* Arena::CreateMaybeMessage< ::cert_properties_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cert_properties_message >(arena);
}
template<> PROTOBUF_NOINLINE ::certificate_message* Arena::CreateMaybeMessage< ::certificate_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::certificate_message >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
