// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: support.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_support_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_support_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_support_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_support_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_support_2eproto;
class binary_blob_message;
class binary_blob_messageDefaultTypeInternal;
extern binary_blob_messageDefaultTypeInternal _binary_blob_message_default_instance_;
class cert_algorithm_message;
class cert_algorithm_messageDefaultTypeInternal;
extern cert_algorithm_messageDefaultTypeInternal _cert_algorithm_message_default_instance_;
class cert_ecc_parameters_message;
class cert_ecc_parameters_messageDefaultTypeInternal;
extern cert_ecc_parameters_messageDefaultTypeInternal _cert_ecc_parameters_message_default_instance_;
class cert_name_message;
class cert_name_messageDefaultTypeInternal;
extern cert_name_messageDefaultTypeInternal _cert_name_message_default_instance_;
class cert_principal_name_message;
class cert_principal_name_messageDefaultTypeInternal;
extern cert_principal_name_messageDefaultTypeInternal _cert_principal_name_message_default_instance_;
class cert_properties_message;
class cert_properties_messageDefaultTypeInternal;
extern cert_properties_messageDefaultTypeInternal _cert_properties_message_default_instance_;
class cert_rsa_parameters_message;
class cert_rsa_parameters_messageDefaultTypeInternal;
extern cert_rsa_parameters_messageDefaultTypeInternal _cert_rsa_parameters_message_default_instance_;
class certificate_message;
class certificate_messageDefaultTypeInternal;
extern certificate_messageDefaultTypeInternal _certificate_message_default_instance_;
class crypto_signature_message;
class crypto_signature_messageDefaultTypeInternal;
extern crypto_signature_messageDefaultTypeInternal _crypto_signature_message_default_instance_;
class ecc_private_parameters_message;
class ecc_private_parameters_messageDefaultTypeInternal;
extern ecc_private_parameters_messageDefaultTypeInternal _ecc_private_parameters_message_default_instance_;
class ecc_public_parameters_message;
class ecc_public_parameters_messageDefaultTypeInternal;
extern ecc_public_parameters_messageDefaultTypeInternal _ecc_public_parameters_message_default_instance_;
class encrypted_message;
class encrypted_messageDefaultTypeInternal;
extern encrypted_messageDefaultTypeInternal _encrypted_message_default_instance_;
class hmac_parameters_message;
class hmac_parameters_messageDefaultTypeInternal;
extern hmac_parameters_messageDefaultTypeInternal _hmac_parameters_message_default_instance_;
class key_message;
class key_messageDefaultTypeInternal;
extern key_messageDefaultTypeInternal _key_message_default_instance_;
class point_message;
class point_messageDefaultTypeInternal;
extern point_messageDefaultTypeInternal _point_message_default_instance_;
class rsa_private_parameters_message;
class rsa_private_parameters_messageDefaultTypeInternal;
extern rsa_private_parameters_messageDefaultTypeInternal _rsa_private_parameters_message_default_instance_;
class rsa_public_parameters_message;
class rsa_public_parameters_messageDefaultTypeInternal;
extern rsa_public_parameters_messageDefaultTypeInternal _rsa_public_parameters_message_default_instance_;
class scheme_message;
class scheme_messageDefaultTypeInternal;
extern scheme_messageDefaultTypeInternal _scheme_message_default_instance_;
class signature_message;
class signature_messageDefaultTypeInternal;
extern signature_messageDefaultTypeInternal _signature_message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::binary_blob_message* Arena::CreateMaybeMessage<::binary_blob_message>(Arena*);
template<> ::cert_algorithm_message* Arena::CreateMaybeMessage<::cert_algorithm_message>(Arena*);
template<> ::cert_ecc_parameters_message* Arena::CreateMaybeMessage<::cert_ecc_parameters_message>(Arena*);
template<> ::cert_name_message* Arena::CreateMaybeMessage<::cert_name_message>(Arena*);
template<> ::cert_principal_name_message* Arena::CreateMaybeMessage<::cert_principal_name_message>(Arena*);
template<> ::cert_properties_message* Arena::CreateMaybeMessage<::cert_properties_message>(Arena*);
template<> ::cert_rsa_parameters_message* Arena::CreateMaybeMessage<::cert_rsa_parameters_message>(Arena*);
template<> ::certificate_message* Arena::CreateMaybeMessage<::certificate_message>(Arena*);
template<> ::crypto_signature_message* Arena::CreateMaybeMessage<::crypto_signature_message>(Arena*);
template<> ::ecc_private_parameters_message* Arena::CreateMaybeMessage<::ecc_private_parameters_message>(Arena*);
template<> ::ecc_public_parameters_message* Arena::CreateMaybeMessage<::ecc_public_parameters_message>(Arena*);
template<> ::encrypted_message* Arena::CreateMaybeMessage<::encrypted_message>(Arena*);
template<> ::hmac_parameters_message* Arena::CreateMaybeMessage<::hmac_parameters_message>(Arena*);
template<> ::key_message* Arena::CreateMaybeMessage<::key_message>(Arena*);
template<> ::point_message* Arena::CreateMaybeMessage<::point_message>(Arena*);
template<> ::rsa_private_parameters_message* Arena::CreateMaybeMessage<::rsa_private_parameters_message>(Arena*);
template<> ::rsa_public_parameters_message* Arena::CreateMaybeMessage<::rsa_public_parameters_message>(Arena*);
template<> ::scheme_message* Arena::CreateMaybeMessage<::scheme_message>(Arena*);
template<> ::signature_message* Arena::CreateMaybeMessage<::signature_message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class binary_blob_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:binary_blob_message) */ {
 public:
  inline binary_blob_message() : binary_blob_message(nullptr) {};
  virtual ~binary_blob_message();

  binary_blob_message(const binary_blob_message& from);
  binary_blob_message(binary_blob_message&& from) noexcept
    : binary_blob_message() {
    *this = ::std::move(from);
  }

  inline binary_blob_message& operator=(const binary_blob_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline binary_blob_message& operator=(binary_blob_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const binary_blob_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const binary_blob_message* internal_default_instance() {
    return reinterpret_cast<const binary_blob_message*>(
               &_binary_blob_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(binary_blob_message& a, binary_blob_message& b) {
    a.Swap(&b);
  }
  inline void Swap(binary_blob_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(binary_blob_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline binary_blob_message* New() const final {
    return CreateMaybeMessage<binary_blob_message>(nullptr);
  }

  binary_blob_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<binary_blob_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const binary_blob_message& from);
  void MergeFrom(const binary_blob_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(binary_blob_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "binary_blob_message";
  }
  protected:
  explicit binary_blob_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobFieldNumber = 1,
  };
  // optional string blob = 1;
  bool has_blob() const;
  private:
  bool _internal_has_blob() const;
  public:
  void clear_blob();
  const std::string& blob() const;
  void set_blob(const std::string& value);
  void set_blob(std::string&& value);
  void set_blob(const char* value);
  void set_blob(const char* value, size_t size);
  std::string* mutable_blob();
  std::string* release_blob();
  void set_allocated_blob(std::string* blob);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_blob();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_blob(
      std::string* blob);
  private:
  const std::string& _internal_blob() const;
  void _internal_set_blob(const std::string& value);
  std::string* _internal_mutable_blob();
  public:

  // @@protoc_insertion_point(class_scope:binary_blob_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blob_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class encrypted_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:encrypted_message) */ {
 public:
  inline encrypted_message() : encrypted_message(nullptr) {};
  virtual ~encrypted_message();

  encrypted_message(const encrypted_message& from);
  encrypted_message(encrypted_message&& from) noexcept
    : encrypted_message() {
    *this = ::std::move(from);
  }

  inline encrypted_message& operator=(const encrypted_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline encrypted_message& operator=(encrypted_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const encrypted_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const encrypted_message* internal_default_instance() {
    return reinterpret_cast<const encrypted_message*>(
               &_encrypted_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(encrypted_message& a, encrypted_message& b) {
    a.Swap(&b);
  }
  inline void Swap(encrypted_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(encrypted_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline encrypted_message* New() const final {
    return CreateMaybeMessage<encrypted_message>(nullptr);
  }

  encrypted_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<encrypted_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const encrypted_message& from);
  void MergeFrom(const encrypted_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(encrypted_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "encrypted_message";
  }
  protected:
  explicit encrypted_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemeIdentifierFieldNumber = 1,
    kMessageIdentifierFieldNumber = 2,
    kSourceFieldNumber = 3,
    kDestinationFieldNumber = 4,
    kDateFieldNumber = 5,
    kBufferFieldNumber = 6,
  };
  // optional string scheme_identifier = 1;
  bool has_scheme_identifier() const;
  private:
  bool _internal_has_scheme_identifier() const;
  public:
  void clear_scheme_identifier();
  const std::string& scheme_identifier() const;
  void set_scheme_identifier(const std::string& value);
  void set_scheme_identifier(std::string&& value);
  void set_scheme_identifier(const char* value);
  void set_scheme_identifier(const char* value, size_t size);
  std::string* mutable_scheme_identifier();
  std::string* release_scheme_identifier();
  void set_allocated_scheme_identifier(std::string* scheme_identifier);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scheme_identifier();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scheme_identifier(
      std::string* scheme_identifier);
  private:
  const std::string& _internal_scheme_identifier() const;
  void _internal_set_scheme_identifier(const std::string& value);
  std::string* _internal_mutable_scheme_identifier();
  public:

  // optional string message_identifier = 2;
  bool has_message_identifier() const;
  private:
  bool _internal_has_message_identifier() const;
  public:
  void clear_message_identifier();
  const std::string& message_identifier() const;
  void set_message_identifier(const std::string& value);
  void set_message_identifier(std::string&& value);
  void set_message_identifier(const char* value);
  void set_message_identifier(const char* value, size_t size);
  std::string* mutable_message_identifier();
  std::string* release_message_identifier();
  void set_allocated_message_identifier(std::string* message_identifier);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message_identifier();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_identifier(
      std::string* message_identifier);
  private:
  const std::string& _internal_message_identifier() const;
  void _internal_set_message_identifier(const std::string& value);
  std::string* _internal_mutable_message_identifier();
  public:

  // optional string source = 3;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_source();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_source(
      std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // optional string destination = 4;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destination();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destination(
      std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // optional string date = 5;
  bool has_date() const;
  private:
  bool _internal_has_date() const;
  public:
  void clear_date();
  const std::string& date() const;
  void set_date(const std::string& value);
  void set_date(std::string&& value);
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  std::string* mutable_date();
  std::string* release_date();
  void set_allocated_date(std::string* date);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_date();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_date(
      std::string* date);
  private:
  const std::string& _internal_date() const;
  void _internal_set_date(const std::string& value);
  std::string* _internal_mutable_date();
  public:

  // optional bytes buffer = 6;
  bool has_buffer() const;
  private:
  bool _internal_has_buffer() const;
  public:
  void clear_buffer();
  const std::string& buffer() const;
  void set_buffer(const std::string& value);
  void set_buffer(std::string&& value);
  void set_buffer(const char* value);
  void set_buffer(const void* value, size_t size);
  std::string* mutable_buffer();
  std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_buffer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_buffer(
      std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // @@protoc_insertion_point(class_scope:encrypted_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheme_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class signature_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signature_message) */ {
 public:
  inline signature_message() : signature_message(nullptr) {};
  virtual ~signature_message();

  signature_message(const signature_message& from);
  signature_message(signature_message&& from) noexcept
    : signature_message() {
    *this = ::std::move(from);
  }

  inline signature_message& operator=(const signature_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline signature_message& operator=(signature_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const signature_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const signature_message* internal_default_instance() {
    return reinterpret_cast<const signature_message*>(
               &_signature_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(signature_message& a, signature_message& b) {
    a.Swap(&b);
  }
  inline void Swap(signature_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(signature_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline signature_message* New() const final {
    return CreateMaybeMessage<signature_message>(nullptr);
  }

  signature_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<signature_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const signature_message& from);
  void MergeFrom(const signature_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(signature_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signature_message";
  }
  protected:
  explicit signature_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:signature_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class rsa_public_parameters_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsa_public_parameters_message) */ {
 public:
  inline rsa_public_parameters_message() : rsa_public_parameters_message(nullptr) {};
  virtual ~rsa_public_parameters_message();

  rsa_public_parameters_message(const rsa_public_parameters_message& from);
  rsa_public_parameters_message(rsa_public_parameters_message&& from) noexcept
    : rsa_public_parameters_message() {
    *this = ::std::move(from);
  }

  inline rsa_public_parameters_message& operator=(const rsa_public_parameters_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline rsa_public_parameters_message& operator=(rsa_public_parameters_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rsa_public_parameters_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rsa_public_parameters_message* internal_default_instance() {
    return reinterpret_cast<const rsa_public_parameters_message*>(
               &_rsa_public_parameters_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(rsa_public_parameters_message& a, rsa_public_parameters_message& b) {
    a.Swap(&b);
  }
  inline void Swap(rsa_public_parameters_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rsa_public_parameters_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rsa_public_parameters_message* New() const final {
    return CreateMaybeMessage<rsa_public_parameters_message>(nullptr);
  }

  rsa_public_parameters_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rsa_public_parameters_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rsa_public_parameters_message& from);
  void MergeFrom(const rsa_public_parameters_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rsa_public_parameters_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsa_public_parameters_message";
  }
  protected:
  explicit rsa_public_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModulusFieldNumber = 1,
    kEFieldNumber = 2,
  };
  // optional bytes modulus = 1;
  bool has_modulus() const;
  private:
  bool _internal_has_modulus() const;
  public:
  void clear_modulus();
  const std::string& modulus() const;
  void set_modulus(const std::string& value);
  void set_modulus(std::string&& value);
  void set_modulus(const char* value);
  void set_modulus(const void* value, size_t size);
  std::string* mutable_modulus();
  std::string* release_modulus();
  void set_allocated_modulus(std::string* modulus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_modulus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_modulus(
      std::string* modulus);
  private:
  const std::string& _internal_modulus() const;
  void _internal_set_modulus(const std::string& value);
  std::string* _internal_mutable_modulus();
  public:

  // optional bytes e = 2;
  bool has_e() const;
  private:
  bool _internal_has_e() const;
  public:
  void clear_e();
  const std::string& e() const;
  void set_e(const std::string& value);
  void set_e(std::string&& value);
  void set_e(const char* value);
  void set_e(const void* value, size_t size);
  std::string* mutable_e();
  std::string* release_e();
  void set_allocated_e(std::string* e);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_e();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_e(
      std::string* e);
  private:
  const std::string& _internal_e() const;
  void _internal_set_e(const std::string& value);
  std::string* _internal_mutable_e();
  public:

  // @@protoc_insertion_point(class_scope:rsa_public_parameters_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modulus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class rsa_private_parameters_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rsa_private_parameters_message) */ {
 public:
  inline rsa_private_parameters_message() : rsa_private_parameters_message(nullptr) {};
  virtual ~rsa_private_parameters_message();

  rsa_private_parameters_message(const rsa_private_parameters_message& from);
  rsa_private_parameters_message(rsa_private_parameters_message&& from) noexcept
    : rsa_private_parameters_message() {
    *this = ::std::move(from);
  }

  inline rsa_private_parameters_message& operator=(const rsa_private_parameters_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline rsa_private_parameters_message& operator=(rsa_private_parameters_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const rsa_private_parameters_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const rsa_private_parameters_message* internal_default_instance() {
    return reinterpret_cast<const rsa_private_parameters_message*>(
               &_rsa_private_parameters_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(rsa_private_parameters_message& a, rsa_private_parameters_message& b) {
    a.Swap(&b);
  }
  inline void Swap(rsa_private_parameters_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(rsa_private_parameters_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline rsa_private_parameters_message* New() const final {
    return CreateMaybeMessage<rsa_private_parameters_message>(nullptr);
  }

  rsa_private_parameters_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<rsa_private_parameters_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const rsa_private_parameters_message& from);
  void MergeFrom(const rsa_private_parameters_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(rsa_private_parameters_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rsa_private_parameters_message";
  }
  protected:
  explicit rsa_private_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 1,
    kPFieldNumber = 2,
    kQFieldNumber = 3,
    kDpFieldNumber = 4,
    kDqFieldNumber = 5,
    kMPrimeFieldNumber = 6,
    kPPrimeFieldNumber = 7,
    kQPrimeFieldNumber = 8,
  };
  // optional bytes d = 1;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  const std::string& d() const;
  void set_d(const std::string& value);
  void set_d(std::string&& value);
  void set_d(const char* value);
  void set_d(const void* value, size_t size);
  std::string* mutable_d();
  std::string* release_d();
  void set_allocated_d(std::string* d);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_d();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_d(
      std::string* d);
  private:
  const std::string& _internal_d() const;
  void _internal_set_d(const std::string& value);
  std::string* _internal_mutable_d();
  public:

  // optional bytes p = 2;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const std::string& p() const;
  void set_p(const std::string& value);
  void set_p(std::string&& value);
  void set_p(const char* value);
  void set_p(const void* value, size_t size);
  std::string* mutable_p();
  std::string* release_p();
  void set_allocated_p(std::string* p);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_p();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p(
      std::string* p);
  private:
  const std::string& _internal_p() const;
  void _internal_set_p(const std::string& value);
  std::string* _internal_mutable_p();
  public:

  // optional bytes q = 3;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const std::string& q() const;
  void set_q(const std::string& value);
  void set_q(std::string&& value);
  void set_q(const char* value);
  void set_q(const void* value, size_t size);
  std::string* mutable_q();
  std::string* release_q();
  void set_allocated_q(std::string* q);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_q();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_q(
      std::string* q);
  private:
  const std::string& _internal_q() const;
  void _internal_set_q(const std::string& value);
  std::string* _internal_mutable_q();
  public:

  // optional bytes dp = 4;
  bool has_dp() const;
  private:
  bool _internal_has_dp() const;
  public:
  void clear_dp();
  const std::string& dp() const;
  void set_dp(const std::string& value);
  void set_dp(std::string&& value);
  void set_dp(const char* value);
  void set_dp(const void* value, size_t size);
  std::string* mutable_dp();
  std::string* release_dp();
  void set_allocated_dp(std::string* dp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dp(
      std::string* dp);
  private:
  const std::string& _internal_dp() const;
  void _internal_set_dp(const std::string& value);
  std::string* _internal_mutable_dp();
  public:

  // optional bytes dq = 5;
  bool has_dq() const;
  private:
  bool _internal_has_dq() const;
  public:
  void clear_dq();
  const std::string& dq() const;
  void set_dq(const std::string& value);
  void set_dq(std::string&& value);
  void set_dq(const char* value);
  void set_dq(const void* value, size_t size);
  std::string* mutable_dq();
  std::string* release_dq();
  void set_allocated_dq(std::string* dq);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dq();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dq(
      std::string* dq);
  private:
  const std::string& _internal_dq() const;
  void _internal_set_dq(const std::string& value);
  std::string* _internal_mutable_dq();
  public:

  // optional bytes m_prime = 6;
  bool has_m_prime() const;
  private:
  bool _internal_has_m_prime() const;
  public:
  void clear_m_prime();
  const std::string& m_prime() const;
  void set_m_prime(const std::string& value);
  void set_m_prime(std::string&& value);
  void set_m_prime(const char* value);
  void set_m_prime(const void* value, size_t size);
  std::string* mutable_m_prime();
  std::string* release_m_prime();
  void set_allocated_m_prime(std::string* m_prime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_m_prime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_m_prime(
      std::string* m_prime);
  private:
  const std::string& _internal_m_prime() const;
  void _internal_set_m_prime(const std::string& value);
  std::string* _internal_mutable_m_prime();
  public:

  // optional bytes p_prime = 7;
  bool has_p_prime() const;
  private:
  bool _internal_has_p_prime() const;
  public:
  void clear_p_prime();
  const std::string& p_prime() const;
  void set_p_prime(const std::string& value);
  void set_p_prime(std::string&& value);
  void set_p_prime(const char* value);
  void set_p_prime(const void* value, size_t size);
  std::string* mutable_p_prime();
  std::string* release_p_prime();
  void set_allocated_p_prime(std::string* p_prime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_p_prime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p_prime(
      std::string* p_prime);
  private:
  const std::string& _internal_p_prime() const;
  void _internal_set_p_prime(const std::string& value);
  std::string* _internal_mutable_p_prime();
  public:

  // optional bytes q_prime = 8;
  bool has_q_prime() const;
  private:
  bool _internal_has_q_prime() const;
  public:
  void clear_q_prime();
  const std::string& q_prime() const;
  void set_q_prime(const std::string& value);
  void set_q_prime(std::string&& value);
  void set_q_prime(const char* value);
  void set_q_prime(const void* value, size_t size);
  std::string* mutable_q_prime();
  std::string* release_q_prime();
  void set_allocated_q_prime(std::string* q_prime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_q_prime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_q_prime(
      std::string* q_prime);
  private:
  const std::string& _internal_q_prime() const;
  void _internal_set_q_prime(const std::string& value);
  std::string* _internal_mutable_q_prime();
  public:

  // @@protoc_insertion_point(class_scope:rsa_private_parameters_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr d_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr q_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dp_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_prime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_prime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr q_prime_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class point_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:point_message) */ {
 public:
  inline point_message() : point_message(nullptr) {};
  virtual ~point_message();

  point_message(const point_message& from);
  point_message(point_message&& from) noexcept
    : point_message() {
    *this = ::std::move(from);
  }

  inline point_message& operator=(const point_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline point_message& operator=(point_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const point_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const point_message* internal_default_instance() {
    return reinterpret_cast<const point_message*>(
               &_point_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(point_message& a, point_message& b) {
    a.Swap(&b);
  }
  inline void Swap(point_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(point_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline point_message* New() const final {
    return CreateMaybeMessage<point_message>(nullptr);
  }

  point_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<point_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const point_message& from);
  void MergeFrom(const point_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(point_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "point_message";
  }
  protected:
  explicit point_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional bytes x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const std::string& x() const;
  void set_x(const std::string& value);
  void set_x(std::string&& value);
  void set_x(const char* value);
  void set_x(const void* value, size_t size);
  std::string* mutable_x();
  std::string* release_x();
  void set_allocated_x(std::string* x);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_x();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_x(
      std::string* x);
  private:
  const std::string& _internal_x() const;
  void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // optional bytes y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const std::string& y() const;
  void set_y(const std::string& value);
  void set_y(std::string&& value);
  void set_y(const char* value);
  void set_y(const void* value, size_t size);
  std::string* mutable_y();
  std::string* release_y();
  void set_allocated_y(std::string* y);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_y();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_y(
      std::string* y);
  private:
  const std::string& _internal_y() const;
  void _internal_set_y(const std::string& value);
  std::string* _internal_mutable_y();
  public:

  // @@protoc_insertion_point(class_scope:point_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class ecc_public_parameters_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecc_public_parameters_message) */ {
 public:
  inline ecc_public_parameters_message() : ecc_public_parameters_message(nullptr) {};
  virtual ~ecc_public_parameters_message();

  ecc_public_parameters_message(const ecc_public_parameters_message& from);
  ecc_public_parameters_message(ecc_public_parameters_message&& from) noexcept
    : ecc_public_parameters_message() {
    *this = ::std::move(from);
  }

  inline ecc_public_parameters_message& operator=(const ecc_public_parameters_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ecc_public_parameters_message& operator=(ecc_public_parameters_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ecc_public_parameters_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ecc_public_parameters_message* internal_default_instance() {
    return reinterpret_cast<const ecc_public_parameters_message*>(
               &_ecc_public_parameters_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ecc_public_parameters_message& a, ecc_public_parameters_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ecc_public_parameters_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ecc_public_parameters_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ecc_public_parameters_message* New() const final {
    return CreateMaybeMessage<ecc_public_parameters_message>(nullptr);
  }

  ecc_public_parameters_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ecc_public_parameters_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ecc_public_parameters_message& from);
  void MergeFrom(const ecc_public_parameters_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ecc_public_parameters_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecc_public_parameters_message";
  }
  protected:
  explicit ecc_public_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurveNameFieldNumber = 1,
    kPFieldNumber = 2,
    kPublicPointFieldNumber = 3,
  };
  // optional string curve_name = 1;
  bool has_curve_name() const;
  private:
  bool _internal_has_curve_name() const;
  public:
  void clear_curve_name();
  const std::string& curve_name() const;
  void set_curve_name(const std::string& value);
  void set_curve_name(std::string&& value);
  void set_curve_name(const char* value);
  void set_curve_name(const char* value, size_t size);
  std::string* mutable_curve_name();
  std::string* release_curve_name();
  void set_allocated_curve_name(std::string* curve_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_curve_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_curve_name(
      std::string* curve_name);
  private:
  const std::string& _internal_curve_name() const;
  void _internal_set_curve_name(const std::string& value);
  std::string* _internal_mutable_curve_name();
  public:

  // optional bytes p = 2;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const std::string& p() const;
  void set_p(const std::string& value);
  void set_p(std::string&& value);
  void set_p(const char* value);
  void set_p(const void* value, size_t size);
  std::string* mutable_p();
  std::string* release_p();
  void set_allocated_p(std::string* p);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_p();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_p(
      std::string* p);
  private:
  const std::string& _internal_p() const;
  void _internal_set_p(const std::string& value);
  std::string* _internal_mutable_p();
  public:

  // optional .point_message public_point = 3;
  bool has_public_point() const;
  private:
  bool _internal_has_public_point() const;
  public:
  void clear_public_point();
  const ::point_message& public_point() const;
  ::point_message* release_public_point();
  ::point_message* mutable_public_point();
  void set_allocated_public_point(::point_message* public_point);
  private:
  const ::point_message& _internal_public_point() const;
  ::point_message* _internal_mutable_public_point();
  public:
  void unsafe_arena_set_allocated_public_point(
      ::point_message* public_point);
  ::point_message* unsafe_arena_release_public_point();

  // @@protoc_insertion_point(class_scope:ecc_public_parameters_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr curve_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p_;
  ::point_message* public_point_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class ecc_private_parameters_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ecc_private_parameters_message) */ {
 public:
  inline ecc_private_parameters_message() : ecc_private_parameters_message(nullptr) {};
  virtual ~ecc_private_parameters_message();

  ecc_private_parameters_message(const ecc_private_parameters_message& from);
  ecc_private_parameters_message(ecc_private_parameters_message&& from) noexcept
    : ecc_private_parameters_message() {
    *this = ::std::move(from);
  }

  inline ecc_private_parameters_message& operator=(const ecc_private_parameters_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline ecc_private_parameters_message& operator=(ecc_private_parameters_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ecc_private_parameters_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ecc_private_parameters_message* internal_default_instance() {
    return reinterpret_cast<const ecc_private_parameters_message*>(
               &_ecc_private_parameters_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ecc_private_parameters_message& a, ecc_private_parameters_message& b) {
    a.Swap(&b);
  }
  inline void Swap(ecc_private_parameters_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ecc_private_parameters_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ecc_private_parameters_message* New() const final {
    return CreateMaybeMessage<ecc_private_parameters_message>(nullptr);
  }

  ecc_private_parameters_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ecc_private_parameters_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ecc_private_parameters_message& from);
  void MergeFrom(const ecc_private_parameters_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ecc_private_parameters_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ecc_private_parameters_message";
  }
  protected:
  explicit ecc_private_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateMultiplierFieldNumber = 2,
    kPrivatePointFieldNumber = 1,
  };
  // optional bytes private_multiplier = 2;
  bool has_private_multiplier() const;
  private:
  bool _internal_has_private_multiplier() const;
  public:
  void clear_private_multiplier();
  const std::string& private_multiplier() const;
  void set_private_multiplier(const std::string& value);
  void set_private_multiplier(std::string&& value);
  void set_private_multiplier(const char* value);
  void set_private_multiplier(const void* value, size_t size);
  std::string* mutable_private_multiplier();
  std::string* release_private_multiplier();
  void set_allocated_private_multiplier(std::string* private_multiplier);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_private_multiplier();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_private_multiplier(
      std::string* private_multiplier);
  private:
  const std::string& _internal_private_multiplier() const;
  void _internal_set_private_multiplier(const std::string& value);
  std::string* _internal_mutable_private_multiplier();
  public:

  // optional .point_message private_point = 1;
  bool has_private_point() const;
  private:
  bool _internal_has_private_point() const;
  public:
  void clear_private_point();
  const ::point_message& private_point() const;
  ::point_message* release_private_point();
  ::point_message* mutable_private_point();
  void set_allocated_private_point(::point_message* private_point);
  private:
  const ::point_message& _internal_private_point() const;
  ::point_message* _internal_mutable_private_point();
  public:
  void unsafe_arena_set_allocated_private_point(
      ::point_message* private_point);
  ::point_message* unsafe_arena_release_private_point();

  // @@protoc_insertion_point(class_scope:ecc_private_parameters_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_multiplier_;
  ::point_message* private_point_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class hmac_parameters_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hmac_parameters_message) */ {
 public:
  inline hmac_parameters_message() : hmac_parameters_message(nullptr) {};
  virtual ~hmac_parameters_message();

  hmac_parameters_message(const hmac_parameters_message& from);
  hmac_parameters_message(hmac_parameters_message&& from) noexcept
    : hmac_parameters_message() {
    *this = ::std::move(from);
  }

  inline hmac_parameters_message& operator=(const hmac_parameters_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline hmac_parameters_message& operator=(hmac_parameters_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const hmac_parameters_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hmac_parameters_message* internal_default_instance() {
    return reinterpret_cast<const hmac_parameters_message*>(
               &_hmac_parameters_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(hmac_parameters_message& a, hmac_parameters_message& b) {
    a.Swap(&b);
  }
  inline void Swap(hmac_parameters_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(hmac_parameters_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline hmac_parameters_message* New() const final {
    return CreateMaybeMessage<hmac_parameters_message>(nullptr);
  }

  hmac_parameters_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<hmac_parameters_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const hmac_parameters_message& from);
  void MergeFrom(const hmac_parameters_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hmac_parameters_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hmac_parameters_message";
  }
  protected:
  explicit hmac_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmFieldNumber = 1,
    kSecretFieldNumber = 3,
    kSizeFieldNumber = 2,
  };
  // optional string algorithm = 1;
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  const std::string& algorithm() const;
  void set_algorithm(const std::string& value);
  void set_algorithm(std::string&& value);
  void set_algorithm(const char* value);
  void set_algorithm(const char* value, size_t size);
  std::string* mutable_algorithm();
  std::string* release_algorithm();
  void set_allocated_algorithm(std::string* algorithm);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm(
      std::string* algorithm);
  private:
  const std::string& _internal_algorithm() const;
  void _internal_set_algorithm(const std::string& value);
  std::string* _internal_mutable_algorithm();
  public:

  // optional bytes secret = 3;
  bool has_secret() const;
  private:
  bool _internal_has_secret() const;
  public:
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const void* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_secret();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_secret(
      std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // optional int32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hmac_parameters_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class key_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:key_message) */ {
 public:
  inline key_message() : key_message(nullptr) {};
  virtual ~key_message();

  key_message(const key_message& from);
  key_message(key_message&& from) noexcept
    : key_message() {
    *this = ::std::move(from);
  }

  inline key_message& operator=(const key_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline key_message& operator=(key_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const key_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const key_message* internal_default_instance() {
    return reinterpret_cast<const key_message*>(
               &_key_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(key_message& a, key_message& b) {
    a.Swap(&b);
  }
  inline void Swap(key_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(key_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline key_message* New() const final {
    return CreateMaybeMessage<key_message>(nullptr);
  }

  key_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<key_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const key_message& from);
  void MergeFrom(const key_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(key_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "key_message";
  }
  protected:
  explicit key_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyTypeFieldNumber = 1,
    kAlgorithmTypeFieldNumber = 2,
    kKeyNameFieldNumber = 3,
    kPurposeFieldNumber = 5,
    kNotBeforeFieldNumber = 6,
    kNotAfterFieldNumber = 7,
    kSecretFieldNumber = 8,
    kRsaPubFieldNumber = 9,
    kRsaPrivFieldNumber = 10,
    kEccPubFieldNumber = 11,
    kEccPrivFieldNumber = 12,
    kKeySizeFieldNumber = 4,
  };
  // optional string family_type = 1;
  bool has_family_type() const;
  private:
  bool _internal_has_family_type() const;
  public:
  void clear_family_type();
  const std::string& family_type() const;
  void set_family_type(const std::string& value);
  void set_family_type(std::string&& value);
  void set_family_type(const char* value);
  void set_family_type(const char* value, size_t size);
  std::string* mutable_family_type();
  std::string* release_family_type();
  void set_allocated_family_type(std::string* family_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_family_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_family_type(
      std::string* family_type);
  private:
  const std::string& _internal_family_type() const;
  void _internal_set_family_type(const std::string& value);
  std::string* _internal_mutable_family_type();
  public:

  // optional string algorithm_type = 2;
  bool has_algorithm_type() const;
  private:
  bool _internal_has_algorithm_type() const;
  public:
  void clear_algorithm_type();
  const std::string& algorithm_type() const;
  void set_algorithm_type(const std::string& value);
  void set_algorithm_type(std::string&& value);
  void set_algorithm_type(const char* value);
  void set_algorithm_type(const char* value, size_t size);
  std::string* mutable_algorithm_type();
  std::string* release_algorithm_type();
  void set_allocated_algorithm_type(std::string* algorithm_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm_type(
      std::string* algorithm_type);
  private:
  const std::string& _internal_algorithm_type() const;
  void _internal_set_algorithm_type(const std::string& value);
  std::string* _internal_mutable_algorithm_type();
  public:

  // optional string key_name = 3;
  bool has_key_name() const;
  private:
  bool _internal_has_key_name() const;
  public:
  void clear_key_name();
  const std::string& key_name() const;
  void set_key_name(const std::string& value);
  void set_key_name(std::string&& value);
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  std::string* mutable_key_name();
  std::string* release_key_name();
  void set_allocated_key_name(std::string* key_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key_name(
      std::string* key_name);
  private:
  const std::string& _internal_key_name() const;
  void _internal_set_key_name(const std::string& value);
  std::string* _internal_mutable_key_name();
  public:

  // optional string purpose = 5;
  bool has_purpose() const;
  private:
  bool _internal_has_purpose() const;
  public:
  void clear_purpose();
  const std::string& purpose() const;
  void set_purpose(const std::string& value);
  void set_purpose(std::string&& value);
  void set_purpose(const char* value);
  void set_purpose(const char* value, size_t size);
  std::string* mutable_purpose();
  std::string* release_purpose();
  void set_allocated_purpose(std::string* purpose);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_purpose();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_purpose(
      std::string* purpose);
  private:
  const std::string& _internal_purpose() const;
  void _internal_set_purpose(const std::string& value);
  std::string* _internal_mutable_purpose();
  public:

  // optional string notBefore = 6;
  bool has_notbefore() const;
  private:
  bool _internal_has_notbefore() const;
  public:
  void clear_notbefore();
  const std::string& notbefore() const;
  void set_notbefore(const std::string& value);
  void set_notbefore(std::string&& value);
  void set_notbefore(const char* value);
  void set_notbefore(const char* value, size_t size);
  std::string* mutable_notbefore();
  std::string* release_notbefore();
  void set_allocated_notbefore(std::string* notbefore);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_notbefore();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_notbefore(
      std::string* notbefore);
  private:
  const std::string& _internal_notbefore() const;
  void _internal_set_notbefore(const std::string& value);
  std::string* _internal_mutable_notbefore();
  public:

  // optional string notAfter = 7;
  bool has_notafter() const;
  private:
  bool _internal_has_notafter() const;
  public:
  void clear_notafter();
  const std::string& notafter() const;
  void set_notafter(const std::string& value);
  void set_notafter(std::string&& value);
  void set_notafter(const char* value);
  void set_notafter(const char* value, size_t size);
  std::string* mutable_notafter();
  std::string* release_notafter();
  void set_allocated_notafter(std::string* notafter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_notafter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_notafter(
      std::string* notafter);
  private:
  const std::string& _internal_notafter() const;
  void _internal_set_notafter(const std::string& value);
  std::string* _internal_mutable_notafter();
  public:

  // optional bytes secret = 8;
  bool has_secret() const;
  private:
  bool _internal_has_secret() const;
  public:
  void clear_secret();
  const std::string& secret() const;
  void set_secret(const std::string& value);
  void set_secret(std::string&& value);
  void set_secret(const char* value);
  void set_secret(const void* value, size_t size);
  std::string* mutable_secret();
  std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_secret();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_secret(
      std::string* secret);
  private:
  const std::string& _internal_secret() const;
  void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // optional .rsa_public_parameters_message rsa_pub = 9;
  bool has_rsa_pub() const;
  private:
  bool _internal_has_rsa_pub() const;
  public:
  void clear_rsa_pub();
  const ::rsa_public_parameters_message& rsa_pub() const;
  ::rsa_public_parameters_message* release_rsa_pub();
  ::rsa_public_parameters_message* mutable_rsa_pub();
  void set_allocated_rsa_pub(::rsa_public_parameters_message* rsa_pub);
  private:
  const ::rsa_public_parameters_message& _internal_rsa_pub() const;
  ::rsa_public_parameters_message* _internal_mutable_rsa_pub();
  public:
  void unsafe_arena_set_allocated_rsa_pub(
      ::rsa_public_parameters_message* rsa_pub);
  ::rsa_public_parameters_message* unsafe_arena_release_rsa_pub();

  // optional .rsa_private_parameters_message rsa_priv = 10;
  bool has_rsa_priv() const;
  private:
  bool _internal_has_rsa_priv() const;
  public:
  void clear_rsa_priv();
  const ::rsa_private_parameters_message& rsa_priv() const;
  ::rsa_private_parameters_message* release_rsa_priv();
  ::rsa_private_parameters_message* mutable_rsa_priv();
  void set_allocated_rsa_priv(::rsa_private_parameters_message* rsa_priv);
  private:
  const ::rsa_private_parameters_message& _internal_rsa_priv() const;
  ::rsa_private_parameters_message* _internal_mutable_rsa_priv();
  public:
  void unsafe_arena_set_allocated_rsa_priv(
      ::rsa_private_parameters_message* rsa_priv);
  ::rsa_private_parameters_message* unsafe_arena_release_rsa_priv();

  // optional .ecc_public_parameters_message ecc_pub = 11;
  bool has_ecc_pub() const;
  private:
  bool _internal_has_ecc_pub() const;
  public:
  void clear_ecc_pub();
  const ::ecc_public_parameters_message& ecc_pub() const;
  ::ecc_public_parameters_message* release_ecc_pub();
  ::ecc_public_parameters_message* mutable_ecc_pub();
  void set_allocated_ecc_pub(::ecc_public_parameters_message* ecc_pub);
  private:
  const ::ecc_public_parameters_message& _internal_ecc_pub() const;
  ::ecc_public_parameters_message* _internal_mutable_ecc_pub();
  public:
  void unsafe_arena_set_allocated_ecc_pub(
      ::ecc_public_parameters_message* ecc_pub);
  ::ecc_public_parameters_message* unsafe_arena_release_ecc_pub();

  // optional .ecc_private_parameters_message ecc_priv = 12;
  bool has_ecc_priv() const;
  private:
  bool _internal_has_ecc_priv() const;
  public:
  void clear_ecc_priv();
  const ::ecc_private_parameters_message& ecc_priv() const;
  ::ecc_private_parameters_message* release_ecc_priv();
  ::ecc_private_parameters_message* mutable_ecc_priv();
  void set_allocated_ecc_priv(::ecc_private_parameters_message* ecc_priv);
  private:
  const ::ecc_private_parameters_message& _internal_ecc_priv() const;
  ::ecc_private_parameters_message* _internal_mutable_ecc_priv();
  public:
  void unsafe_arena_set_allocated_ecc_priv(
      ::ecc_private_parameters_message* ecc_priv);
  ::ecc_private_parameters_message* unsafe_arena_release_ecc_priv();

  // optional int32 key_size = 4;
  bool has_key_size() const;
  private:
  bool _internal_has_key_size() const;
  public:
  void clear_key_size();
  ::PROTOBUF_NAMESPACE_ID::int32 key_size() const;
  void set_key_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_size() const;
  void _internal_set_key_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:key_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purpose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notbefore_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notafter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::rsa_public_parameters_message* rsa_pub_;
  ::rsa_private_parameters_message* rsa_priv_;
  ::ecc_public_parameters_message* ecc_pub_;
  ::ecc_private_parameters_message* ecc_priv_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_size_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class scheme_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:scheme_message) */ {
 public:
  inline scheme_message() : scheme_message(nullptr) {};
  virtual ~scheme_message();

  scheme_message(const scheme_message& from);
  scheme_message(scheme_message&& from) noexcept
    : scheme_message() {
    *this = ::std::move(from);
  }

  inline scheme_message& operator=(const scheme_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline scheme_message& operator=(scheme_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const scheme_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const scheme_message* internal_default_instance() {
    return reinterpret_cast<const scheme_message*>(
               &_scheme_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(scheme_message& a, scheme_message& b) {
    a.Swap(&b);
  }
  inline void Swap(scheme_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(scheme_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline scheme_message* New() const final {
    return CreateMaybeMessage<scheme_message>(nullptr);
  }

  scheme_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<scheme_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const scheme_message& from);
  void MergeFrom(const scheme_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(scheme_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "scheme_message";
  }
  protected:
  explicit scheme_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemeTypeFieldNumber = 1,
    kSchemeInstanceIdentifierFieldNumber = 2,
    kPublicNonceFieldNumber = 5,
    kEncryptionKeyFieldNumber = 3,
    kParametersFieldNumber = 4,
  };
  // optional string scheme_type = 1;
  bool has_scheme_type() const;
  private:
  bool _internal_has_scheme_type() const;
  public:
  void clear_scheme_type();
  const std::string& scheme_type() const;
  void set_scheme_type(const std::string& value);
  void set_scheme_type(std::string&& value);
  void set_scheme_type(const char* value);
  void set_scheme_type(const char* value, size_t size);
  std::string* mutable_scheme_type();
  std::string* release_scheme_type();
  void set_allocated_scheme_type(std::string* scheme_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scheme_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scheme_type(
      std::string* scheme_type);
  private:
  const std::string& _internal_scheme_type() const;
  void _internal_set_scheme_type(const std::string& value);
  std::string* _internal_mutable_scheme_type();
  public:

  // optional string scheme_instance_identifier = 2;
  bool has_scheme_instance_identifier() const;
  private:
  bool _internal_has_scheme_instance_identifier() const;
  public:
  void clear_scheme_instance_identifier();
  const std::string& scheme_instance_identifier() const;
  void set_scheme_instance_identifier(const std::string& value);
  void set_scheme_instance_identifier(std::string&& value);
  void set_scheme_instance_identifier(const char* value);
  void set_scheme_instance_identifier(const char* value, size_t size);
  std::string* mutable_scheme_instance_identifier();
  std::string* release_scheme_instance_identifier();
  void set_allocated_scheme_instance_identifier(std::string* scheme_instance_identifier);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_scheme_instance_identifier();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_scheme_instance_identifier(
      std::string* scheme_instance_identifier);
  private:
  const std::string& _internal_scheme_instance_identifier() const;
  void _internal_set_scheme_instance_identifier(const std::string& value);
  std::string* _internal_mutable_scheme_instance_identifier();
  public:

  // optional bytes public_nonce = 5;
  bool has_public_nonce() const;
  private:
  bool _internal_has_public_nonce() const;
  public:
  void clear_public_nonce();
  const std::string& public_nonce() const;
  void set_public_nonce(const std::string& value);
  void set_public_nonce(std::string&& value);
  void set_public_nonce(const char* value);
  void set_public_nonce(const void* value, size_t size);
  std::string* mutable_public_nonce();
  std::string* release_public_nonce();
  void set_allocated_public_nonce(std::string* public_nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_public_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_public_nonce(
      std::string* public_nonce);
  private:
  const std::string& _internal_public_nonce() const;
  void _internal_set_public_nonce(const std::string& value);
  std::string* _internal_mutable_public_nonce();
  public:

  // optional .key_message encryption_key = 3;
  bool has_encryption_key() const;
  private:
  bool _internal_has_encryption_key() const;
  public:
  void clear_encryption_key();
  const ::key_message& encryption_key() const;
  ::key_message* release_encryption_key();
  ::key_message* mutable_encryption_key();
  void set_allocated_encryption_key(::key_message* encryption_key);
  private:
  const ::key_message& _internal_encryption_key() const;
  ::key_message* _internal_mutable_encryption_key();
  public:
  void unsafe_arena_set_allocated_encryption_key(
      ::key_message* encryption_key);
  ::key_message* unsafe_arena_release_encryption_key();

  // optional .hmac_parameters_message parameters = 4;
  bool has_parameters() const;
  private:
  bool _internal_has_parameters() const;
  public:
  void clear_parameters();
  const ::hmac_parameters_message& parameters() const;
  ::hmac_parameters_message* release_parameters();
  ::hmac_parameters_message* mutable_parameters();
  void set_allocated_parameters(::hmac_parameters_message* parameters);
  private:
  const ::hmac_parameters_message& _internal_parameters() const;
  ::hmac_parameters_message* _internal_mutable_parameters();
  public:
  void unsafe_arena_set_allocated_parameters(
      ::hmac_parameters_message* parameters);
  ::hmac_parameters_message* unsafe_arena_release_parameters();

  // @@protoc_insertion_point(class_scope:scheme_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheme_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheme_instance_identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_nonce_;
  ::key_message* encryption_key_;
  ::hmac_parameters_message* parameters_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class crypto_signature_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:crypto_signature_message) */ {
 public:
  inline crypto_signature_message() : crypto_signature_message(nullptr) {};
  virtual ~crypto_signature_message();

  crypto_signature_message(const crypto_signature_message& from);
  crypto_signature_message(crypto_signature_message&& from) noexcept
    : crypto_signature_message() {
    *this = ::std::move(from);
  }

  inline crypto_signature_message& operator=(const crypto_signature_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline crypto_signature_message& operator=(crypto_signature_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const crypto_signature_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const crypto_signature_message* internal_default_instance() {
    return reinterpret_cast<const crypto_signature_message*>(
               &_crypto_signature_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(crypto_signature_message& a, crypto_signature_message& b) {
    a.Swap(&b);
  }
  inline void Swap(crypto_signature_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(crypto_signature_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline crypto_signature_message* New() const final {
    return CreateMaybeMessage<crypto_signature_message>(nullptr);
  }

  crypto_signature_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<crypto_signature_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const crypto_signature_message& from);
  void MergeFrom(const crypto_signature_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(crypto_signature_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "crypto_signature_message";
  }
  protected:
  explicit crypto_signature_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncryptionAlgorithmNameFieldNumber = 1,
    kSerializedStatementFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kSignerNameFieldNumber = 4,
  };
  // required string encryption_algorithm_name = 1;
  bool has_encryption_algorithm_name() const;
  private:
  bool _internal_has_encryption_algorithm_name() const;
  public:
  void clear_encryption_algorithm_name();
  const std::string& encryption_algorithm_name() const;
  void set_encryption_algorithm_name(const std::string& value);
  void set_encryption_algorithm_name(std::string&& value);
  void set_encryption_algorithm_name(const char* value);
  void set_encryption_algorithm_name(const char* value, size_t size);
  std::string* mutable_encryption_algorithm_name();
  std::string* release_encryption_algorithm_name();
  void set_allocated_encryption_algorithm_name(std::string* encryption_algorithm_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encryption_algorithm_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encryption_algorithm_name(
      std::string* encryption_algorithm_name);
  private:
  const std::string& _internal_encryption_algorithm_name() const;
  void _internal_set_encryption_algorithm_name(const std::string& value);
  std::string* _internal_mutable_encryption_algorithm_name();
  public:

  // required string serialized_statement = 2;
  bool has_serialized_statement() const;
  private:
  bool _internal_has_serialized_statement() const;
  public:
  void clear_serialized_statement();
  const std::string& serialized_statement() const;
  void set_serialized_statement(const std::string& value);
  void set_serialized_statement(std::string&& value);
  void set_serialized_statement(const char* value);
  void set_serialized_statement(const char* value, size_t size);
  std::string* mutable_serialized_statement();
  std::string* release_serialized_statement();
  void set_allocated_serialized_statement(std::string* serialized_statement);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_serialized_statement();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_serialized_statement(
      std::string* serialized_statement);
  private:
  const std::string& _internal_serialized_statement() const;
  void _internal_set_serialized_statement(const std::string& value);
  std::string* _internal_mutable_serialized_statement();
  public:

  // optional string signature = 3;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional string signer_name = 4;
  bool has_signer_name() const;
  private:
  bool _internal_has_signer_name() const;
  public:
  void clear_signer_name();
  const std::string& signer_name() const;
  void set_signer_name(const std::string& value);
  void set_signer_name(std::string&& value);
  void set_signer_name(const char* value);
  void set_signer_name(const char* value, size_t size);
  std::string* mutable_signer_name();
  std::string* release_signer_name();
  void set_allocated_signer_name(std::string* signer_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signer_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signer_name(
      std::string* signer_name);
  private:
  const std::string& _internal_signer_name() const;
  void _internal_set_signer_name(const std::string& value);
  std::string* _internal_mutable_signer_name();
  public:

  // @@protoc_insertion_point(class_scope:crypto_signature_message)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encryption_algorithm_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_statement_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signer_name_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class cert_name_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cert_name_message) */ {
 public:
  inline cert_name_message() : cert_name_message(nullptr) {};
  virtual ~cert_name_message();

  cert_name_message(const cert_name_message& from);
  cert_name_message(cert_name_message&& from) noexcept
    : cert_name_message() {
    *this = ::std::move(from);
  }

  inline cert_name_message& operator=(const cert_name_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline cert_name_message& operator=(cert_name_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cert_name_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cert_name_message* internal_default_instance() {
    return reinterpret_cast<const cert_name_message*>(
               &_cert_name_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(cert_name_message& a, cert_name_message& b) {
    a.Swap(&b);
  }
  inline void Swap(cert_name_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cert_name_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cert_name_message* New() const final {
    return CreateMaybeMessage<cert_name_message>(nullptr);
  }

  cert_name_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cert_name_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cert_name_message& from);
  void MergeFrom(const cert_name_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cert_name_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cert_name_message";
  }
  protected:
  explicit cert_name_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameTypeFieldNumber = 1,
    kNameValueFieldNumber = 2,
  };
  // optional string name_type = 1;
  bool has_name_type() const;
  private:
  bool _internal_has_name_type() const;
  public:
  void clear_name_type();
  const std::string& name_type() const;
  void set_name_type(const std::string& value);
  void set_name_type(std::string&& value);
  void set_name_type(const char* value);
  void set_name_type(const char* value, size_t size);
  std::string* mutable_name_type();
  std::string* release_name_type();
  void set_allocated_name_type(std::string* name_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_type(
      std::string* name_type);
  private:
  const std::string& _internal_name_type() const;
  void _internal_set_name_type(const std::string& value);
  std::string* _internal_mutable_name_type();
  public:

  // optional string name_value = 2;
  bool has_name_value() const;
  private:
  bool _internal_has_name_value() const;
  public:
  void clear_name_value();
  const std::string& name_value() const;
  void set_name_value(const std::string& value);
  void set_name_value(std::string&& value);
  void set_name_value(const char* value);
  void set_name_value(const char* value, size_t size);
  std::string* mutable_name_value();
  std::string* release_name_value();
  void set_allocated_name_value(std::string* name_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_value(
      std::string* name_value);
  private:
  const std::string& _internal_name_value() const;
  void _internal_set_name_value(const std::string& value);
  std::string* _internal_mutable_name_value();
  public:

  // @@protoc_insertion_point(class_scope:cert_name_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_value_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class cert_principal_name_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cert_principal_name_message) */ {
 public:
  inline cert_principal_name_message() : cert_principal_name_message(nullptr) {};
  virtual ~cert_principal_name_message();

  cert_principal_name_message(const cert_principal_name_message& from);
  cert_principal_name_message(cert_principal_name_message&& from) noexcept
    : cert_principal_name_message() {
    *this = ::std::move(from);
  }

  inline cert_principal_name_message& operator=(const cert_principal_name_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline cert_principal_name_message& operator=(cert_principal_name_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cert_principal_name_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cert_principal_name_message* internal_default_instance() {
    return reinterpret_cast<const cert_principal_name_message*>(
               &_cert_principal_name_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(cert_principal_name_message& a, cert_principal_name_message& b) {
    a.Swap(&b);
  }
  inline void Swap(cert_principal_name_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cert_principal_name_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cert_principal_name_message* New() const final {
    return CreateMaybeMessage<cert_principal_name_message>(nullptr);
  }

  cert_principal_name_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cert_principal_name_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cert_principal_name_message& from);
  void MergeFrom(const cert_principal_name_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cert_principal_name_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cert_principal_name_message";
  }
  protected:
  explicit cert_principal_name_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated .cert_name_message names = 1;
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  ::cert_name_message* mutable_names(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >*
      mutable_names();
  private:
  const ::cert_name_message& _internal_names(int index) const;
  ::cert_name_message* _internal_add_names();
  public:
  const ::cert_name_message& names(int index) const;
  ::cert_name_message* add_names();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >&
      names() const;

  // @@protoc_insertion_point(class_scope:cert_principal_name_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message > names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class cert_rsa_parameters_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cert_rsa_parameters_message) */ {
 public:
  inline cert_rsa_parameters_message() : cert_rsa_parameters_message(nullptr) {};
  virtual ~cert_rsa_parameters_message();

  cert_rsa_parameters_message(const cert_rsa_parameters_message& from);
  cert_rsa_parameters_message(cert_rsa_parameters_message&& from) noexcept
    : cert_rsa_parameters_message() {
    *this = ::std::move(from);
  }

  inline cert_rsa_parameters_message& operator=(const cert_rsa_parameters_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline cert_rsa_parameters_message& operator=(cert_rsa_parameters_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cert_rsa_parameters_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cert_rsa_parameters_message* internal_default_instance() {
    return reinterpret_cast<const cert_rsa_parameters_message*>(
               &_cert_rsa_parameters_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(cert_rsa_parameters_message& a, cert_rsa_parameters_message& b) {
    a.Swap(&b);
  }
  inline void Swap(cert_rsa_parameters_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cert_rsa_parameters_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cert_rsa_parameters_message* New() const final {
    return CreateMaybeMessage<cert_rsa_parameters_message>(nullptr);
  }

  cert_rsa_parameters_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cert_rsa_parameters_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cert_rsa_parameters_message& from);
  void MergeFrom(const cert_rsa_parameters_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cert_rsa_parameters_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cert_rsa_parameters_message";
  }
  protected:
  explicit cert_rsa_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExponentFieldNumber = 3,
    kModulusFieldNumber = 4,
    kModulusSizeFieldNumber = 1,
    kExponentSizeFieldNumber = 2,
  };
  // optional bytes exponent = 3;
  bool has_exponent() const;
  private:
  bool _internal_has_exponent() const;
  public:
  void clear_exponent();
  const std::string& exponent() const;
  void set_exponent(const std::string& value);
  void set_exponent(std::string&& value);
  void set_exponent(const char* value);
  void set_exponent(const void* value, size_t size);
  std::string* mutable_exponent();
  std::string* release_exponent();
  void set_allocated_exponent(std::string* exponent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_exponent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_exponent(
      std::string* exponent);
  private:
  const std::string& _internal_exponent() const;
  void _internal_set_exponent(const std::string& value);
  std::string* _internal_mutable_exponent();
  public:

  // optional bytes modulus = 4;
  bool has_modulus() const;
  private:
  bool _internal_has_modulus() const;
  public:
  void clear_modulus();
  const std::string& modulus() const;
  void set_modulus(const std::string& value);
  void set_modulus(std::string&& value);
  void set_modulus(const char* value);
  void set_modulus(const void* value, size_t size);
  std::string* mutable_modulus();
  std::string* release_modulus();
  void set_allocated_modulus(std::string* modulus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_modulus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_modulus(
      std::string* modulus);
  private:
  const std::string& _internal_modulus() const;
  void _internal_set_modulus(const std::string& value);
  std::string* _internal_mutable_modulus();
  public:

  // optional int32 modulus_size = 1;
  bool has_modulus_size() const;
  private:
  bool _internal_has_modulus_size() const;
  public:
  void clear_modulus_size();
  ::PROTOBUF_NAMESPACE_ID::int32 modulus_size() const;
  void set_modulus_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_modulus_size() const;
  void _internal_set_modulus_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 exponent_size = 2;
  bool has_exponent_size() const;
  private:
  bool _internal_has_exponent_size() const;
  public:
  void clear_exponent_size();
  ::PROTOBUF_NAMESPACE_ID::int32 exponent_size() const;
  void set_exponent_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exponent_size() const;
  void _internal_set_exponent_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cert_rsa_parameters_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exponent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modulus_;
  ::PROTOBUF_NAMESPACE_ID::int32 modulus_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 exponent_size_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class cert_ecc_parameters_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cert_ecc_parameters_message) */ {
 public:
  inline cert_ecc_parameters_message() : cert_ecc_parameters_message(nullptr) {};
  virtual ~cert_ecc_parameters_message();

  cert_ecc_parameters_message(const cert_ecc_parameters_message& from);
  cert_ecc_parameters_message(cert_ecc_parameters_message&& from) noexcept
    : cert_ecc_parameters_message() {
    *this = ::std::move(from);
  }

  inline cert_ecc_parameters_message& operator=(const cert_ecc_parameters_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline cert_ecc_parameters_message& operator=(cert_ecc_parameters_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cert_ecc_parameters_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cert_ecc_parameters_message* internal_default_instance() {
    return reinterpret_cast<const cert_ecc_parameters_message*>(
               &_cert_ecc_parameters_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(cert_ecc_parameters_message& a, cert_ecc_parameters_message& b) {
    a.Swap(&b);
  }
  inline void Swap(cert_ecc_parameters_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cert_ecc_parameters_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cert_ecc_parameters_message* New() const final {
    return CreateMaybeMessage<cert_ecc_parameters_message>(nullptr);
  }

  cert_ecc_parameters_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cert_ecc_parameters_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cert_ecc_parameters_message& from);
  void MergeFrom(const cert_ecc_parameters_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cert_ecc_parameters_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cert_ecc_parameters_message";
  }
  protected:
  explicit cert_ecc_parameters_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimeFieldNumber = 2,
    kPrimeSizeFieldNumber = 1,
  };
  // optional bytes prime = 2;
  bool has_prime() const;
  private:
  bool _internal_has_prime() const;
  public:
  void clear_prime();
  const std::string& prime() const;
  void set_prime(const std::string& value);
  void set_prime(std::string&& value);
  void set_prime(const char* value);
  void set_prime(const void* value, size_t size);
  std::string* mutable_prime();
  std::string* release_prime();
  void set_allocated_prime(std::string* prime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prime(
      std::string* prime);
  private:
  const std::string& _internal_prime() const;
  void _internal_set_prime(const std::string& value);
  std::string* _internal_mutable_prime();
  public:

  // optional int32 prime_size = 1;
  bool has_prime_size() const;
  private:
  bool _internal_has_prime_size() const;
  public:
  void clear_prime_size();
  ::PROTOBUF_NAMESPACE_ID::int32 prime_size() const;
  void set_prime_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_prime_size() const;
  void _internal_set_prime_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:cert_ecc_parameters_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prime_;
  ::PROTOBUF_NAMESPACE_ID::int32 prime_size_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class cert_algorithm_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cert_algorithm_message) */ {
 public:
  inline cert_algorithm_message() : cert_algorithm_message(nullptr) {};
  virtual ~cert_algorithm_message();

  cert_algorithm_message(const cert_algorithm_message& from);
  cert_algorithm_message(cert_algorithm_message&& from) noexcept
    : cert_algorithm_message() {
    *this = ::std::move(from);
  }

  inline cert_algorithm_message& operator=(const cert_algorithm_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline cert_algorithm_message& operator=(cert_algorithm_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cert_algorithm_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cert_algorithm_message* internal_default_instance() {
    return reinterpret_cast<const cert_algorithm_message*>(
               &_cert_algorithm_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(cert_algorithm_message& a, cert_algorithm_message& b) {
    a.Swap(&b);
  }
  inline void Swap(cert_algorithm_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cert_algorithm_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cert_algorithm_message* New() const final {
    return CreateMaybeMessage<cert_algorithm_message>(nullptr);
  }

  cert_algorithm_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cert_algorithm_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cert_algorithm_message& from);
  void MergeFrom(const cert_algorithm_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cert_algorithm_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cert_algorithm_message";
  }
  protected:
  explicit cert_algorithm_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlgorithmNameFieldNumber = 1,
    kRsaParamsFieldNumber = 2,
    kEccParamsFieldNumber = 3,
  };
  // required string algorithm_name = 1;
  bool has_algorithm_name() const;
  private:
  bool _internal_has_algorithm_name() const;
  public:
  void clear_algorithm_name();
  const std::string& algorithm_name() const;
  void set_algorithm_name(const std::string& value);
  void set_algorithm_name(std::string&& value);
  void set_algorithm_name(const char* value);
  void set_algorithm_name(const char* value, size_t size);
  std::string* mutable_algorithm_name();
  std::string* release_algorithm_name();
  void set_allocated_algorithm_name(std::string* algorithm_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_algorithm_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_algorithm_name(
      std::string* algorithm_name);
  private:
  const std::string& _internal_algorithm_name() const;
  void _internal_set_algorithm_name(const std::string& value);
  std::string* _internal_mutable_algorithm_name();
  public:

  // optional .cert_rsa_parameters_message rsa_params = 2;
  bool has_rsa_params() const;
  private:
  bool _internal_has_rsa_params() const;
  public:
  void clear_rsa_params();
  const ::cert_rsa_parameters_message& rsa_params() const;
  ::cert_rsa_parameters_message* release_rsa_params();
  ::cert_rsa_parameters_message* mutable_rsa_params();
  void set_allocated_rsa_params(::cert_rsa_parameters_message* rsa_params);
  private:
  const ::cert_rsa_parameters_message& _internal_rsa_params() const;
  ::cert_rsa_parameters_message* _internal_mutable_rsa_params();
  public:
  void unsafe_arena_set_allocated_rsa_params(
      ::cert_rsa_parameters_message* rsa_params);
  ::cert_rsa_parameters_message* unsafe_arena_release_rsa_params();

  // optional .cert_ecc_parameters_message ecc_params = 3;
  bool has_ecc_params() const;
  private:
  bool _internal_has_ecc_params() const;
  public:
  void clear_ecc_params();
  const ::cert_ecc_parameters_message& ecc_params() const;
  ::cert_ecc_parameters_message* release_ecc_params();
  ::cert_ecc_parameters_message* mutable_ecc_params();
  void set_allocated_ecc_params(::cert_ecc_parameters_message* ecc_params);
  private:
  const ::cert_ecc_parameters_message& _internal_ecc_params() const;
  ::cert_ecc_parameters_message* _internal_mutable_ecc_params();
  public:
  void unsafe_arena_set_allocated_ecc_params(
      ::cert_ecc_parameters_message* ecc_params);
  ::cert_ecc_parameters_message* unsafe_arena_release_ecc_params();

  // @@protoc_insertion_point(class_scope:cert_algorithm_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr algorithm_name_;
  ::cert_rsa_parameters_message* rsa_params_;
  ::cert_ecc_parameters_message* ecc_params_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class cert_properties_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cert_properties_message) */ {
 public:
  inline cert_properties_message() : cert_properties_message(nullptr) {};
  virtual ~cert_properties_message();

  cert_properties_message(const cert_properties_message& from);
  cert_properties_message(cert_properties_message&& from) noexcept
    : cert_properties_message() {
    *this = ::std::move(from);
  }

  inline cert_properties_message& operator=(const cert_properties_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline cert_properties_message& operator=(cert_properties_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cert_properties_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cert_properties_message* internal_default_instance() {
    return reinterpret_cast<const cert_properties_message*>(
               &_cert_properties_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(cert_properties_message& a, cert_properties_message& b) {
    a.Swap(&b);
  }
  inline void Swap(cert_properties_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(cert_properties_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cert_properties_message* New() const final {
    return CreateMaybeMessage<cert_properties_message>(nullptr);
  }

  cert_properties_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cert_properties_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cert_properties_message& from);
  void MergeFrom(const cert_properties_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cert_properties_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cert_properties_message";
  }
  protected:
  explicit cert_properties_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kPropertyValueFieldNumber = 2,
  };
  // optional string property_name = 1;
  bool has_property_name() const;
  private:
  bool _internal_has_property_name() const;
  public:
  void clear_property_name();
  const std::string& property_name() const;
  void set_property_name(const std::string& value);
  void set_property_name(std::string&& value);
  void set_property_name(const char* value);
  void set_property_name(const char* value, size_t size);
  std::string* mutable_property_name();
  std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_property_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_property_name(
      std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // optional string property_value = 2;
  bool has_property_value() const;
  private:
  bool _internal_has_property_value() const;
  public:
  void clear_property_value();
  const std::string& property_value() const;
  void set_property_value(const std::string& value);
  void set_property_value(std::string&& value);
  void set_property_value(const char* value);
  void set_property_value(const char* value, size_t size);
  std::string* mutable_property_value();
  std::string* release_property_value();
  void set_allocated_property_value(std::string* property_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_property_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_property_value(
      std::string* property_value);
  private:
  const std::string& _internal_property_value() const;
  void _internal_set_property_value(const std::string& value);
  std::string* _internal_mutable_property_value();
  public:

  // @@protoc_insertion_point(class_scope:cert_properties_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_value_;
  friend struct ::TableStruct_support_2eproto;
};
// -------------------------------------------------------------------

class certificate_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:certificate_message) */ {
 public:
  inline certificate_message() : certificate_message(nullptr) {};
  virtual ~certificate_message();

  certificate_message(const certificate_message& from);
  certificate_message(certificate_message&& from) noexcept
    : certificate_message() {
    *this = ::std::move(from);
  }

  inline certificate_message& operator=(const certificate_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline certificate_message& operator=(certificate_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const certificate_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const certificate_message* internal_default_instance() {
    return reinterpret_cast<const certificate_message*>(
               &_certificate_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(certificate_message& a, certificate_message& b) {
    a.Swap(&b);
  }
  inline void Swap(certificate_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(certificate_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline certificate_message* New() const final {
    return CreateMaybeMessage<certificate_message>(nullptr);
  }

  certificate_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<certificate_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const certificate_message& from);
  void MergeFrom(const certificate_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(certificate_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "certificate_message";
  }
  protected:
  explicit certificate_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_support_2eproto);
    return ::descriptor_table_support_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectFieldNumber = 2,
    kPropertiesFieldNumber = 4,
    kIssuerFieldNumber = 12,
    kVersionFieldNumber = 1,
    kPurposeFieldNumber = 5,
    kNotBeforeFieldNumber = 6,
    kNotAfterFieldNumber = 7,
    kNonceFieldNumber = 8,
    kCanonicalFieldNumber = 9,
    kRevocationAddressFieldNumber = 10,
    kDateSignedFieldNumber = 11,
    kSignatureFieldNumber = 14,
    kSubjectKeyFieldNumber = 3,
    kSigningKeyFieldNumber = 13,
  };
  // repeated .cert_name_message subject = 2;
  int subject_size() const;
  private:
  int _internal_subject_size() const;
  public:
  void clear_subject();
  ::cert_name_message* mutable_subject(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >*
      mutable_subject();
  private:
  const ::cert_name_message& _internal_subject(int index) const;
  ::cert_name_message* _internal_add_subject();
  public:
  const ::cert_name_message& subject(int index) const;
  ::cert_name_message* add_subject();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >&
      subject() const;

  // repeated .cert_properties_message properties = 4;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::cert_properties_message* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_properties_message >*
      mutable_properties();
  private:
  const ::cert_properties_message& _internal_properties(int index) const;
  ::cert_properties_message* _internal_add_properties();
  public:
  const ::cert_properties_message& properties(int index) const;
  ::cert_properties_message* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_properties_message >&
      properties() const;

  // repeated .cert_name_message issuer = 12;
  int issuer_size() const;
  private:
  int _internal_issuer_size() const;
  public:
  void clear_issuer();
  ::cert_name_message* mutable_issuer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >*
      mutable_issuer();
  private:
  const ::cert_name_message& _internal_issuer(int index) const;
  ::cert_name_message* _internal_add_issuer();
  public:
  const ::cert_name_message& issuer(int index) const;
  ::cert_name_message* add_issuer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >&
      issuer() const;

  // required string version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional string purpose = 5;
  bool has_purpose() const;
  private:
  bool _internal_has_purpose() const;
  public:
  void clear_purpose();
  const std::string& purpose() const;
  void set_purpose(const std::string& value);
  void set_purpose(std::string&& value);
  void set_purpose(const char* value);
  void set_purpose(const char* value, size_t size);
  std::string* mutable_purpose();
  std::string* release_purpose();
  void set_allocated_purpose(std::string* purpose);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_purpose();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_purpose(
      std::string* purpose);
  private:
  const std::string& _internal_purpose() const;
  void _internal_set_purpose(const std::string& value);
  std::string* _internal_mutable_purpose();
  public:

  // optional string not_before = 6;
  bool has_not_before() const;
  private:
  bool _internal_has_not_before() const;
  public:
  void clear_not_before();
  const std::string& not_before() const;
  void set_not_before(const std::string& value);
  void set_not_before(std::string&& value);
  void set_not_before(const char* value);
  void set_not_before(const char* value, size_t size);
  std::string* mutable_not_before();
  std::string* release_not_before();
  void set_allocated_not_before(std::string* not_before);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_not_before();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_not_before(
      std::string* not_before);
  private:
  const std::string& _internal_not_before() const;
  void _internal_set_not_before(const std::string& value);
  std::string* _internal_mutable_not_before();
  public:

  // optional string not_after = 7;
  bool has_not_after() const;
  private:
  bool _internal_has_not_after() const;
  public:
  void clear_not_after();
  const std::string& not_after() const;
  void set_not_after(const std::string& value);
  void set_not_after(std::string&& value);
  void set_not_after(const char* value);
  void set_not_after(const char* value, size_t size);
  std::string* mutable_not_after();
  std::string* release_not_after();
  void set_allocated_not_after(std::string* not_after);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_not_after();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_not_after(
      std::string* not_after);
  private:
  const std::string& _internal_not_after() const;
  void _internal_set_not_after(const std::string& value);
  std::string* _internal_mutable_not_after();
  public:

  // optional bytes nonce = 8;
  bool has_nonce() const;
  private:
  bool _internal_has_nonce() const;
  public:
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nonce();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nonce(
      std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // optional bytes canonical = 9;
  bool has_canonical() const;
  private:
  bool _internal_has_canonical() const;
  public:
  void clear_canonical();
  const std::string& canonical() const;
  void set_canonical(const std::string& value);
  void set_canonical(std::string&& value);
  void set_canonical(const char* value);
  void set_canonical(const void* value, size_t size);
  std::string* mutable_canonical();
  std::string* release_canonical();
  void set_allocated_canonical(std::string* canonical);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_canonical();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_canonical(
      std::string* canonical);
  private:
  const std::string& _internal_canonical() const;
  void _internal_set_canonical(const std::string& value);
  std::string* _internal_mutable_canonical();
  public:

  // optional string revocation_address = 10;
  bool has_revocation_address() const;
  private:
  bool _internal_has_revocation_address() const;
  public:
  void clear_revocation_address();
  const std::string& revocation_address() const;
  void set_revocation_address(const std::string& value);
  void set_revocation_address(std::string&& value);
  void set_revocation_address(const char* value);
  void set_revocation_address(const char* value, size_t size);
  std::string* mutable_revocation_address();
  std::string* release_revocation_address();
  void set_allocated_revocation_address(std::string* revocation_address);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_revocation_address();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_revocation_address(
      std::string* revocation_address);
  private:
  const std::string& _internal_revocation_address() const;
  void _internal_set_revocation_address(const std::string& value);
  std::string* _internal_mutable_revocation_address();
  public:

  // optional string date_signed = 11;
  bool has_date_signed() const;
  private:
  bool _internal_has_date_signed() const;
  public:
  void clear_date_signed();
  const std::string& date_signed() const;
  void set_date_signed(const std::string& value);
  void set_date_signed(std::string&& value);
  void set_date_signed(const char* value);
  void set_date_signed(const char* value, size_t size);
  std::string* mutable_date_signed();
  std::string* release_date_signed();
  void set_allocated_date_signed(std::string* date_signed);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_date_signed();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_date_signed(
      std::string* date_signed);
  private:
  const std::string& _internal_date_signed() const;
  void _internal_set_date_signed(const std::string& value);
  std::string* _internal_mutable_date_signed();
  public:

  // optional bytes signature = 14;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // optional .cert_algorithm_message subject_key = 3;
  bool has_subject_key() const;
  private:
  bool _internal_has_subject_key() const;
  public:
  void clear_subject_key();
  const ::cert_algorithm_message& subject_key() const;
  ::cert_algorithm_message* release_subject_key();
  ::cert_algorithm_message* mutable_subject_key();
  void set_allocated_subject_key(::cert_algorithm_message* subject_key);
  private:
  const ::cert_algorithm_message& _internal_subject_key() const;
  ::cert_algorithm_message* _internal_mutable_subject_key();
  public:
  void unsafe_arena_set_allocated_subject_key(
      ::cert_algorithm_message* subject_key);
  ::cert_algorithm_message* unsafe_arena_release_subject_key();

  // optional .cert_algorithm_message signing_key = 13;
  bool has_signing_key() const;
  private:
  bool _internal_has_signing_key() const;
  public:
  void clear_signing_key();
  const ::cert_algorithm_message& signing_key() const;
  ::cert_algorithm_message* release_signing_key();
  ::cert_algorithm_message* mutable_signing_key();
  void set_allocated_signing_key(::cert_algorithm_message* signing_key);
  private:
  const ::cert_algorithm_message& _internal_signing_key() const;
  ::cert_algorithm_message* _internal_mutable_signing_key();
  public:
  void unsafe_arena_set_allocated_signing_key(
      ::cert_algorithm_message* signing_key);
  ::cert_algorithm_message* unsafe_arena_release_signing_key();

  // @@protoc_insertion_point(class_scope:certificate_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message > subject_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_properties_message > properties_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message > issuer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purpose_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr not_before_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr not_after_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr canonical_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr revocation_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_signed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::cert_algorithm_message* subject_key_;
  ::cert_algorithm_message* signing_key_;
  friend struct ::TableStruct_support_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// binary_blob_message

// optional string blob = 1;
inline bool binary_blob_message::_internal_has_blob() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool binary_blob_message::has_blob() const {
  return _internal_has_blob();
}
inline void binary_blob_message::clear_blob() {
  blob_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& binary_blob_message::blob() const {
  // @@protoc_insertion_point(field_get:binary_blob_message.blob)
  return _internal_blob();
}
inline void binary_blob_message::set_blob(const std::string& value) {
  _internal_set_blob(value);
  // @@protoc_insertion_point(field_set:binary_blob_message.blob)
}
inline std::string* binary_blob_message::mutable_blob() {
  // @@protoc_insertion_point(field_mutable:binary_blob_message.blob)
  return _internal_mutable_blob();
}
inline const std::string& binary_blob_message::_internal_blob() const {
  return blob_.Get();
}
inline void binary_blob_message::_internal_set_blob(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void binary_blob_message::set_blob(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  blob_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:binary_blob_message.blob)
}
inline void binary_blob_message::set_blob(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:binary_blob_message.blob)
}
inline void binary_blob_message::set_blob(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  blob_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:binary_blob_message.blob)
}
inline std::string* binary_blob_message::_internal_mutable_blob() {
  _has_bits_[0] |= 0x00000001u;
  return blob_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* binary_blob_message::release_blob() {
  // @@protoc_insertion_point(field_release:binary_blob_message.blob)
  if (!_internal_has_blob()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return blob_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void binary_blob_message::set_allocated_blob(std::string* blob) {
  if (blob != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  blob_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blob,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:binary_blob_message.blob)
}
inline std::string* binary_blob_message::unsafe_arena_release_blob() {
  // @@protoc_insertion_point(field_unsafe_arena_release:binary_blob_message.blob)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return blob_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void binary_blob_message::unsafe_arena_set_allocated_blob(
    std::string* blob) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (blob != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  blob_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      blob, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:binary_blob_message.blob)
}

// -------------------------------------------------------------------

// encrypted_message

// optional string scheme_identifier = 1;
inline bool encrypted_message::_internal_has_scheme_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool encrypted_message::has_scheme_identifier() const {
  return _internal_has_scheme_identifier();
}
inline void encrypted_message::clear_scheme_identifier() {
  scheme_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& encrypted_message::scheme_identifier() const {
  // @@protoc_insertion_point(field_get:encrypted_message.scheme_identifier)
  return _internal_scheme_identifier();
}
inline void encrypted_message::set_scheme_identifier(const std::string& value) {
  _internal_set_scheme_identifier(value);
  // @@protoc_insertion_point(field_set:encrypted_message.scheme_identifier)
}
inline std::string* encrypted_message::mutable_scheme_identifier() {
  // @@protoc_insertion_point(field_mutable:encrypted_message.scheme_identifier)
  return _internal_mutable_scheme_identifier();
}
inline const std::string& encrypted_message::_internal_scheme_identifier() const {
  return scheme_identifier_.Get();
}
inline void encrypted_message::_internal_set_scheme_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scheme_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void encrypted_message::set_scheme_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scheme_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:encrypted_message.scheme_identifier)
}
inline void encrypted_message::set_scheme_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scheme_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:encrypted_message.scheme_identifier)
}
inline void encrypted_message::set_scheme_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scheme_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:encrypted_message.scheme_identifier)
}
inline std::string* encrypted_message::_internal_mutable_scheme_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return scheme_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* encrypted_message::release_scheme_identifier() {
  // @@protoc_insertion_point(field_release:encrypted_message.scheme_identifier)
  if (!_internal_has_scheme_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scheme_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void encrypted_message::set_allocated_scheme_identifier(std::string* scheme_identifier) {
  if (scheme_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheme_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheme_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:encrypted_message.scheme_identifier)
}
inline std::string* encrypted_message::unsafe_arena_release_scheme_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:encrypted_message.scheme_identifier)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return scheme_identifier_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void encrypted_message::unsafe_arena_set_allocated_scheme_identifier(
    std::string* scheme_identifier) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scheme_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheme_identifier_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scheme_identifier, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:encrypted_message.scheme_identifier)
}

// optional string message_identifier = 2;
inline bool encrypted_message::_internal_has_message_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool encrypted_message::has_message_identifier() const {
  return _internal_has_message_identifier();
}
inline void encrypted_message::clear_message_identifier() {
  message_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& encrypted_message::message_identifier() const {
  // @@protoc_insertion_point(field_get:encrypted_message.message_identifier)
  return _internal_message_identifier();
}
inline void encrypted_message::set_message_identifier(const std::string& value) {
  _internal_set_message_identifier(value);
  // @@protoc_insertion_point(field_set:encrypted_message.message_identifier)
}
inline std::string* encrypted_message::mutable_message_identifier() {
  // @@protoc_insertion_point(field_mutable:encrypted_message.message_identifier)
  return _internal_mutable_message_identifier();
}
inline const std::string& encrypted_message::_internal_message_identifier() const {
  return message_identifier_.Get();
}
inline void encrypted_message::_internal_set_message_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void encrypted_message::set_message_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  message_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:encrypted_message.message_identifier)
}
inline void encrypted_message::set_message_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  message_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:encrypted_message.message_identifier)
}
inline void encrypted_message::set_message_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  message_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:encrypted_message.message_identifier)
}
inline std::string* encrypted_message::_internal_mutable_message_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return message_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* encrypted_message::release_message_identifier() {
  // @@protoc_insertion_point(field_release:encrypted_message.message_identifier)
  if (!_internal_has_message_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return message_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void encrypted_message::set_allocated_message_identifier(std::string* message_identifier) {
  if (message_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:encrypted_message.message_identifier)
}
inline std::string* encrypted_message::unsafe_arena_release_message_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:encrypted_message.message_identifier)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return message_identifier_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void encrypted_message::unsafe_arena_set_allocated_message_identifier(
    std::string* message_identifier) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_identifier_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message_identifier, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:encrypted_message.message_identifier)
}

// optional string source = 3;
inline bool encrypted_message::_internal_has_source() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool encrypted_message::has_source() const {
  return _internal_has_source();
}
inline void encrypted_message::clear_source() {
  source_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& encrypted_message::source() const {
  // @@protoc_insertion_point(field_get:encrypted_message.source)
  return _internal_source();
}
inline void encrypted_message::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:encrypted_message.source)
}
inline std::string* encrypted_message::mutable_source() {
  // @@protoc_insertion_point(field_mutable:encrypted_message.source)
  return _internal_mutable_source();
}
inline const std::string& encrypted_message::_internal_source() const {
  return source_.Get();
}
inline void encrypted_message::_internal_set_source(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void encrypted_message::set_source(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:encrypted_message.source)
}
inline void encrypted_message::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:encrypted_message.source)
}
inline void encrypted_message::set_source(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  source_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:encrypted_message.source)
}
inline std::string* encrypted_message::_internal_mutable_source() {
  _has_bits_[0] |= 0x00000004u;
  return source_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* encrypted_message::release_source() {
  // @@protoc_insertion_point(field_release:encrypted_message.source)
  if (!_internal_has_source()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return source_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void encrypted_message::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:encrypted_message.source)
}
inline std::string* encrypted_message::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:encrypted_message.source)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return source_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void encrypted_message::unsafe_arena_set_allocated_source(
    std::string* source) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (source != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  source_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      source, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:encrypted_message.source)
}

// optional string destination = 4;
inline bool encrypted_message::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool encrypted_message::has_destination() const {
  return _internal_has_destination();
}
inline void encrypted_message::clear_destination() {
  destination_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& encrypted_message::destination() const {
  // @@protoc_insertion_point(field_get:encrypted_message.destination)
  return _internal_destination();
}
inline void encrypted_message::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:encrypted_message.destination)
}
inline std::string* encrypted_message::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:encrypted_message.destination)
  return _internal_mutable_destination();
}
inline const std::string& encrypted_message::_internal_destination() const {
  return destination_.Get();
}
inline void encrypted_message::_internal_set_destination(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void encrypted_message::set_destination(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  destination_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:encrypted_message.destination)
}
inline void encrypted_message::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:encrypted_message.destination)
}
inline void encrypted_message::set_destination(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:encrypted_message.destination)
}
inline std::string* encrypted_message::_internal_mutable_destination() {
  _has_bits_[0] |= 0x00000008u;
  return destination_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* encrypted_message::release_destination() {
  // @@protoc_insertion_point(field_release:encrypted_message.destination)
  if (!_internal_has_destination()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return destination_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void encrypted_message::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:encrypted_message.destination)
}
inline std::string* encrypted_message::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:encrypted_message.destination)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return destination_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void encrypted_message::unsafe_arena_set_allocated_destination(
    std::string* destination) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (destination != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  destination_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destination, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:encrypted_message.destination)
}

// optional string date = 5;
inline bool encrypted_message::_internal_has_date() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool encrypted_message::has_date() const {
  return _internal_has_date();
}
inline void encrypted_message::clear_date() {
  date_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& encrypted_message::date() const {
  // @@protoc_insertion_point(field_get:encrypted_message.date)
  return _internal_date();
}
inline void encrypted_message::set_date(const std::string& value) {
  _internal_set_date(value);
  // @@protoc_insertion_point(field_set:encrypted_message.date)
}
inline std::string* encrypted_message::mutable_date() {
  // @@protoc_insertion_point(field_mutable:encrypted_message.date)
  return _internal_mutable_date();
}
inline const std::string& encrypted_message::_internal_date() const {
  return date_.Get();
}
inline void encrypted_message::_internal_set_date(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void encrypted_message::set_date(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  date_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:encrypted_message.date)
}
inline void encrypted_message::set_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:encrypted_message.date)
}
inline void encrypted_message::set_date(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  date_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:encrypted_message.date)
}
inline std::string* encrypted_message::_internal_mutable_date() {
  _has_bits_[0] |= 0x00000010u;
  return date_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* encrypted_message::release_date() {
  // @@protoc_insertion_point(field_release:encrypted_message.date)
  if (!_internal_has_date()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return date_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void encrypted_message::set_allocated_date(std::string* date) {
  if (date != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:encrypted_message.date)
}
inline std::string* encrypted_message::unsafe_arena_release_date() {
  // @@protoc_insertion_point(field_unsafe_arena_release:encrypted_message.date)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return date_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void encrypted_message::unsafe_arena_set_allocated_date(
    std::string* date) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (date != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  date_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      date, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:encrypted_message.date)
}

// optional bytes buffer = 6;
inline bool encrypted_message::_internal_has_buffer() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool encrypted_message::has_buffer() const {
  return _internal_has_buffer();
}
inline void encrypted_message::clear_buffer() {
  buffer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& encrypted_message::buffer() const {
  // @@protoc_insertion_point(field_get:encrypted_message.buffer)
  return _internal_buffer();
}
inline void encrypted_message::set_buffer(const std::string& value) {
  _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:encrypted_message.buffer)
}
inline std::string* encrypted_message::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable:encrypted_message.buffer)
  return _internal_mutable_buffer();
}
inline const std::string& encrypted_message::_internal_buffer() const {
  return buffer_.Get();
}
inline void encrypted_message::_internal_set_buffer(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void encrypted_message::set_buffer(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  buffer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:encrypted_message.buffer)
}
inline void encrypted_message::set_buffer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:encrypted_message.buffer)
}
inline void encrypted_message::set_buffer(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  buffer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:encrypted_message.buffer)
}
inline std::string* encrypted_message::_internal_mutable_buffer() {
  _has_bits_[0] |= 0x00000020u;
  return buffer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* encrypted_message::release_buffer() {
  // @@protoc_insertion_point(field_release:encrypted_message.buffer)
  if (!_internal_has_buffer()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return buffer_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void encrypted_message::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  buffer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:encrypted_message.buffer)
}
inline std::string* encrypted_message::unsafe_arena_release_buffer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:encrypted_message.buffer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return buffer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void encrypted_message::unsafe_arena_set_allocated_buffer(
    std::string* buffer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (buffer != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  buffer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      buffer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:encrypted_message.buffer)
}

// -------------------------------------------------------------------

// signature_message

// -------------------------------------------------------------------

// rsa_public_parameters_message

// optional bytes modulus = 1;
inline bool rsa_public_parameters_message::_internal_has_modulus() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool rsa_public_parameters_message::has_modulus() const {
  return _internal_has_modulus();
}
inline void rsa_public_parameters_message::clear_modulus() {
  modulus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& rsa_public_parameters_message::modulus() const {
  // @@protoc_insertion_point(field_get:rsa_public_parameters_message.modulus)
  return _internal_modulus();
}
inline void rsa_public_parameters_message::set_modulus(const std::string& value) {
  _internal_set_modulus(value);
  // @@protoc_insertion_point(field_set:rsa_public_parameters_message.modulus)
}
inline std::string* rsa_public_parameters_message::mutable_modulus() {
  // @@protoc_insertion_point(field_mutable:rsa_public_parameters_message.modulus)
  return _internal_mutable_modulus();
}
inline const std::string& rsa_public_parameters_message::_internal_modulus() const {
  return modulus_.Get();
}
inline void rsa_public_parameters_message::_internal_set_modulus(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_public_parameters_message::set_modulus(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  modulus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_public_parameters_message.modulus)
}
inline void rsa_public_parameters_message::set_modulus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_public_parameters_message.modulus)
}
inline void rsa_public_parameters_message::set_modulus(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_public_parameters_message.modulus)
}
inline std::string* rsa_public_parameters_message::_internal_mutable_modulus() {
  _has_bits_[0] |= 0x00000001u;
  return modulus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_public_parameters_message::release_modulus() {
  // @@protoc_insertion_point(field_release:rsa_public_parameters_message.modulus)
  if (!_internal_has_modulus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return modulus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_public_parameters_message::set_allocated_modulus(std::string* modulus) {
  if (modulus != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modulus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modulus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_public_parameters_message.modulus)
}
inline std::string* rsa_public_parameters_message::unsafe_arena_release_modulus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_public_parameters_message.modulus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return modulus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_public_parameters_message::unsafe_arena_set_allocated_modulus(
    std::string* modulus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (modulus != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modulus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modulus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_public_parameters_message.modulus)
}

// optional bytes e = 2;
inline bool rsa_public_parameters_message::_internal_has_e() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool rsa_public_parameters_message::has_e() const {
  return _internal_has_e();
}
inline void rsa_public_parameters_message::clear_e() {
  e_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& rsa_public_parameters_message::e() const {
  // @@protoc_insertion_point(field_get:rsa_public_parameters_message.e)
  return _internal_e();
}
inline void rsa_public_parameters_message::set_e(const std::string& value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:rsa_public_parameters_message.e)
}
inline std::string* rsa_public_parameters_message::mutable_e() {
  // @@protoc_insertion_point(field_mutable:rsa_public_parameters_message.e)
  return _internal_mutable_e();
}
inline const std::string& rsa_public_parameters_message::_internal_e() const {
  return e_.Get();
}
inline void rsa_public_parameters_message::_internal_set_e(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_public_parameters_message::set_e(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  e_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_public_parameters_message.e)
}
inline void rsa_public_parameters_message::set_e(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_public_parameters_message.e)
}
inline void rsa_public_parameters_message::set_e(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  e_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_public_parameters_message.e)
}
inline std::string* rsa_public_parameters_message::_internal_mutable_e() {
  _has_bits_[0] |= 0x00000002u;
  return e_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_public_parameters_message::release_e() {
  // @@protoc_insertion_point(field_release:rsa_public_parameters_message.e)
  if (!_internal_has_e()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return e_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_public_parameters_message::set_allocated_e(std::string* e) {
  if (e != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  e_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_public_parameters_message.e)
}
inline std::string* rsa_public_parameters_message::unsafe_arena_release_e() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_public_parameters_message.e)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return e_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_public_parameters_message::unsafe_arena_set_allocated_e(
    std::string* e) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (e != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  e_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      e, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_public_parameters_message.e)
}

// -------------------------------------------------------------------

// rsa_private_parameters_message

// optional bytes d = 1;
inline bool rsa_private_parameters_message::_internal_has_d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool rsa_private_parameters_message::has_d() const {
  return _internal_has_d();
}
inline void rsa_private_parameters_message::clear_d() {
  d_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& rsa_private_parameters_message::d() const {
  // @@protoc_insertion_point(field_get:rsa_private_parameters_message.d)
  return _internal_d();
}
inline void rsa_private_parameters_message::set_d(const std::string& value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:rsa_private_parameters_message.d)
}
inline std::string* rsa_private_parameters_message::mutable_d() {
  // @@protoc_insertion_point(field_mutable:rsa_private_parameters_message.d)
  return _internal_mutable_d();
}
inline const std::string& rsa_private_parameters_message::_internal_d() const {
  return d_.Get();
}
inline void rsa_private_parameters_message::_internal_set_d(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_private_parameters_message::set_d(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  d_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_private_parameters_message.d)
}
inline void rsa_private_parameters_message::set_d(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_private_parameters_message.d)
}
inline void rsa_private_parameters_message::set_d(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  d_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_private_parameters_message.d)
}
inline std::string* rsa_private_parameters_message::_internal_mutable_d() {
  _has_bits_[0] |= 0x00000001u;
  return d_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_private_parameters_message::release_d() {
  // @@protoc_insertion_point(field_release:rsa_private_parameters_message.d)
  if (!_internal_has_d()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return d_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_private_parameters_message::set_allocated_d(std::string* d) {
  if (d != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  d_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), d,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_private_parameters_message.d)
}
inline std::string* rsa_private_parameters_message::unsafe_arena_release_d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_private_parameters_message.d)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return d_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_private_parameters_message::unsafe_arena_set_allocated_d(
    std::string* d) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (d != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  d_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      d, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_private_parameters_message.d)
}

// optional bytes p = 2;
inline bool rsa_private_parameters_message::_internal_has_p() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool rsa_private_parameters_message::has_p() const {
  return _internal_has_p();
}
inline void rsa_private_parameters_message::clear_p() {
  p_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& rsa_private_parameters_message::p() const {
  // @@protoc_insertion_point(field_get:rsa_private_parameters_message.p)
  return _internal_p();
}
inline void rsa_private_parameters_message::set_p(const std::string& value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:rsa_private_parameters_message.p)
}
inline std::string* rsa_private_parameters_message::mutable_p() {
  // @@protoc_insertion_point(field_mutable:rsa_private_parameters_message.p)
  return _internal_mutable_p();
}
inline const std::string& rsa_private_parameters_message::_internal_p() const {
  return p_.Get();
}
inline void rsa_private_parameters_message::_internal_set_p(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_private_parameters_message::set_p(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  p_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_private_parameters_message.p)
}
inline void rsa_private_parameters_message::set_p(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_private_parameters_message.p)
}
inline void rsa_private_parameters_message::set_p(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_private_parameters_message.p)
}
inline std::string* rsa_private_parameters_message::_internal_mutable_p() {
  _has_bits_[0] |= 0x00000002u;
  return p_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_private_parameters_message::release_p() {
  // @@protoc_insertion_point(field_release:rsa_private_parameters_message.p)
  if (!_internal_has_p()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return p_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_private_parameters_message::set_allocated_p(std::string* p) {
  if (p != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  p_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_private_parameters_message.p)
}
inline std::string* rsa_private_parameters_message::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_private_parameters_message.p)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return p_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_private_parameters_message::unsafe_arena_set_allocated_p(
    std::string* p) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (p != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  p_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      p, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_private_parameters_message.p)
}

// optional bytes q = 3;
inline bool rsa_private_parameters_message::_internal_has_q() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool rsa_private_parameters_message::has_q() const {
  return _internal_has_q();
}
inline void rsa_private_parameters_message::clear_q() {
  q_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& rsa_private_parameters_message::q() const {
  // @@protoc_insertion_point(field_get:rsa_private_parameters_message.q)
  return _internal_q();
}
inline void rsa_private_parameters_message::set_q(const std::string& value) {
  _internal_set_q(value);
  // @@protoc_insertion_point(field_set:rsa_private_parameters_message.q)
}
inline std::string* rsa_private_parameters_message::mutable_q() {
  // @@protoc_insertion_point(field_mutable:rsa_private_parameters_message.q)
  return _internal_mutable_q();
}
inline const std::string& rsa_private_parameters_message::_internal_q() const {
  return q_.Get();
}
inline void rsa_private_parameters_message::_internal_set_q(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  q_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_private_parameters_message::set_q(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  q_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_private_parameters_message.q)
}
inline void rsa_private_parameters_message::set_q(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  q_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_private_parameters_message.q)
}
inline void rsa_private_parameters_message::set_q(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  q_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_private_parameters_message.q)
}
inline std::string* rsa_private_parameters_message::_internal_mutable_q() {
  _has_bits_[0] |= 0x00000004u;
  return q_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_private_parameters_message::release_q() {
  // @@protoc_insertion_point(field_release:rsa_private_parameters_message.q)
  if (!_internal_has_q()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return q_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_private_parameters_message::set_allocated_q(std::string* q) {
  if (q != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  q_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), q,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_private_parameters_message.q)
}
inline std::string* rsa_private_parameters_message::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_private_parameters_message.q)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return q_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_private_parameters_message::unsafe_arena_set_allocated_q(
    std::string* q) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (q != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  q_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      q, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_private_parameters_message.q)
}

// optional bytes dp = 4;
inline bool rsa_private_parameters_message::_internal_has_dp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool rsa_private_parameters_message::has_dp() const {
  return _internal_has_dp();
}
inline void rsa_private_parameters_message::clear_dp() {
  dp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& rsa_private_parameters_message::dp() const {
  // @@protoc_insertion_point(field_get:rsa_private_parameters_message.dp)
  return _internal_dp();
}
inline void rsa_private_parameters_message::set_dp(const std::string& value) {
  _internal_set_dp(value);
  // @@protoc_insertion_point(field_set:rsa_private_parameters_message.dp)
}
inline std::string* rsa_private_parameters_message::mutable_dp() {
  // @@protoc_insertion_point(field_mutable:rsa_private_parameters_message.dp)
  return _internal_mutable_dp();
}
inline const std::string& rsa_private_parameters_message::_internal_dp() const {
  return dp_.Get();
}
inline void rsa_private_parameters_message::_internal_set_dp(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  dp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_private_parameters_message::set_dp(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  dp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_private_parameters_message.dp)
}
inline void rsa_private_parameters_message::set_dp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  dp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_private_parameters_message.dp)
}
inline void rsa_private_parameters_message::set_dp(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  dp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_private_parameters_message.dp)
}
inline std::string* rsa_private_parameters_message::_internal_mutable_dp() {
  _has_bits_[0] |= 0x00000008u;
  return dp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_private_parameters_message::release_dp() {
  // @@protoc_insertion_point(field_release:rsa_private_parameters_message.dp)
  if (!_internal_has_dp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return dp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_private_parameters_message::set_allocated_dp(std::string* dp) {
  if (dp != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_private_parameters_message.dp)
}
inline std::string* rsa_private_parameters_message::unsafe_arena_release_dp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_private_parameters_message.dp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return dp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_private_parameters_message::unsafe_arena_set_allocated_dp(
    std::string* dp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dp != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  dp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_private_parameters_message.dp)
}

// optional bytes dq = 5;
inline bool rsa_private_parameters_message::_internal_has_dq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool rsa_private_parameters_message::has_dq() const {
  return _internal_has_dq();
}
inline void rsa_private_parameters_message::clear_dq() {
  dq_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& rsa_private_parameters_message::dq() const {
  // @@protoc_insertion_point(field_get:rsa_private_parameters_message.dq)
  return _internal_dq();
}
inline void rsa_private_parameters_message::set_dq(const std::string& value) {
  _internal_set_dq(value);
  // @@protoc_insertion_point(field_set:rsa_private_parameters_message.dq)
}
inline std::string* rsa_private_parameters_message::mutable_dq() {
  // @@protoc_insertion_point(field_mutable:rsa_private_parameters_message.dq)
  return _internal_mutable_dq();
}
inline const std::string& rsa_private_parameters_message::_internal_dq() const {
  return dq_.Get();
}
inline void rsa_private_parameters_message::_internal_set_dq(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  dq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_private_parameters_message::set_dq(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  dq_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_private_parameters_message.dq)
}
inline void rsa_private_parameters_message::set_dq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  dq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_private_parameters_message.dq)
}
inline void rsa_private_parameters_message::set_dq(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  dq_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_private_parameters_message.dq)
}
inline std::string* rsa_private_parameters_message::_internal_mutable_dq() {
  _has_bits_[0] |= 0x00000010u;
  return dq_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_private_parameters_message::release_dq() {
  // @@protoc_insertion_point(field_release:rsa_private_parameters_message.dq)
  if (!_internal_has_dq()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return dq_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_private_parameters_message::set_allocated_dq(std::string* dq) {
  if (dq != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dq_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dq,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_private_parameters_message.dq)
}
inline std::string* rsa_private_parameters_message::unsafe_arena_release_dq() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_private_parameters_message.dq)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return dq_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_private_parameters_message::unsafe_arena_set_allocated_dq(
    std::string* dq) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dq != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dq_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dq, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_private_parameters_message.dq)
}

// optional bytes m_prime = 6;
inline bool rsa_private_parameters_message::_internal_has_m_prime() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool rsa_private_parameters_message::has_m_prime() const {
  return _internal_has_m_prime();
}
inline void rsa_private_parameters_message::clear_m_prime() {
  m_prime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& rsa_private_parameters_message::m_prime() const {
  // @@protoc_insertion_point(field_get:rsa_private_parameters_message.m_prime)
  return _internal_m_prime();
}
inline void rsa_private_parameters_message::set_m_prime(const std::string& value) {
  _internal_set_m_prime(value);
  // @@protoc_insertion_point(field_set:rsa_private_parameters_message.m_prime)
}
inline std::string* rsa_private_parameters_message::mutable_m_prime() {
  // @@protoc_insertion_point(field_mutable:rsa_private_parameters_message.m_prime)
  return _internal_mutable_m_prime();
}
inline const std::string& rsa_private_parameters_message::_internal_m_prime() const {
  return m_prime_.Get();
}
inline void rsa_private_parameters_message::_internal_set_m_prime(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  m_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_private_parameters_message::set_m_prime(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  m_prime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_private_parameters_message.m_prime)
}
inline void rsa_private_parameters_message::set_m_prime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  m_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_private_parameters_message.m_prime)
}
inline void rsa_private_parameters_message::set_m_prime(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  m_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_private_parameters_message.m_prime)
}
inline std::string* rsa_private_parameters_message::_internal_mutable_m_prime() {
  _has_bits_[0] |= 0x00000020u;
  return m_prime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_private_parameters_message::release_m_prime() {
  // @@protoc_insertion_point(field_release:rsa_private_parameters_message.m_prime)
  if (!_internal_has_m_prime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return m_prime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_private_parameters_message::set_allocated_m_prime(std::string* m_prime) {
  if (m_prime != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  m_prime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_prime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_private_parameters_message.m_prime)
}
inline std::string* rsa_private_parameters_message::unsafe_arena_release_m_prime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_private_parameters_message.m_prime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return m_prime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_private_parameters_message::unsafe_arena_set_allocated_m_prime(
    std::string* m_prime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (m_prime != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  m_prime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      m_prime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_private_parameters_message.m_prime)
}

// optional bytes p_prime = 7;
inline bool rsa_private_parameters_message::_internal_has_p_prime() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool rsa_private_parameters_message::has_p_prime() const {
  return _internal_has_p_prime();
}
inline void rsa_private_parameters_message::clear_p_prime() {
  p_prime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& rsa_private_parameters_message::p_prime() const {
  // @@protoc_insertion_point(field_get:rsa_private_parameters_message.p_prime)
  return _internal_p_prime();
}
inline void rsa_private_parameters_message::set_p_prime(const std::string& value) {
  _internal_set_p_prime(value);
  // @@protoc_insertion_point(field_set:rsa_private_parameters_message.p_prime)
}
inline std::string* rsa_private_parameters_message::mutable_p_prime() {
  // @@protoc_insertion_point(field_mutable:rsa_private_parameters_message.p_prime)
  return _internal_mutable_p_prime();
}
inline const std::string& rsa_private_parameters_message::_internal_p_prime() const {
  return p_prime_.Get();
}
inline void rsa_private_parameters_message::_internal_set_p_prime(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  p_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_private_parameters_message::set_p_prime(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  p_prime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_private_parameters_message.p_prime)
}
inline void rsa_private_parameters_message::set_p_prime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  p_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_private_parameters_message.p_prime)
}
inline void rsa_private_parameters_message::set_p_prime(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  p_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_private_parameters_message.p_prime)
}
inline std::string* rsa_private_parameters_message::_internal_mutable_p_prime() {
  _has_bits_[0] |= 0x00000040u;
  return p_prime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_private_parameters_message::release_p_prime() {
  // @@protoc_insertion_point(field_release:rsa_private_parameters_message.p_prime)
  if (!_internal_has_p_prime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return p_prime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_private_parameters_message::set_allocated_p_prime(std::string* p_prime) {
  if (p_prime != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  p_prime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p_prime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_private_parameters_message.p_prime)
}
inline std::string* rsa_private_parameters_message::unsafe_arena_release_p_prime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_private_parameters_message.p_prime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return p_prime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_private_parameters_message::unsafe_arena_set_allocated_p_prime(
    std::string* p_prime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (p_prime != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  p_prime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      p_prime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_private_parameters_message.p_prime)
}

// optional bytes q_prime = 8;
inline bool rsa_private_parameters_message::_internal_has_q_prime() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool rsa_private_parameters_message::has_q_prime() const {
  return _internal_has_q_prime();
}
inline void rsa_private_parameters_message::clear_q_prime() {
  q_prime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& rsa_private_parameters_message::q_prime() const {
  // @@protoc_insertion_point(field_get:rsa_private_parameters_message.q_prime)
  return _internal_q_prime();
}
inline void rsa_private_parameters_message::set_q_prime(const std::string& value) {
  _internal_set_q_prime(value);
  // @@protoc_insertion_point(field_set:rsa_private_parameters_message.q_prime)
}
inline std::string* rsa_private_parameters_message::mutable_q_prime() {
  // @@protoc_insertion_point(field_mutable:rsa_private_parameters_message.q_prime)
  return _internal_mutable_q_prime();
}
inline const std::string& rsa_private_parameters_message::_internal_q_prime() const {
  return q_prime_.Get();
}
inline void rsa_private_parameters_message::_internal_set_q_prime(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  q_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void rsa_private_parameters_message::set_q_prime(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  q_prime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rsa_private_parameters_message.q_prime)
}
inline void rsa_private_parameters_message::set_q_prime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  q_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:rsa_private_parameters_message.q_prime)
}
inline void rsa_private_parameters_message::set_q_prime(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  q_prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rsa_private_parameters_message.q_prime)
}
inline std::string* rsa_private_parameters_message::_internal_mutable_q_prime() {
  _has_bits_[0] |= 0x00000080u;
  return q_prime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* rsa_private_parameters_message::release_q_prime() {
  // @@protoc_insertion_point(field_release:rsa_private_parameters_message.q_prime)
  if (!_internal_has_q_prime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return q_prime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void rsa_private_parameters_message::set_allocated_q_prime(std::string* q_prime) {
  if (q_prime != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  q_prime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), q_prime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rsa_private_parameters_message.q_prime)
}
inline std::string* rsa_private_parameters_message::unsafe_arena_release_q_prime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:rsa_private_parameters_message.q_prime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return q_prime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void rsa_private_parameters_message::unsafe_arena_set_allocated_q_prime(
    std::string* q_prime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (q_prime != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  q_prime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      q_prime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rsa_private_parameters_message.q_prime)
}

// -------------------------------------------------------------------

// point_message

// optional bytes x = 1;
inline bool point_message::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool point_message::has_x() const {
  return _internal_has_x();
}
inline void point_message::clear_x() {
  x_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& point_message::x() const {
  // @@protoc_insertion_point(field_get:point_message.x)
  return _internal_x();
}
inline void point_message::set_x(const std::string& value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:point_message.x)
}
inline std::string* point_message::mutable_x() {
  // @@protoc_insertion_point(field_mutable:point_message.x)
  return _internal_mutable_x();
}
inline const std::string& point_message::_internal_x() const {
  return x_.Get();
}
inline void point_message::_internal_set_x(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  x_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void point_message::set_x(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  x_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:point_message.x)
}
inline void point_message::set_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  x_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:point_message.x)
}
inline void point_message::set_x(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  x_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:point_message.x)
}
inline std::string* point_message::_internal_mutable_x() {
  _has_bits_[0] |= 0x00000001u;
  return x_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* point_message::release_x() {
  // @@protoc_insertion_point(field_release:point_message.x)
  if (!_internal_has_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return x_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void point_message::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:point_message.x)
}
inline std::string* point_message::unsafe_arena_release_x() {
  // @@protoc_insertion_point(field_unsafe_arena_release:point_message.x)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return x_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void point_message::unsafe_arena_set_allocated_x(
    std::string* x) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (x != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      x, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:point_message.x)
}

// optional bytes y = 2;
inline bool point_message::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool point_message::has_y() const {
  return _internal_has_y();
}
inline void point_message::clear_y() {
  y_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& point_message::y() const {
  // @@protoc_insertion_point(field_get:point_message.y)
  return _internal_y();
}
inline void point_message::set_y(const std::string& value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:point_message.y)
}
inline std::string* point_message::mutable_y() {
  // @@protoc_insertion_point(field_mutable:point_message.y)
  return _internal_mutable_y();
}
inline const std::string& point_message::_internal_y() const {
  return y_.Get();
}
inline void point_message::_internal_set_y(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void point_message::set_y(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  y_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:point_message.y)
}
inline void point_message::set_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:point_message.y)
}
inline void point_message::set_y(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  y_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:point_message.y)
}
inline std::string* point_message::_internal_mutable_y() {
  _has_bits_[0] |= 0x00000002u;
  return y_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* point_message::release_y() {
  // @@protoc_insertion_point(field_release:point_message.y)
  if (!_internal_has_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return y_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void point_message::set_allocated_y(std::string* y) {
  if (y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  y_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), y,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:point_message.y)
}
inline std::string* point_message::unsafe_arena_release_y() {
  // @@protoc_insertion_point(field_unsafe_arena_release:point_message.y)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return y_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void point_message::unsafe_arena_set_allocated_y(
    std::string* y) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  y_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      y, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:point_message.y)
}

// -------------------------------------------------------------------

// ecc_public_parameters_message

// optional string curve_name = 1;
inline bool ecc_public_parameters_message::_internal_has_curve_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ecc_public_parameters_message::has_curve_name() const {
  return _internal_has_curve_name();
}
inline void ecc_public_parameters_message::clear_curve_name() {
  curve_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ecc_public_parameters_message::curve_name() const {
  // @@protoc_insertion_point(field_get:ecc_public_parameters_message.curve_name)
  return _internal_curve_name();
}
inline void ecc_public_parameters_message::set_curve_name(const std::string& value) {
  _internal_set_curve_name(value);
  // @@protoc_insertion_point(field_set:ecc_public_parameters_message.curve_name)
}
inline std::string* ecc_public_parameters_message::mutable_curve_name() {
  // @@protoc_insertion_point(field_mutable:ecc_public_parameters_message.curve_name)
  return _internal_mutable_curve_name();
}
inline const std::string& ecc_public_parameters_message::_internal_curve_name() const {
  return curve_name_.Get();
}
inline void ecc_public_parameters_message::_internal_set_curve_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  curve_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ecc_public_parameters_message::set_curve_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  curve_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecc_public_parameters_message.curve_name)
}
inline void ecc_public_parameters_message::set_curve_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  curve_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ecc_public_parameters_message.curve_name)
}
inline void ecc_public_parameters_message::set_curve_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  curve_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecc_public_parameters_message.curve_name)
}
inline std::string* ecc_public_parameters_message::_internal_mutable_curve_name() {
  _has_bits_[0] |= 0x00000001u;
  return curve_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ecc_public_parameters_message::release_curve_name() {
  // @@protoc_insertion_point(field_release:ecc_public_parameters_message.curve_name)
  if (!_internal_has_curve_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return curve_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ecc_public_parameters_message::set_allocated_curve_name(std::string* curve_name) {
  if (curve_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  curve_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), curve_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecc_public_parameters_message.curve_name)
}
inline std::string* ecc_public_parameters_message::unsafe_arena_release_curve_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ecc_public_parameters_message.curve_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return curve_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ecc_public_parameters_message::unsafe_arena_set_allocated_curve_name(
    std::string* curve_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (curve_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  curve_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      curve_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ecc_public_parameters_message.curve_name)
}

// optional bytes p = 2;
inline bool ecc_public_parameters_message::_internal_has_p() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ecc_public_parameters_message::has_p() const {
  return _internal_has_p();
}
inline void ecc_public_parameters_message::clear_p() {
  p_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ecc_public_parameters_message::p() const {
  // @@protoc_insertion_point(field_get:ecc_public_parameters_message.p)
  return _internal_p();
}
inline void ecc_public_parameters_message::set_p(const std::string& value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:ecc_public_parameters_message.p)
}
inline std::string* ecc_public_parameters_message::mutable_p() {
  // @@protoc_insertion_point(field_mutable:ecc_public_parameters_message.p)
  return _internal_mutable_p();
}
inline const std::string& ecc_public_parameters_message::_internal_p() const {
  return p_.Get();
}
inline void ecc_public_parameters_message::_internal_set_p(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ecc_public_parameters_message::set_p(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  p_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecc_public_parameters_message.p)
}
inline void ecc_public_parameters_message::set_p(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ecc_public_parameters_message.p)
}
inline void ecc_public_parameters_message::set_p(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  p_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecc_public_parameters_message.p)
}
inline std::string* ecc_public_parameters_message::_internal_mutable_p() {
  _has_bits_[0] |= 0x00000002u;
  return p_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ecc_public_parameters_message::release_p() {
  // @@protoc_insertion_point(field_release:ecc_public_parameters_message.p)
  if (!_internal_has_p()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return p_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ecc_public_parameters_message::set_allocated_p(std::string* p) {
  if (p != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  p_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecc_public_parameters_message.p)
}
inline std::string* ecc_public_parameters_message::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ecc_public_parameters_message.p)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return p_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ecc_public_parameters_message::unsafe_arena_set_allocated_p(
    std::string* p) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (p != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  p_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      p, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ecc_public_parameters_message.p)
}

// optional .point_message public_point = 3;
inline bool ecc_public_parameters_message::_internal_has_public_point() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || public_point_ != nullptr);
  return value;
}
inline bool ecc_public_parameters_message::has_public_point() const {
  return _internal_has_public_point();
}
inline void ecc_public_parameters_message::clear_public_point() {
  if (public_point_ != nullptr) public_point_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::point_message& ecc_public_parameters_message::_internal_public_point() const {
  const ::point_message* p = public_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::point_message*>(
      &::_point_message_default_instance_);
}
inline const ::point_message& ecc_public_parameters_message::public_point() const {
  // @@protoc_insertion_point(field_get:ecc_public_parameters_message.public_point)
  return _internal_public_point();
}
inline void ecc_public_parameters_message::unsafe_arena_set_allocated_public_point(
    ::point_message* public_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_point_);
  }
  public_point_ = public_point;
  if (public_point) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ecc_public_parameters_message.public_point)
}
inline ::point_message* ecc_public_parameters_message::release_public_point() {
  auto temp = unsafe_arena_release_public_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::point_message* ecc_public_parameters_message::unsafe_arena_release_public_point() {
  // @@protoc_insertion_point(field_release:ecc_public_parameters_message.public_point)
  _has_bits_[0] &= ~0x00000004u;
  ::point_message* temp = public_point_;
  public_point_ = nullptr;
  return temp;
}
inline ::point_message* ecc_public_parameters_message::_internal_mutable_public_point() {
  _has_bits_[0] |= 0x00000004u;
  if (public_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::point_message>(GetArena());
    public_point_ = p;
  }
  return public_point_;
}
inline ::point_message* ecc_public_parameters_message::mutable_public_point() {
  // @@protoc_insertion_point(field_mutable:ecc_public_parameters_message.public_point)
  return _internal_mutable_public_point();
}
inline void ecc_public_parameters_message::set_allocated_public_point(::point_message* public_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete public_point_;
  }
  if (public_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(public_point);
    if (message_arena != submessage_arena) {
      public_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  public_point_ = public_point;
  // @@protoc_insertion_point(field_set_allocated:ecc_public_parameters_message.public_point)
}

// -------------------------------------------------------------------

// ecc_private_parameters_message

// optional .point_message private_point = 1;
inline bool ecc_private_parameters_message::_internal_has_private_point() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || private_point_ != nullptr);
  return value;
}
inline bool ecc_private_parameters_message::has_private_point() const {
  return _internal_has_private_point();
}
inline void ecc_private_parameters_message::clear_private_point() {
  if (private_point_ != nullptr) private_point_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::point_message& ecc_private_parameters_message::_internal_private_point() const {
  const ::point_message* p = private_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::point_message*>(
      &::_point_message_default_instance_);
}
inline const ::point_message& ecc_private_parameters_message::private_point() const {
  // @@protoc_insertion_point(field_get:ecc_private_parameters_message.private_point)
  return _internal_private_point();
}
inline void ecc_private_parameters_message::unsafe_arena_set_allocated_private_point(
    ::point_message* private_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(private_point_);
  }
  private_point_ = private_point;
  if (private_point) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ecc_private_parameters_message.private_point)
}
inline ::point_message* ecc_private_parameters_message::release_private_point() {
  auto temp = unsafe_arena_release_private_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::point_message* ecc_private_parameters_message::unsafe_arena_release_private_point() {
  // @@protoc_insertion_point(field_release:ecc_private_parameters_message.private_point)
  _has_bits_[0] &= ~0x00000002u;
  ::point_message* temp = private_point_;
  private_point_ = nullptr;
  return temp;
}
inline ::point_message* ecc_private_parameters_message::_internal_mutable_private_point() {
  _has_bits_[0] |= 0x00000002u;
  if (private_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::point_message>(GetArena());
    private_point_ = p;
  }
  return private_point_;
}
inline ::point_message* ecc_private_parameters_message::mutable_private_point() {
  // @@protoc_insertion_point(field_mutable:ecc_private_parameters_message.private_point)
  return _internal_mutable_private_point();
}
inline void ecc_private_parameters_message::set_allocated_private_point(::point_message* private_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete private_point_;
  }
  if (private_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(private_point);
    if (message_arena != submessage_arena) {
      private_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, private_point, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  private_point_ = private_point;
  // @@protoc_insertion_point(field_set_allocated:ecc_private_parameters_message.private_point)
}

// optional bytes private_multiplier = 2;
inline bool ecc_private_parameters_message::_internal_has_private_multiplier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ecc_private_parameters_message::has_private_multiplier() const {
  return _internal_has_private_multiplier();
}
inline void ecc_private_parameters_message::clear_private_multiplier() {
  private_multiplier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ecc_private_parameters_message::private_multiplier() const {
  // @@protoc_insertion_point(field_get:ecc_private_parameters_message.private_multiplier)
  return _internal_private_multiplier();
}
inline void ecc_private_parameters_message::set_private_multiplier(const std::string& value) {
  _internal_set_private_multiplier(value);
  // @@protoc_insertion_point(field_set:ecc_private_parameters_message.private_multiplier)
}
inline std::string* ecc_private_parameters_message::mutable_private_multiplier() {
  // @@protoc_insertion_point(field_mutable:ecc_private_parameters_message.private_multiplier)
  return _internal_mutable_private_multiplier();
}
inline const std::string& ecc_private_parameters_message::_internal_private_multiplier() const {
  return private_multiplier_.Get();
}
inline void ecc_private_parameters_message::_internal_set_private_multiplier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ecc_private_parameters_message::set_private_multiplier(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  private_multiplier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ecc_private_parameters_message.private_multiplier)
}
inline void ecc_private_parameters_message::set_private_multiplier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  private_multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ecc_private_parameters_message.private_multiplier)
}
inline void ecc_private_parameters_message::set_private_multiplier(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  private_multiplier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ecc_private_parameters_message.private_multiplier)
}
inline std::string* ecc_private_parameters_message::_internal_mutable_private_multiplier() {
  _has_bits_[0] |= 0x00000001u;
  return private_multiplier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ecc_private_parameters_message::release_private_multiplier() {
  // @@protoc_insertion_point(field_release:ecc_private_parameters_message.private_multiplier)
  if (!_internal_has_private_multiplier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return private_multiplier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ecc_private_parameters_message::set_allocated_private_multiplier(std::string* private_multiplier) {
  if (private_multiplier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_multiplier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), private_multiplier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ecc_private_parameters_message.private_multiplier)
}
inline std::string* ecc_private_parameters_message::unsafe_arena_release_private_multiplier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ecc_private_parameters_message.private_multiplier)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return private_multiplier_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ecc_private_parameters_message::unsafe_arena_set_allocated_private_multiplier(
    std::string* private_multiplier) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (private_multiplier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_multiplier_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      private_multiplier, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ecc_private_parameters_message.private_multiplier)
}

// -------------------------------------------------------------------

// hmac_parameters_message

// optional string algorithm = 1;
inline bool hmac_parameters_message::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool hmac_parameters_message::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void hmac_parameters_message::clear_algorithm() {
  algorithm_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& hmac_parameters_message::algorithm() const {
  // @@protoc_insertion_point(field_get:hmac_parameters_message.algorithm)
  return _internal_algorithm();
}
inline void hmac_parameters_message::set_algorithm(const std::string& value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:hmac_parameters_message.algorithm)
}
inline std::string* hmac_parameters_message::mutable_algorithm() {
  // @@protoc_insertion_point(field_mutable:hmac_parameters_message.algorithm)
  return _internal_mutable_algorithm();
}
inline const std::string& hmac_parameters_message::_internal_algorithm() const {
  return algorithm_.Get();
}
inline void hmac_parameters_message::_internal_set_algorithm(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void hmac_parameters_message::set_algorithm(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hmac_parameters_message.algorithm)
}
inline void hmac_parameters_message::set_algorithm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hmac_parameters_message.algorithm)
}
inline void hmac_parameters_message::set_algorithm(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hmac_parameters_message.algorithm)
}
inline std::string* hmac_parameters_message::_internal_mutable_algorithm() {
  _has_bits_[0] |= 0x00000001u;
  return algorithm_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* hmac_parameters_message::release_algorithm() {
  // @@protoc_insertion_point(field_release:hmac_parameters_message.algorithm)
  if (!_internal_has_algorithm()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return algorithm_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void hmac_parameters_message::set_allocated_algorithm(std::string* algorithm) {
  if (algorithm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  algorithm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hmac_parameters_message.algorithm)
}
inline std::string* hmac_parameters_message::unsafe_arena_release_algorithm() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hmac_parameters_message.algorithm)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return algorithm_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void hmac_parameters_message::unsafe_arena_set_allocated_algorithm(
    std::string* algorithm) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  algorithm_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hmac_parameters_message.algorithm)
}

// optional int32 size = 2;
inline bool hmac_parameters_message::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool hmac_parameters_message::has_size() const {
  return _internal_has_size();
}
inline void hmac_parameters_message::clear_size() {
  size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hmac_parameters_message::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 hmac_parameters_message::size() const {
  // @@protoc_insertion_point(field_get:hmac_parameters_message.size)
  return _internal_size();
}
inline void hmac_parameters_message::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  size_ = value;
}
inline void hmac_parameters_message::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:hmac_parameters_message.size)
}

// optional bytes secret = 3;
inline bool hmac_parameters_message::_internal_has_secret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool hmac_parameters_message::has_secret() const {
  return _internal_has_secret();
}
inline void hmac_parameters_message::clear_secret() {
  secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& hmac_parameters_message::secret() const {
  // @@protoc_insertion_point(field_get:hmac_parameters_message.secret)
  return _internal_secret();
}
inline void hmac_parameters_message::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:hmac_parameters_message.secret)
}
inline std::string* hmac_parameters_message::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:hmac_parameters_message.secret)
  return _internal_mutable_secret();
}
inline const std::string& hmac_parameters_message::_internal_secret() const {
  return secret_.Get();
}
inline void hmac_parameters_message::_internal_set_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void hmac_parameters_message::set_secret(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:hmac_parameters_message.secret)
}
inline void hmac_parameters_message::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:hmac_parameters_message.secret)
}
inline void hmac_parameters_message::set_secret(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:hmac_parameters_message.secret)
}
inline std::string* hmac_parameters_message::_internal_mutable_secret() {
  _has_bits_[0] |= 0x00000002u;
  return secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* hmac_parameters_message::release_secret() {
  // @@protoc_insertion_point(field_release:hmac_parameters_message.secret)
  if (!_internal_has_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void hmac_parameters_message::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:hmac_parameters_message.secret)
}
inline std::string* hmac_parameters_message::unsafe_arena_release_secret() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hmac_parameters_message.secret)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return secret_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void hmac_parameters_message::unsafe_arena_set_allocated_secret(
    std::string* secret) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (secret != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  secret_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      secret, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hmac_parameters_message.secret)
}

// -------------------------------------------------------------------

// key_message

// optional string family_type = 1;
inline bool key_message::_internal_has_family_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool key_message::has_family_type() const {
  return _internal_has_family_type();
}
inline void key_message::clear_family_type() {
  family_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& key_message::family_type() const {
  // @@protoc_insertion_point(field_get:key_message.family_type)
  return _internal_family_type();
}
inline void key_message::set_family_type(const std::string& value) {
  _internal_set_family_type(value);
  // @@protoc_insertion_point(field_set:key_message.family_type)
}
inline std::string* key_message::mutable_family_type() {
  // @@protoc_insertion_point(field_mutable:key_message.family_type)
  return _internal_mutable_family_type();
}
inline const std::string& key_message::_internal_family_type() const {
  return family_type_.Get();
}
inline void key_message::_internal_set_family_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  family_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void key_message::set_family_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  family_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:key_message.family_type)
}
inline void key_message::set_family_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  family_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:key_message.family_type)
}
inline void key_message::set_family_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  family_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:key_message.family_type)
}
inline std::string* key_message::_internal_mutable_family_type() {
  _has_bits_[0] |= 0x00000001u;
  return family_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* key_message::release_family_type() {
  // @@protoc_insertion_point(field_release:key_message.family_type)
  if (!_internal_has_family_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return family_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void key_message::set_allocated_family_type(std::string* family_type) {
  if (family_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  family_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), family_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:key_message.family_type)
}
inline std::string* key_message::unsafe_arena_release_family_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:key_message.family_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return family_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void key_message::unsafe_arena_set_allocated_family_type(
    std::string* family_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (family_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  family_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      family_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.family_type)
}

// optional string algorithm_type = 2;
inline bool key_message::_internal_has_algorithm_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool key_message::has_algorithm_type() const {
  return _internal_has_algorithm_type();
}
inline void key_message::clear_algorithm_type() {
  algorithm_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& key_message::algorithm_type() const {
  // @@protoc_insertion_point(field_get:key_message.algorithm_type)
  return _internal_algorithm_type();
}
inline void key_message::set_algorithm_type(const std::string& value) {
  _internal_set_algorithm_type(value);
  // @@protoc_insertion_point(field_set:key_message.algorithm_type)
}
inline std::string* key_message::mutable_algorithm_type() {
  // @@protoc_insertion_point(field_mutable:key_message.algorithm_type)
  return _internal_mutable_algorithm_type();
}
inline const std::string& key_message::_internal_algorithm_type() const {
  return algorithm_type_.Get();
}
inline void key_message::_internal_set_algorithm_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  algorithm_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void key_message::set_algorithm_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  algorithm_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:key_message.algorithm_type)
}
inline void key_message::set_algorithm_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  algorithm_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:key_message.algorithm_type)
}
inline void key_message::set_algorithm_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  algorithm_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:key_message.algorithm_type)
}
inline std::string* key_message::_internal_mutable_algorithm_type() {
  _has_bits_[0] |= 0x00000002u;
  return algorithm_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* key_message::release_algorithm_type() {
  // @@protoc_insertion_point(field_release:key_message.algorithm_type)
  if (!_internal_has_algorithm_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return algorithm_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void key_message::set_allocated_algorithm_type(std::string* algorithm_type) {
  if (algorithm_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  algorithm_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:key_message.algorithm_type)
}
inline std::string* key_message::unsafe_arena_release_algorithm_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:key_message.algorithm_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return algorithm_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void key_message::unsafe_arena_set_allocated_algorithm_type(
    std::string* algorithm_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  algorithm_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.algorithm_type)
}

// optional string key_name = 3;
inline bool key_message::_internal_has_key_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool key_message::has_key_name() const {
  return _internal_has_key_name();
}
inline void key_message::clear_key_name() {
  key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& key_message::key_name() const {
  // @@protoc_insertion_point(field_get:key_message.key_name)
  return _internal_key_name();
}
inline void key_message::set_key_name(const std::string& value) {
  _internal_set_key_name(value);
  // @@protoc_insertion_point(field_set:key_message.key_name)
}
inline std::string* key_message::mutable_key_name() {
  // @@protoc_insertion_point(field_mutable:key_message.key_name)
  return _internal_mutable_key_name();
}
inline const std::string& key_message::_internal_key_name() const {
  return key_name_.Get();
}
inline void key_message::_internal_set_key_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void key_message::set_key_name(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  key_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:key_message.key_name)
}
inline void key_message::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:key_message.key_name)
}
inline void key_message::set_key_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:key_message.key_name)
}
inline std::string* key_message::_internal_mutable_key_name() {
  _has_bits_[0] |= 0x00000004u;
  return key_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* key_message::release_key_name() {
  // @@protoc_insertion_point(field_release:key_message.key_name)
  if (!_internal_has_key_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return key_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void key_message::set_allocated_key_name(std::string* key_name) {
  if (key_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  key_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:key_message.key_name)
}
inline std::string* key_message::unsafe_arena_release_key_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:key_message.key_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return key_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void key_message::unsafe_arena_set_allocated_key_name(
    std::string* key_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  key_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.key_name)
}

// optional int32 key_size = 4;
inline bool key_message::_internal_has_key_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool key_message::has_key_size() const {
  return _internal_has_key_size();
}
inline void key_message::clear_key_size() {
  key_size_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 key_message::_internal_key_size() const {
  return key_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 key_message::key_size() const {
  // @@protoc_insertion_point(field_get:key_message.key_size)
  return _internal_key_size();
}
inline void key_message::_internal_set_key_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  key_size_ = value;
}
inline void key_message::set_key_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_size(value);
  // @@protoc_insertion_point(field_set:key_message.key_size)
}

// optional string purpose = 5;
inline bool key_message::_internal_has_purpose() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool key_message::has_purpose() const {
  return _internal_has_purpose();
}
inline void key_message::clear_purpose() {
  purpose_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& key_message::purpose() const {
  // @@protoc_insertion_point(field_get:key_message.purpose)
  return _internal_purpose();
}
inline void key_message::set_purpose(const std::string& value) {
  _internal_set_purpose(value);
  // @@protoc_insertion_point(field_set:key_message.purpose)
}
inline std::string* key_message::mutable_purpose() {
  // @@protoc_insertion_point(field_mutable:key_message.purpose)
  return _internal_mutable_purpose();
}
inline const std::string& key_message::_internal_purpose() const {
  return purpose_.Get();
}
inline void key_message::_internal_set_purpose(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void key_message::set_purpose(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  purpose_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:key_message.purpose)
}
inline void key_message::set_purpose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:key_message.purpose)
}
inline void key_message::set_purpose(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:key_message.purpose)
}
inline std::string* key_message::_internal_mutable_purpose() {
  _has_bits_[0] |= 0x00000008u;
  return purpose_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* key_message::release_purpose() {
  // @@protoc_insertion_point(field_release:key_message.purpose)
  if (!_internal_has_purpose()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return purpose_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void key_message::set_allocated_purpose(std::string* purpose) {
  if (purpose != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  purpose_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purpose,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:key_message.purpose)
}
inline std::string* key_message::unsafe_arena_release_purpose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:key_message.purpose)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return purpose_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void key_message::unsafe_arena_set_allocated_purpose(
    std::string* purpose) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (purpose != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  purpose_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      purpose, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.purpose)
}

// optional string notBefore = 6;
inline bool key_message::_internal_has_notbefore() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool key_message::has_notbefore() const {
  return _internal_has_notbefore();
}
inline void key_message::clear_notbefore() {
  notbefore_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& key_message::notbefore() const {
  // @@protoc_insertion_point(field_get:key_message.notBefore)
  return _internal_notbefore();
}
inline void key_message::set_notbefore(const std::string& value) {
  _internal_set_notbefore(value);
  // @@protoc_insertion_point(field_set:key_message.notBefore)
}
inline std::string* key_message::mutable_notbefore() {
  // @@protoc_insertion_point(field_mutable:key_message.notBefore)
  return _internal_mutable_notbefore();
}
inline const std::string& key_message::_internal_notbefore() const {
  return notbefore_.Get();
}
inline void key_message::_internal_set_notbefore(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  notbefore_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void key_message::set_notbefore(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  notbefore_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:key_message.notBefore)
}
inline void key_message::set_notbefore(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  notbefore_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:key_message.notBefore)
}
inline void key_message::set_notbefore(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  notbefore_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:key_message.notBefore)
}
inline std::string* key_message::_internal_mutable_notbefore() {
  _has_bits_[0] |= 0x00000010u;
  return notbefore_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* key_message::release_notbefore() {
  // @@protoc_insertion_point(field_release:key_message.notBefore)
  if (!_internal_has_notbefore()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return notbefore_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void key_message::set_allocated_notbefore(std::string* notbefore) {
  if (notbefore != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  notbefore_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notbefore,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:key_message.notBefore)
}
inline std::string* key_message::unsafe_arena_release_notbefore() {
  // @@protoc_insertion_point(field_unsafe_arena_release:key_message.notBefore)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return notbefore_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void key_message::unsafe_arena_set_allocated_notbefore(
    std::string* notbefore) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (notbefore != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  notbefore_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      notbefore, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.notBefore)
}

// optional string notAfter = 7;
inline bool key_message::_internal_has_notafter() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool key_message::has_notafter() const {
  return _internal_has_notafter();
}
inline void key_message::clear_notafter() {
  notafter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& key_message::notafter() const {
  // @@protoc_insertion_point(field_get:key_message.notAfter)
  return _internal_notafter();
}
inline void key_message::set_notafter(const std::string& value) {
  _internal_set_notafter(value);
  // @@protoc_insertion_point(field_set:key_message.notAfter)
}
inline std::string* key_message::mutable_notafter() {
  // @@protoc_insertion_point(field_mutable:key_message.notAfter)
  return _internal_mutable_notafter();
}
inline const std::string& key_message::_internal_notafter() const {
  return notafter_.Get();
}
inline void key_message::_internal_set_notafter(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  notafter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void key_message::set_notafter(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  notafter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:key_message.notAfter)
}
inline void key_message::set_notafter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  notafter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:key_message.notAfter)
}
inline void key_message::set_notafter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  notafter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:key_message.notAfter)
}
inline std::string* key_message::_internal_mutable_notafter() {
  _has_bits_[0] |= 0x00000020u;
  return notafter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* key_message::release_notafter() {
  // @@protoc_insertion_point(field_release:key_message.notAfter)
  if (!_internal_has_notafter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return notafter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void key_message::set_allocated_notafter(std::string* notafter) {
  if (notafter != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  notafter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notafter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:key_message.notAfter)
}
inline std::string* key_message::unsafe_arena_release_notafter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:key_message.notAfter)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return notafter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void key_message::unsafe_arena_set_allocated_notafter(
    std::string* notafter) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (notafter != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  notafter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      notafter, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.notAfter)
}

// optional bytes secret = 8;
inline bool key_message::_internal_has_secret() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool key_message::has_secret() const {
  return _internal_has_secret();
}
inline void key_message::clear_secret() {
  secret_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& key_message::secret() const {
  // @@protoc_insertion_point(field_get:key_message.secret)
  return _internal_secret();
}
inline void key_message::set_secret(const std::string& value) {
  _internal_set_secret(value);
  // @@protoc_insertion_point(field_set:key_message.secret)
}
inline std::string* key_message::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:key_message.secret)
  return _internal_mutable_secret();
}
inline const std::string& key_message::_internal_secret() const {
  return secret_.Get();
}
inline void key_message::_internal_set_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void key_message::set_secret(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  secret_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:key_message.secret)
}
inline void key_message::set_secret(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:key_message.secret)
}
inline void key_message::set_secret(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  secret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:key_message.secret)
}
inline std::string* key_message::_internal_mutable_secret() {
  _has_bits_[0] |= 0x00000040u;
  return secret_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* key_message::release_secret() {
  // @@protoc_insertion_point(field_release:key_message.secret)
  if (!_internal_has_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return secret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void key_message::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:key_message.secret)
}
inline std::string* key_message::unsafe_arena_release_secret() {
  // @@protoc_insertion_point(field_unsafe_arena_release:key_message.secret)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return secret_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void key_message::unsafe_arena_set_allocated_secret(
    std::string* secret) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (secret != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  secret_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      secret, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.secret)
}

// optional .rsa_public_parameters_message rsa_pub = 9;
inline bool key_message::_internal_has_rsa_pub() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || rsa_pub_ != nullptr);
  return value;
}
inline bool key_message::has_rsa_pub() const {
  return _internal_has_rsa_pub();
}
inline void key_message::clear_rsa_pub() {
  if (rsa_pub_ != nullptr) rsa_pub_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::rsa_public_parameters_message& key_message::_internal_rsa_pub() const {
  const ::rsa_public_parameters_message* p = rsa_pub_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rsa_public_parameters_message*>(
      &::_rsa_public_parameters_message_default_instance_);
}
inline const ::rsa_public_parameters_message& key_message::rsa_pub() const {
  // @@protoc_insertion_point(field_get:key_message.rsa_pub)
  return _internal_rsa_pub();
}
inline void key_message::unsafe_arena_set_allocated_rsa_pub(
    ::rsa_public_parameters_message* rsa_pub) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rsa_pub_);
  }
  rsa_pub_ = rsa_pub;
  if (rsa_pub) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.rsa_pub)
}
inline ::rsa_public_parameters_message* key_message::release_rsa_pub() {
  auto temp = unsafe_arena_release_rsa_pub();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rsa_public_parameters_message* key_message::unsafe_arena_release_rsa_pub() {
  // @@protoc_insertion_point(field_release:key_message.rsa_pub)
  _has_bits_[0] &= ~0x00000080u;
  ::rsa_public_parameters_message* temp = rsa_pub_;
  rsa_pub_ = nullptr;
  return temp;
}
inline ::rsa_public_parameters_message* key_message::_internal_mutable_rsa_pub() {
  _has_bits_[0] |= 0x00000080u;
  if (rsa_pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::rsa_public_parameters_message>(GetArena());
    rsa_pub_ = p;
  }
  return rsa_pub_;
}
inline ::rsa_public_parameters_message* key_message::mutable_rsa_pub() {
  // @@protoc_insertion_point(field_mutable:key_message.rsa_pub)
  return _internal_mutable_rsa_pub();
}
inline void key_message::set_allocated_rsa_pub(::rsa_public_parameters_message* rsa_pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rsa_pub_;
  }
  if (rsa_pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rsa_pub);
    if (message_arena != submessage_arena) {
      rsa_pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rsa_pub, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  rsa_pub_ = rsa_pub;
  // @@protoc_insertion_point(field_set_allocated:key_message.rsa_pub)
}

// optional .rsa_private_parameters_message rsa_priv = 10;
inline bool key_message::_internal_has_rsa_priv() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || rsa_priv_ != nullptr);
  return value;
}
inline bool key_message::has_rsa_priv() const {
  return _internal_has_rsa_priv();
}
inline void key_message::clear_rsa_priv() {
  if (rsa_priv_ != nullptr) rsa_priv_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::rsa_private_parameters_message& key_message::_internal_rsa_priv() const {
  const ::rsa_private_parameters_message* p = rsa_priv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::rsa_private_parameters_message*>(
      &::_rsa_private_parameters_message_default_instance_);
}
inline const ::rsa_private_parameters_message& key_message::rsa_priv() const {
  // @@protoc_insertion_point(field_get:key_message.rsa_priv)
  return _internal_rsa_priv();
}
inline void key_message::unsafe_arena_set_allocated_rsa_priv(
    ::rsa_private_parameters_message* rsa_priv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rsa_priv_);
  }
  rsa_priv_ = rsa_priv;
  if (rsa_priv) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.rsa_priv)
}
inline ::rsa_private_parameters_message* key_message::release_rsa_priv() {
  auto temp = unsafe_arena_release_rsa_priv();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rsa_private_parameters_message* key_message::unsafe_arena_release_rsa_priv() {
  // @@protoc_insertion_point(field_release:key_message.rsa_priv)
  _has_bits_[0] &= ~0x00000100u;
  ::rsa_private_parameters_message* temp = rsa_priv_;
  rsa_priv_ = nullptr;
  return temp;
}
inline ::rsa_private_parameters_message* key_message::_internal_mutable_rsa_priv() {
  _has_bits_[0] |= 0x00000100u;
  if (rsa_priv_ == nullptr) {
    auto* p = CreateMaybeMessage<::rsa_private_parameters_message>(GetArena());
    rsa_priv_ = p;
  }
  return rsa_priv_;
}
inline ::rsa_private_parameters_message* key_message::mutable_rsa_priv() {
  // @@protoc_insertion_point(field_mutable:key_message.rsa_priv)
  return _internal_mutable_rsa_priv();
}
inline void key_message::set_allocated_rsa_priv(::rsa_private_parameters_message* rsa_priv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rsa_priv_;
  }
  if (rsa_priv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rsa_priv);
    if (message_arena != submessage_arena) {
      rsa_priv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rsa_priv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  rsa_priv_ = rsa_priv;
  // @@protoc_insertion_point(field_set_allocated:key_message.rsa_priv)
}

// optional .ecc_public_parameters_message ecc_pub = 11;
inline bool key_message::_internal_has_ecc_pub() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || ecc_pub_ != nullptr);
  return value;
}
inline bool key_message::has_ecc_pub() const {
  return _internal_has_ecc_pub();
}
inline void key_message::clear_ecc_pub() {
  if (ecc_pub_ != nullptr) ecc_pub_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ecc_public_parameters_message& key_message::_internal_ecc_pub() const {
  const ::ecc_public_parameters_message* p = ecc_pub_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ecc_public_parameters_message*>(
      &::_ecc_public_parameters_message_default_instance_);
}
inline const ::ecc_public_parameters_message& key_message::ecc_pub() const {
  // @@protoc_insertion_point(field_get:key_message.ecc_pub)
  return _internal_ecc_pub();
}
inline void key_message::unsafe_arena_set_allocated_ecc_pub(
    ::ecc_public_parameters_message* ecc_pub) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ecc_pub_);
  }
  ecc_pub_ = ecc_pub;
  if (ecc_pub) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.ecc_pub)
}
inline ::ecc_public_parameters_message* key_message::release_ecc_pub() {
  auto temp = unsafe_arena_release_ecc_pub();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ecc_public_parameters_message* key_message::unsafe_arena_release_ecc_pub() {
  // @@protoc_insertion_point(field_release:key_message.ecc_pub)
  _has_bits_[0] &= ~0x00000200u;
  ::ecc_public_parameters_message* temp = ecc_pub_;
  ecc_pub_ = nullptr;
  return temp;
}
inline ::ecc_public_parameters_message* key_message::_internal_mutable_ecc_pub() {
  _has_bits_[0] |= 0x00000200u;
  if (ecc_pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::ecc_public_parameters_message>(GetArena());
    ecc_pub_ = p;
  }
  return ecc_pub_;
}
inline ::ecc_public_parameters_message* key_message::mutable_ecc_pub() {
  // @@protoc_insertion_point(field_mutable:key_message.ecc_pub)
  return _internal_mutable_ecc_pub();
}
inline void key_message::set_allocated_ecc_pub(::ecc_public_parameters_message* ecc_pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ecc_pub_;
  }
  if (ecc_pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ecc_pub);
    if (message_arena != submessage_arena) {
      ecc_pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecc_pub, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  ecc_pub_ = ecc_pub;
  // @@protoc_insertion_point(field_set_allocated:key_message.ecc_pub)
}

// optional .ecc_private_parameters_message ecc_priv = 12;
inline bool key_message::_internal_has_ecc_priv() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || ecc_priv_ != nullptr);
  return value;
}
inline bool key_message::has_ecc_priv() const {
  return _internal_has_ecc_priv();
}
inline void key_message::clear_ecc_priv() {
  if (ecc_priv_ != nullptr) ecc_priv_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::ecc_private_parameters_message& key_message::_internal_ecc_priv() const {
  const ::ecc_private_parameters_message* p = ecc_priv_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ecc_private_parameters_message*>(
      &::_ecc_private_parameters_message_default_instance_);
}
inline const ::ecc_private_parameters_message& key_message::ecc_priv() const {
  // @@protoc_insertion_point(field_get:key_message.ecc_priv)
  return _internal_ecc_priv();
}
inline void key_message::unsafe_arena_set_allocated_ecc_priv(
    ::ecc_private_parameters_message* ecc_priv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ecc_priv_);
  }
  ecc_priv_ = ecc_priv;
  if (ecc_priv) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:key_message.ecc_priv)
}
inline ::ecc_private_parameters_message* key_message::release_ecc_priv() {
  auto temp = unsafe_arena_release_ecc_priv();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ecc_private_parameters_message* key_message::unsafe_arena_release_ecc_priv() {
  // @@protoc_insertion_point(field_release:key_message.ecc_priv)
  _has_bits_[0] &= ~0x00000400u;
  ::ecc_private_parameters_message* temp = ecc_priv_;
  ecc_priv_ = nullptr;
  return temp;
}
inline ::ecc_private_parameters_message* key_message::_internal_mutable_ecc_priv() {
  _has_bits_[0] |= 0x00000400u;
  if (ecc_priv_ == nullptr) {
    auto* p = CreateMaybeMessage<::ecc_private_parameters_message>(GetArena());
    ecc_priv_ = p;
  }
  return ecc_priv_;
}
inline ::ecc_private_parameters_message* key_message::mutable_ecc_priv() {
  // @@protoc_insertion_point(field_mutable:key_message.ecc_priv)
  return _internal_mutable_ecc_priv();
}
inline void key_message::set_allocated_ecc_priv(::ecc_private_parameters_message* ecc_priv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ecc_priv_;
  }
  if (ecc_priv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ecc_priv);
    if (message_arena != submessage_arena) {
      ecc_priv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecc_priv, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  ecc_priv_ = ecc_priv;
  // @@protoc_insertion_point(field_set_allocated:key_message.ecc_priv)
}

// -------------------------------------------------------------------

// scheme_message

// optional string scheme_type = 1;
inline bool scheme_message::_internal_has_scheme_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool scheme_message::has_scheme_type() const {
  return _internal_has_scheme_type();
}
inline void scheme_message::clear_scheme_type() {
  scheme_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& scheme_message::scheme_type() const {
  // @@protoc_insertion_point(field_get:scheme_message.scheme_type)
  return _internal_scheme_type();
}
inline void scheme_message::set_scheme_type(const std::string& value) {
  _internal_set_scheme_type(value);
  // @@protoc_insertion_point(field_set:scheme_message.scheme_type)
}
inline std::string* scheme_message::mutable_scheme_type() {
  // @@protoc_insertion_point(field_mutable:scheme_message.scheme_type)
  return _internal_mutable_scheme_type();
}
inline const std::string& scheme_message::_internal_scheme_type() const {
  return scheme_type_.Get();
}
inline void scheme_message::_internal_set_scheme_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scheme_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void scheme_message::set_scheme_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scheme_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:scheme_message.scheme_type)
}
inline void scheme_message::set_scheme_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scheme_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:scheme_message.scheme_type)
}
inline void scheme_message::set_scheme_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scheme_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:scheme_message.scheme_type)
}
inline std::string* scheme_message::_internal_mutable_scheme_type() {
  _has_bits_[0] |= 0x00000001u;
  return scheme_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* scheme_message::release_scheme_type() {
  // @@protoc_insertion_point(field_release:scheme_message.scheme_type)
  if (!_internal_has_scheme_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scheme_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void scheme_message::set_allocated_scheme_type(std::string* scheme_type) {
  if (scheme_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheme_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheme_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:scheme_message.scheme_type)
}
inline std::string* scheme_message::unsafe_arena_release_scheme_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:scheme_message.scheme_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return scheme_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void scheme_message::unsafe_arena_set_allocated_scheme_type(
    std::string* scheme_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scheme_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheme_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scheme_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:scheme_message.scheme_type)
}

// optional string scheme_instance_identifier = 2;
inline bool scheme_message::_internal_has_scheme_instance_identifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool scheme_message::has_scheme_instance_identifier() const {
  return _internal_has_scheme_instance_identifier();
}
inline void scheme_message::clear_scheme_instance_identifier() {
  scheme_instance_identifier_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& scheme_message::scheme_instance_identifier() const {
  // @@protoc_insertion_point(field_get:scheme_message.scheme_instance_identifier)
  return _internal_scheme_instance_identifier();
}
inline void scheme_message::set_scheme_instance_identifier(const std::string& value) {
  _internal_set_scheme_instance_identifier(value);
  // @@protoc_insertion_point(field_set:scheme_message.scheme_instance_identifier)
}
inline std::string* scheme_message::mutable_scheme_instance_identifier() {
  // @@protoc_insertion_point(field_mutable:scheme_message.scheme_instance_identifier)
  return _internal_mutable_scheme_instance_identifier();
}
inline const std::string& scheme_message::_internal_scheme_instance_identifier() const {
  return scheme_instance_identifier_.Get();
}
inline void scheme_message::_internal_set_scheme_instance_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  scheme_instance_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void scheme_message::set_scheme_instance_identifier(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  scheme_instance_identifier_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:scheme_message.scheme_instance_identifier)
}
inline void scheme_message::set_scheme_instance_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  scheme_instance_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:scheme_message.scheme_instance_identifier)
}
inline void scheme_message::set_scheme_instance_identifier(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  scheme_instance_identifier_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:scheme_message.scheme_instance_identifier)
}
inline std::string* scheme_message::_internal_mutable_scheme_instance_identifier() {
  _has_bits_[0] |= 0x00000002u;
  return scheme_instance_identifier_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* scheme_message::release_scheme_instance_identifier() {
  // @@protoc_insertion_point(field_release:scheme_message.scheme_instance_identifier)
  if (!_internal_has_scheme_instance_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return scheme_instance_identifier_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void scheme_message::set_allocated_scheme_instance_identifier(std::string* scheme_instance_identifier) {
  if (scheme_instance_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scheme_instance_identifier_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheme_instance_identifier,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:scheme_message.scheme_instance_identifier)
}
inline std::string* scheme_message::unsafe_arena_release_scheme_instance_identifier() {
  // @@protoc_insertion_point(field_unsafe_arena_release:scheme_message.scheme_instance_identifier)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return scheme_instance_identifier_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void scheme_message::unsafe_arena_set_allocated_scheme_instance_identifier(
    std::string* scheme_instance_identifier) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (scheme_instance_identifier != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scheme_instance_identifier_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      scheme_instance_identifier, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:scheme_message.scheme_instance_identifier)
}

// optional .key_message encryption_key = 3;
inline bool scheme_message::_internal_has_encryption_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || encryption_key_ != nullptr);
  return value;
}
inline bool scheme_message::has_encryption_key() const {
  return _internal_has_encryption_key();
}
inline void scheme_message::clear_encryption_key() {
  if (encryption_key_ != nullptr) encryption_key_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::key_message& scheme_message::_internal_encryption_key() const {
  const ::key_message* p = encryption_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::key_message*>(
      &::_key_message_default_instance_);
}
inline const ::key_message& scheme_message::encryption_key() const {
  // @@protoc_insertion_point(field_get:scheme_message.encryption_key)
  return _internal_encryption_key();
}
inline void scheme_message::unsafe_arena_set_allocated_encryption_key(
    ::key_message* encryption_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(encryption_key_);
  }
  encryption_key_ = encryption_key;
  if (encryption_key) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:scheme_message.encryption_key)
}
inline ::key_message* scheme_message::release_encryption_key() {
  auto temp = unsafe_arena_release_encryption_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::key_message* scheme_message::unsafe_arena_release_encryption_key() {
  // @@protoc_insertion_point(field_release:scheme_message.encryption_key)
  _has_bits_[0] &= ~0x00000008u;
  ::key_message* temp = encryption_key_;
  encryption_key_ = nullptr;
  return temp;
}
inline ::key_message* scheme_message::_internal_mutable_encryption_key() {
  _has_bits_[0] |= 0x00000008u;
  if (encryption_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::key_message>(GetArena());
    encryption_key_ = p;
  }
  return encryption_key_;
}
inline ::key_message* scheme_message::mutable_encryption_key() {
  // @@protoc_insertion_point(field_mutable:scheme_message.encryption_key)
  return _internal_mutable_encryption_key();
}
inline void scheme_message::set_allocated_encryption_key(::key_message* encryption_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete encryption_key_;
  }
  if (encryption_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(encryption_key);
    if (message_arena != submessage_arena) {
      encryption_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, encryption_key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  encryption_key_ = encryption_key;
  // @@protoc_insertion_point(field_set_allocated:scheme_message.encryption_key)
}

// optional .hmac_parameters_message parameters = 4;
inline bool scheme_message::_internal_has_parameters() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || parameters_ != nullptr);
  return value;
}
inline bool scheme_message::has_parameters() const {
  return _internal_has_parameters();
}
inline void scheme_message::clear_parameters() {
  if (parameters_ != nullptr) parameters_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::hmac_parameters_message& scheme_message::_internal_parameters() const {
  const ::hmac_parameters_message* p = parameters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::hmac_parameters_message*>(
      &::_hmac_parameters_message_default_instance_);
}
inline const ::hmac_parameters_message& scheme_message::parameters() const {
  // @@protoc_insertion_point(field_get:scheme_message.parameters)
  return _internal_parameters();
}
inline void scheme_message::unsafe_arena_set_allocated_parameters(
    ::hmac_parameters_message* parameters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameters_);
  }
  parameters_ = parameters;
  if (parameters) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:scheme_message.parameters)
}
inline ::hmac_parameters_message* scheme_message::release_parameters() {
  auto temp = unsafe_arena_release_parameters();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::hmac_parameters_message* scheme_message::unsafe_arena_release_parameters() {
  // @@protoc_insertion_point(field_release:scheme_message.parameters)
  _has_bits_[0] &= ~0x00000010u;
  ::hmac_parameters_message* temp = parameters_;
  parameters_ = nullptr;
  return temp;
}
inline ::hmac_parameters_message* scheme_message::_internal_mutable_parameters() {
  _has_bits_[0] |= 0x00000010u;
  if (parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::hmac_parameters_message>(GetArena());
    parameters_ = p;
  }
  return parameters_;
}
inline ::hmac_parameters_message* scheme_message::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable:scheme_message.parameters)
  return _internal_mutable_parameters();
}
inline void scheme_message::set_allocated_parameters(::hmac_parameters_message* parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete parameters_;
  }
  if (parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parameters);
    if (message_arena != submessage_arena) {
      parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  parameters_ = parameters;
  // @@protoc_insertion_point(field_set_allocated:scheme_message.parameters)
}

// optional bytes public_nonce = 5;
inline bool scheme_message::_internal_has_public_nonce() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool scheme_message::has_public_nonce() const {
  return _internal_has_public_nonce();
}
inline void scheme_message::clear_public_nonce() {
  public_nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& scheme_message::public_nonce() const {
  // @@protoc_insertion_point(field_get:scheme_message.public_nonce)
  return _internal_public_nonce();
}
inline void scheme_message::set_public_nonce(const std::string& value) {
  _internal_set_public_nonce(value);
  // @@protoc_insertion_point(field_set:scheme_message.public_nonce)
}
inline std::string* scheme_message::mutable_public_nonce() {
  // @@protoc_insertion_point(field_mutable:scheme_message.public_nonce)
  return _internal_mutable_public_nonce();
}
inline const std::string& scheme_message::_internal_public_nonce() const {
  return public_nonce_.Get();
}
inline void scheme_message::_internal_set_public_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  public_nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void scheme_message::set_public_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  public_nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:scheme_message.public_nonce)
}
inline void scheme_message::set_public_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  public_nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:scheme_message.public_nonce)
}
inline void scheme_message::set_public_nonce(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  public_nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:scheme_message.public_nonce)
}
inline std::string* scheme_message::_internal_mutable_public_nonce() {
  _has_bits_[0] |= 0x00000004u;
  return public_nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* scheme_message::release_public_nonce() {
  // @@protoc_insertion_point(field_release:scheme_message.public_nonce)
  if (!_internal_has_public_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return public_nonce_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void scheme_message::set_allocated_public_nonce(std::string* public_nonce) {
  if (public_nonce != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  public_nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:scheme_message.public_nonce)
}
inline std::string* scheme_message::unsafe_arena_release_public_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:scheme_message.public_nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return public_nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void scheme_message::unsafe_arena_set_allocated_public_nonce(
    std::string* public_nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (public_nonce != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  public_nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      public_nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:scheme_message.public_nonce)
}

// -------------------------------------------------------------------

// crypto_signature_message

// required string encryption_algorithm_name = 1;
inline bool crypto_signature_message::_internal_has_encryption_algorithm_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool crypto_signature_message::has_encryption_algorithm_name() const {
  return _internal_has_encryption_algorithm_name();
}
inline void crypto_signature_message::clear_encryption_algorithm_name() {
  encryption_algorithm_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& crypto_signature_message::encryption_algorithm_name() const {
  // @@protoc_insertion_point(field_get:crypto_signature_message.encryption_algorithm_name)
  return _internal_encryption_algorithm_name();
}
inline void crypto_signature_message::set_encryption_algorithm_name(const std::string& value) {
  _internal_set_encryption_algorithm_name(value);
  // @@protoc_insertion_point(field_set:crypto_signature_message.encryption_algorithm_name)
}
inline std::string* crypto_signature_message::mutable_encryption_algorithm_name() {
  // @@protoc_insertion_point(field_mutable:crypto_signature_message.encryption_algorithm_name)
  return _internal_mutable_encryption_algorithm_name();
}
inline const std::string& crypto_signature_message::_internal_encryption_algorithm_name() const {
  return encryption_algorithm_name_.Get();
}
inline void crypto_signature_message::_internal_set_encryption_algorithm_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  encryption_algorithm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void crypto_signature_message::set_encryption_algorithm_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  encryption_algorithm_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crypto_signature_message.encryption_algorithm_name)
}
inline void crypto_signature_message::set_encryption_algorithm_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  encryption_algorithm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crypto_signature_message.encryption_algorithm_name)
}
inline void crypto_signature_message::set_encryption_algorithm_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  encryption_algorithm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crypto_signature_message.encryption_algorithm_name)
}
inline std::string* crypto_signature_message::_internal_mutable_encryption_algorithm_name() {
  _has_bits_[0] |= 0x00000001u;
  return encryption_algorithm_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* crypto_signature_message::release_encryption_algorithm_name() {
  // @@protoc_insertion_point(field_release:crypto_signature_message.encryption_algorithm_name)
  if (!_internal_has_encryption_algorithm_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return encryption_algorithm_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void crypto_signature_message::set_allocated_encryption_algorithm_name(std::string* encryption_algorithm_name) {
  if (encryption_algorithm_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encryption_algorithm_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encryption_algorithm_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crypto_signature_message.encryption_algorithm_name)
}
inline std::string* crypto_signature_message::unsafe_arena_release_encryption_algorithm_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crypto_signature_message.encryption_algorithm_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return encryption_algorithm_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void crypto_signature_message::unsafe_arena_set_allocated_encryption_algorithm_name(
    std::string* encryption_algorithm_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encryption_algorithm_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encryption_algorithm_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encryption_algorithm_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crypto_signature_message.encryption_algorithm_name)
}

// required string serialized_statement = 2;
inline bool crypto_signature_message::_internal_has_serialized_statement() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool crypto_signature_message::has_serialized_statement() const {
  return _internal_has_serialized_statement();
}
inline void crypto_signature_message::clear_serialized_statement() {
  serialized_statement_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& crypto_signature_message::serialized_statement() const {
  // @@protoc_insertion_point(field_get:crypto_signature_message.serialized_statement)
  return _internal_serialized_statement();
}
inline void crypto_signature_message::set_serialized_statement(const std::string& value) {
  _internal_set_serialized_statement(value);
  // @@protoc_insertion_point(field_set:crypto_signature_message.serialized_statement)
}
inline std::string* crypto_signature_message::mutable_serialized_statement() {
  // @@protoc_insertion_point(field_mutable:crypto_signature_message.serialized_statement)
  return _internal_mutable_serialized_statement();
}
inline const std::string& crypto_signature_message::_internal_serialized_statement() const {
  return serialized_statement_.Get();
}
inline void crypto_signature_message::_internal_set_serialized_statement(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_statement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void crypto_signature_message::set_serialized_statement(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  serialized_statement_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crypto_signature_message.serialized_statement)
}
inline void crypto_signature_message::set_serialized_statement(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  serialized_statement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crypto_signature_message.serialized_statement)
}
inline void crypto_signature_message::set_serialized_statement(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  serialized_statement_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crypto_signature_message.serialized_statement)
}
inline std::string* crypto_signature_message::_internal_mutable_serialized_statement() {
  _has_bits_[0] |= 0x00000002u;
  return serialized_statement_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* crypto_signature_message::release_serialized_statement() {
  // @@protoc_insertion_point(field_release:crypto_signature_message.serialized_statement)
  if (!_internal_has_serialized_statement()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return serialized_statement_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void crypto_signature_message::set_allocated_serialized_statement(std::string* serialized_statement) {
  if (serialized_statement != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_statement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialized_statement,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crypto_signature_message.serialized_statement)
}
inline std::string* crypto_signature_message::unsafe_arena_release_serialized_statement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crypto_signature_message.serialized_statement)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return serialized_statement_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void crypto_signature_message::unsafe_arena_set_allocated_serialized_statement(
    std::string* serialized_statement) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (serialized_statement != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  serialized_statement_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      serialized_statement, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crypto_signature_message.serialized_statement)
}

// optional string signature = 3;
inline bool crypto_signature_message::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool crypto_signature_message::has_signature() const {
  return _internal_has_signature();
}
inline void crypto_signature_message::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& crypto_signature_message::signature() const {
  // @@protoc_insertion_point(field_get:crypto_signature_message.signature)
  return _internal_signature();
}
inline void crypto_signature_message::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:crypto_signature_message.signature)
}
inline std::string* crypto_signature_message::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:crypto_signature_message.signature)
  return _internal_mutable_signature();
}
inline const std::string& crypto_signature_message::_internal_signature() const {
  return signature_.Get();
}
inline void crypto_signature_message::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void crypto_signature_message::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crypto_signature_message.signature)
}
inline void crypto_signature_message::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crypto_signature_message.signature)
}
inline void crypto_signature_message::set_signature(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crypto_signature_message.signature)
}
inline std::string* crypto_signature_message::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000004u;
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* crypto_signature_message::release_signature() {
  // @@protoc_insertion_point(field_release:crypto_signature_message.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void crypto_signature_message::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crypto_signature_message.signature)
}
inline std::string* crypto_signature_message::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crypto_signature_message.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void crypto_signature_message::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crypto_signature_message.signature)
}

// optional string signer_name = 4;
inline bool crypto_signature_message::_internal_has_signer_name() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool crypto_signature_message::has_signer_name() const {
  return _internal_has_signer_name();
}
inline void crypto_signature_message::clear_signer_name() {
  signer_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& crypto_signature_message::signer_name() const {
  // @@protoc_insertion_point(field_get:crypto_signature_message.signer_name)
  return _internal_signer_name();
}
inline void crypto_signature_message::set_signer_name(const std::string& value) {
  _internal_set_signer_name(value);
  // @@protoc_insertion_point(field_set:crypto_signature_message.signer_name)
}
inline std::string* crypto_signature_message::mutable_signer_name() {
  // @@protoc_insertion_point(field_mutable:crypto_signature_message.signer_name)
  return _internal_mutable_signer_name();
}
inline const std::string& crypto_signature_message::_internal_signer_name() const {
  return signer_name_.Get();
}
inline void crypto_signature_message::_internal_set_signer_name(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  signer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void crypto_signature_message::set_signer_name(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  signer_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:crypto_signature_message.signer_name)
}
inline void crypto_signature_message::set_signer_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  signer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:crypto_signature_message.signer_name)
}
inline void crypto_signature_message::set_signer_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  signer_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:crypto_signature_message.signer_name)
}
inline std::string* crypto_signature_message::_internal_mutable_signer_name() {
  _has_bits_[0] |= 0x00000008u;
  return signer_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* crypto_signature_message::release_signer_name() {
  // @@protoc_insertion_point(field_release:crypto_signature_message.signer_name)
  if (!_internal_has_signer_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return signer_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void crypto_signature_message::set_allocated_signer_name(std::string* signer_name) {
  if (signer_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  signer_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signer_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:crypto_signature_message.signer_name)
}
inline std::string* crypto_signature_message::unsafe_arena_release_signer_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:crypto_signature_message.signer_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return signer_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void crypto_signature_message::unsafe_arena_set_allocated_signer_name(
    std::string* signer_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signer_name != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  signer_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signer_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:crypto_signature_message.signer_name)
}

// -------------------------------------------------------------------

// cert_name_message

// optional string name_type = 1;
inline bool cert_name_message::_internal_has_name_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool cert_name_message::has_name_type() const {
  return _internal_has_name_type();
}
inline void cert_name_message::clear_name_type() {
  name_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& cert_name_message::name_type() const {
  // @@protoc_insertion_point(field_get:cert_name_message.name_type)
  return _internal_name_type();
}
inline void cert_name_message::set_name_type(const std::string& value) {
  _internal_set_name_type(value);
  // @@protoc_insertion_point(field_set:cert_name_message.name_type)
}
inline std::string* cert_name_message::mutable_name_type() {
  // @@protoc_insertion_point(field_mutable:cert_name_message.name_type)
  return _internal_mutable_name_type();
}
inline const std::string& cert_name_message::_internal_name_type() const {
  return name_type_.Get();
}
inline void cert_name_message::_internal_set_name_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void cert_name_message::set_name_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cert_name_message.name_type)
}
inline void cert_name_message::set_name_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cert_name_message.name_type)
}
inline void cert_name_message::set_name_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cert_name_message.name_type)
}
inline std::string* cert_name_message::_internal_mutable_name_type() {
  _has_bits_[0] |= 0x00000001u;
  return name_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* cert_name_message::release_name_type() {
  // @@protoc_insertion_point(field_release:cert_name_message.name_type)
  if (!_internal_has_name_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void cert_name_message::set_allocated_name_type(std::string* name_type) {
  if (name_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cert_name_message.name_type)
}
inline std::string* cert_name_message::unsafe_arena_release_name_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cert_name_message.name_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void cert_name_message::unsafe_arena_set_allocated_name_type(
    std::string* name_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_name_message.name_type)
}

// optional string name_value = 2;
inline bool cert_name_message::_internal_has_name_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool cert_name_message::has_name_value() const {
  return _internal_has_name_value();
}
inline void cert_name_message::clear_name_value() {
  name_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& cert_name_message::name_value() const {
  // @@protoc_insertion_point(field_get:cert_name_message.name_value)
  return _internal_name_value();
}
inline void cert_name_message::set_name_value(const std::string& value) {
  _internal_set_name_value(value);
  // @@protoc_insertion_point(field_set:cert_name_message.name_value)
}
inline std::string* cert_name_message::mutable_name_value() {
  // @@protoc_insertion_point(field_mutable:cert_name_message.name_value)
  return _internal_mutable_name_value();
}
inline const std::string& cert_name_message::_internal_name_value() const {
  return name_value_.Get();
}
inline void cert_name_message::_internal_set_name_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void cert_name_message::set_name_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cert_name_message.name_value)
}
inline void cert_name_message::set_name_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cert_name_message.name_value)
}
inline void cert_name_message::set_name_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cert_name_message.name_value)
}
inline std::string* cert_name_message::_internal_mutable_name_value() {
  _has_bits_[0] |= 0x00000002u;
  return name_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* cert_name_message::release_name_value() {
  // @@protoc_insertion_point(field_release:cert_name_message.name_value)
  if (!_internal_has_name_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void cert_name_message::set_allocated_name_value(std::string* name_value) {
  if (name_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cert_name_message.name_value)
}
inline std::string* cert_name_message::unsafe_arena_release_name_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cert_name_message.name_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return name_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void cert_name_message::unsafe_arena_set_allocated_name_value(
    std::string* name_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_name_message.name_value)
}

// -------------------------------------------------------------------

// cert_principal_name_message

// repeated .cert_name_message names = 1;
inline int cert_principal_name_message::_internal_names_size() const {
  return names_.size();
}
inline int cert_principal_name_message::names_size() const {
  return _internal_names_size();
}
inline void cert_principal_name_message::clear_names() {
  names_.Clear();
}
inline ::cert_name_message* cert_principal_name_message::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:cert_principal_name_message.names)
  return names_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >*
cert_principal_name_message::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:cert_principal_name_message.names)
  return &names_;
}
inline const ::cert_name_message& cert_principal_name_message::_internal_names(int index) const {
  return names_.Get(index);
}
inline const ::cert_name_message& cert_principal_name_message::names(int index) const {
  // @@protoc_insertion_point(field_get:cert_principal_name_message.names)
  return _internal_names(index);
}
inline ::cert_name_message* cert_principal_name_message::_internal_add_names() {
  return names_.Add();
}
inline ::cert_name_message* cert_principal_name_message::add_names() {
  // @@protoc_insertion_point(field_add:cert_principal_name_message.names)
  return _internal_add_names();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >&
cert_principal_name_message::names() const {
  // @@protoc_insertion_point(field_list:cert_principal_name_message.names)
  return names_;
}

// -------------------------------------------------------------------

// cert_rsa_parameters_message

// optional int32 modulus_size = 1;
inline bool cert_rsa_parameters_message::_internal_has_modulus_size() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool cert_rsa_parameters_message::has_modulus_size() const {
  return _internal_has_modulus_size();
}
inline void cert_rsa_parameters_message::clear_modulus_size() {
  modulus_size_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cert_rsa_parameters_message::_internal_modulus_size() const {
  return modulus_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cert_rsa_parameters_message::modulus_size() const {
  // @@protoc_insertion_point(field_get:cert_rsa_parameters_message.modulus_size)
  return _internal_modulus_size();
}
inline void cert_rsa_parameters_message::_internal_set_modulus_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  modulus_size_ = value;
}
inline void cert_rsa_parameters_message::set_modulus_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_modulus_size(value);
  // @@protoc_insertion_point(field_set:cert_rsa_parameters_message.modulus_size)
}

// optional int32 exponent_size = 2;
inline bool cert_rsa_parameters_message::_internal_has_exponent_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool cert_rsa_parameters_message::has_exponent_size() const {
  return _internal_has_exponent_size();
}
inline void cert_rsa_parameters_message::clear_exponent_size() {
  exponent_size_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cert_rsa_parameters_message::_internal_exponent_size() const {
  return exponent_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cert_rsa_parameters_message::exponent_size() const {
  // @@protoc_insertion_point(field_get:cert_rsa_parameters_message.exponent_size)
  return _internal_exponent_size();
}
inline void cert_rsa_parameters_message::_internal_set_exponent_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  exponent_size_ = value;
}
inline void cert_rsa_parameters_message::set_exponent_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exponent_size(value);
  // @@protoc_insertion_point(field_set:cert_rsa_parameters_message.exponent_size)
}

// optional bytes exponent = 3;
inline bool cert_rsa_parameters_message::_internal_has_exponent() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool cert_rsa_parameters_message::has_exponent() const {
  return _internal_has_exponent();
}
inline void cert_rsa_parameters_message::clear_exponent() {
  exponent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& cert_rsa_parameters_message::exponent() const {
  // @@protoc_insertion_point(field_get:cert_rsa_parameters_message.exponent)
  return _internal_exponent();
}
inline void cert_rsa_parameters_message::set_exponent(const std::string& value) {
  _internal_set_exponent(value);
  // @@protoc_insertion_point(field_set:cert_rsa_parameters_message.exponent)
}
inline std::string* cert_rsa_parameters_message::mutable_exponent() {
  // @@protoc_insertion_point(field_mutable:cert_rsa_parameters_message.exponent)
  return _internal_mutable_exponent();
}
inline const std::string& cert_rsa_parameters_message::_internal_exponent() const {
  return exponent_.Get();
}
inline void cert_rsa_parameters_message::_internal_set_exponent(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  exponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void cert_rsa_parameters_message::set_exponent(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  exponent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cert_rsa_parameters_message.exponent)
}
inline void cert_rsa_parameters_message::set_exponent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  exponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cert_rsa_parameters_message.exponent)
}
inline void cert_rsa_parameters_message::set_exponent(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  exponent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cert_rsa_parameters_message.exponent)
}
inline std::string* cert_rsa_parameters_message::_internal_mutable_exponent() {
  _has_bits_[0] |= 0x00000001u;
  return exponent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* cert_rsa_parameters_message::release_exponent() {
  // @@protoc_insertion_point(field_release:cert_rsa_parameters_message.exponent)
  if (!_internal_has_exponent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return exponent_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void cert_rsa_parameters_message::set_allocated_exponent(std::string* exponent) {
  if (exponent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  exponent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), exponent,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cert_rsa_parameters_message.exponent)
}
inline std::string* cert_rsa_parameters_message::unsafe_arena_release_exponent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cert_rsa_parameters_message.exponent)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return exponent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void cert_rsa_parameters_message::unsafe_arena_set_allocated_exponent(
    std::string* exponent) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (exponent != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  exponent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      exponent, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_rsa_parameters_message.exponent)
}

// optional bytes modulus = 4;
inline bool cert_rsa_parameters_message::_internal_has_modulus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool cert_rsa_parameters_message::has_modulus() const {
  return _internal_has_modulus();
}
inline void cert_rsa_parameters_message::clear_modulus() {
  modulus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& cert_rsa_parameters_message::modulus() const {
  // @@protoc_insertion_point(field_get:cert_rsa_parameters_message.modulus)
  return _internal_modulus();
}
inline void cert_rsa_parameters_message::set_modulus(const std::string& value) {
  _internal_set_modulus(value);
  // @@protoc_insertion_point(field_set:cert_rsa_parameters_message.modulus)
}
inline std::string* cert_rsa_parameters_message::mutable_modulus() {
  // @@protoc_insertion_point(field_mutable:cert_rsa_parameters_message.modulus)
  return _internal_mutable_modulus();
}
inline const std::string& cert_rsa_parameters_message::_internal_modulus() const {
  return modulus_.Get();
}
inline void cert_rsa_parameters_message::_internal_set_modulus(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void cert_rsa_parameters_message::set_modulus(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  modulus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cert_rsa_parameters_message.modulus)
}
inline void cert_rsa_parameters_message::set_modulus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cert_rsa_parameters_message.modulus)
}
inline void cert_rsa_parameters_message::set_modulus(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  modulus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cert_rsa_parameters_message.modulus)
}
inline std::string* cert_rsa_parameters_message::_internal_mutable_modulus() {
  _has_bits_[0] |= 0x00000002u;
  return modulus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* cert_rsa_parameters_message::release_modulus() {
  // @@protoc_insertion_point(field_release:cert_rsa_parameters_message.modulus)
  if (!_internal_has_modulus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return modulus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void cert_rsa_parameters_message::set_allocated_modulus(std::string* modulus) {
  if (modulus != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  modulus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modulus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cert_rsa_parameters_message.modulus)
}
inline std::string* cert_rsa_parameters_message::unsafe_arena_release_modulus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cert_rsa_parameters_message.modulus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return modulus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void cert_rsa_parameters_message::unsafe_arena_set_allocated_modulus(
    std::string* modulus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (modulus != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  modulus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modulus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_rsa_parameters_message.modulus)
}

// -------------------------------------------------------------------

// cert_ecc_parameters_message

// optional int32 prime_size = 1;
inline bool cert_ecc_parameters_message::_internal_has_prime_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool cert_ecc_parameters_message::has_prime_size() const {
  return _internal_has_prime_size();
}
inline void cert_ecc_parameters_message::clear_prime_size() {
  prime_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cert_ecc_parameters_message::_internal_prime_size() const {
  return prime_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 cert_ecc_parameters_message::prime_size() const {
  // @@protoc_insertion_point(field_get:cert_ecc_parameters_message.prime_size)
  return _internal_prime_size();
}
inline void cert_ecc_parameters_message::_internal_set_prime_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  prime_size_ = value;
}
inline void cert_ecc_parameters_message::set_prime_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_prime_size(value);
  // @@protoc_insertion_point(field_set:cert_ecc_parameters_message.prime_size)
}

// optional bytes prime = 2;
inline bool cert_ecc_parameters_message::_internal_has_prime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool cert_ecc_parameters_message::has_prime() const {
  return _internal_has_prime();
}
inline void cert_ecc_parameters_message::clear_prime() {
  prime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& cert_ecc_parameters_message::prime() const {
  // @@protoc_insertion_point(field_get:cert_ecc_parameters_message.prime)
  return _internal_prime();
}
inline void cert_ecc_parameters_message::set_prime(const std::string& value) {
  _internal_set_prime(value);
  // @@protoc_insertion_point(field_set:cert_ecc_parameters_message.prime)
}
inline std::string* cert_ecc_parameters_message::mutable_prime() {
  // @@protoc_insertion_point(field_mutable:cert_ecc_parameters_message.prime)
  return _internal_mutable_prime();
}
inline const std::string& cert_ecc_parameters_message::_internal_prime() const {
  return prime_.Get();
}
inline void cert_ecc_parameters_message::_internal_set_prime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void cert_ecc_parameters_message::set_prime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  prime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cert_ecc_parameters_message.prime)
}
inline void cert_ecc_parameters_message::set_prime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cert_ecc_parameters_message.prime)
}
inline void cert_ecc_parameters_message::set_prime(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  prime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cert_ecc_parameters_message.prime)
}
inline std::string* cert_ecc_parameters_message::_internal_mutable_prime() {
  _has_bits_[0] |= 0x00000001u;
  return prime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* cert_ecc_parameters_message::release_prime() {
  // @@protoc_insertion_point(field_release:cert_ecc_parameters_message.prime)
  if (!_internal_has_prime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return prime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void cert_ecc_parameters_message::set_allocated_prime(std::string* prime) {
  if (prime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cert_ecc_parameters_message.prime)
}
inline std::string* cert_ecc_parameters_message::unsafe_arena_release_prime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cert_ecc_parameters_message.prime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return prime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void cert_ecc_parameters_message::unsafe_arena_set_allocated_prime(
    std::string* prime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  prime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_ecc_parameters_message.prime)
}

// -------------------------------------------------------------------

// cert_algorithm_message

// required string algorithm_name = 1;
inline bool cert_algorithm_message::_internal_has_algorithm_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool cert_algorithm_message::has_algorithm_name() const {
  return _internal_has_algorithm_name();
}
inline void cert_algorithm_message::clear_algorithm_name() {
  algorithm_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& cert_algorithm_message::algorithm_name() const {
  // @@protoc_insertion_point(field_get:cert_algorithm_message.algorithm_name)
  return _internal_algorithm_name();
}
inline void cert_algorithm_message::set_algorithm_name(const std::string& value) {
  _internal_set_algorithm_name(value);
  // @@protoc_insertion_point(field_set:cert_algorithm_message.algorithm_name)
}
inline std::string* cert_algorithm_message::mutable_algorithm_name() {
  // @@protoc_insertion_point(field_mutable:cert_algorithm_message.algorithm_name)
  return _internal_mutable_algorithm_name();
}
inline const std::string& cert_algorithm_message::_internal_algorithm_name() const {
  return algorithm_name_.Get();
}
inline void cert_algorithm_message::_internal_set_algorithm_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void cert_algorithm_message::set_algorithm_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cert_algorithm_message.algorithm_name)
}
inline void cert_algorithm_message::set_algorithm_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  algorithm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cert_algorithm_message.algorithm_name)
}
inline void cert_algorithm_message::set_algorithm_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  algorithm_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cert_algorithm_message.algorithm_name)
}
inline std::string* cert_algorithm_message::_internal_mutable_algorithm_name() {
  _has_bits_[0] |= 0x00000001u;
  return algorithm_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* cert_algorithm_message::release_algorithm_name() {
  // @@protoc_insertion_point(field_release:cert_algorithm_message.algorithm_name)
  if (!_internal_has_algorithm_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return algorithm_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void cert_algorithm_message::set_allocated_algorithm_name(std::string* algorithm_name) {
  if (algorithm_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  algorithm_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), algorithm_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cert_algorithm_message.algorithm_name)
}
inline std::string* cert_algorithm_message::unsafe_arena_release_algorithm_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cert_algorithm_message.algorithm_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return algorithm_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void cert_algorithm_message::unsafe_arena_set_allocated_algorithm_name(
    std::string* algorithm_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (algorithm_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  algorithm_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      algorithm_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_algorithm_message.algorithm_name)
}

// optional .cert_rsa_parameters_message rsa_params = 2;
inline bool cert_algorithm_message::_internal_has_rsa_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rsa_params_ != nullptr);
  return value;
}
inline bool cert_algorithm_message::has_rsa_params() const {
  return _internal_has_rsa_params();
}
inline void cert_algorithm_message::clear_rsa_params() {
  if (rsa_params_ != nullptr) rsa_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::cert_rsa_parameters_message& cert_algorithm_message::_internal_rsa_params() const {
  const ::cert_rsa_parameters_message* p = rsa_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cert_rsa_parameters_message*>(
      &::_cert_rsa_parameters_message_default_instance_);
}
inline const ::cert_rsa_parameters_message& cert_algorithm_message::rsa_params() const {
  // @@protoc_insertion_point(field_get:cert_algorithm_message.rsa_params)
  return _internal_rsa_params();
}
inline void cert_algorithm_message::unsafe_arena_set_allocated_rsa_params(
    ::cert_rsa_parameters_message* rsa_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rsa_params_);
  }
  rsa_params_ = rsa_params;
  if (rsa_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_algorithm_message.rsa_params)
}
inline ::cert_rsa_parameters_message* cert_algorithm_message::release_rsa_params() {
  auto temp = unsafe_arena_release_rsa_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cert_rsa_parameters_message* cert_algorithm_message::unsafe_arena_release_rsa_params() {
  // @@protoc_insertion_point(field_release:cert_algorithm_message.rsa_params)
  _has_bits_[0] &= ~0x00000002u;
  ::cert_rsa_parameters_message* temp = rsa_params_;
  rsa_params_ = nullptr;
  return temp;
}
inline ::cert_rsa_parameters_message* cert_algorithm_message::_internal_mutable_rsa_params() {
  _has_bits_[0] |= 0x00000002u;
  if (rsa_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cert_rsa_parameters_message>(GetArena());
    rsa_params_ = p;
  }
  return rsa_params_;
}
inline ::cert_rsa_parameters_message* cert_algorithm_message::mutable_rsa_params() {
  // @@protoc_insertion_point(field_mutable:cert_algorithm_message.rsa_params)
  return _internal_mutable_rsa_params();
}
inline void cert_algorithm_message::set_allocated_rsa_params(::cert_rsa_parameters_message* rsa_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rsa_params_;
  }
  if (rsa_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rsa_params);
    if (message_arena != submessage_arena) {
      rsa_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rsa_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rsa_params_ = rsa_params;
  // @@protoc_insertion_point(field_set_allocated:cert_algorithm_message.rsa_params)
}

// optional .cert_ecc_parameters_message ecc_params = 3;
inline bool cert_algorithm_message::_internal_has_ecc_params() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ecc_params_ != nullptr);
  return value;
}
inline bool cert_algorithm_message::has_ecc_params() const {
  return _internal_has_ecc_params();
}
inline void cert_algorithm_message::clear_ecc_params() {
  if (ecc_params_ != nullptr) ecc_params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::cert_ecc_parameters_message& cert_algorithm_message::_internal_ecc_params() const {
  const ::cert_ecc_parameters_message* p = ecc_params_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cert_ecc_parameters_message*>(
      &::_cert_ecc_parameters_message_default_instance_);
}
inline const ::cert_ecc_parameters_message& cert_algorithm_message::ecc_params() const {
  // @@protoc_insertion_point(field_get:cert_algorithm_message.ecc_params)
  return _internal_ecc_params();
}
inline void cert_algorithm_message::unsafe_arena_set_allocated_ecc_params(
    ::cert_ecc_parameters_message* ecc_params) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ecc_params_);
  }
  ecc_params_ = ecc_params;
  if (ecc_params) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_algorithm_message.ecc_params)
}
inline ::cert_ecc_parameters_message* cert_algorithm_message::release_ecc_params() {
  auto temp = unsafe_arena_release_ecc_params();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cert_ecc_parameters_message* cert_algorithm_message::unsafe_arena_release_ecc_params() {
  // @@protoc_insertion_point(field_release:cert_algorithm_message.ecc_params)
  _has_bits_[0] &= ~0x00000004u;
  ::cert_ecc_parameters_message* temp = ecc_params_;
  ecc_params_ = nullptr;
  return temp;
}
inline ::cert_ecc_parameters_message* cert_algorithm_message::_internal_mutable_ecc_params() {
  _has_bits_[0] |= 0x00000004u;
  if (ecc_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::cert_ecc_parameters_message>(GetArena());
    ecc_params_ = p;
  }
  return ecc_params_;
}
inline ::cert_ecc_parameters_message* cert_algorithm_message::mutable_ecc_params() {
  // @@protoc_insertion_point(field_mutable:cert_algorithm_message.ecc_params)
  return _internal_mutable_ecc_params();
}
inline void cert_algorithm_message::set_allocated_ecc_params(::cert_ecc_parameters_message* ecc_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ecc_params_;
  }
  if (ecc_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ecc_params);
    if (message_arena != submessage_arena) {
      ecc_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ecc_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ecc_params_ = ecc_params;
  // @@protoc_insertion_point(field_set_allocated:cert_algorithm_message.ecc_params)
}

// -------------------------------------------------------------------

// cert_properties_message

// optional string property_name = 1;
inline bool cert_properties_message::_internal_has_property_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool cert_properties_message::has_property_name() const {
  return _internal_has_property_name();
}
inline void cert_properties_message::clear_property_name() {
  property_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& cert_properties_message::property_name() const {
  // @@protoc_insertion_point(field_get:cert_properties_message.property_name)
  return _internal_property_name();
}
inline void cert_properties_message::set_property_name(const std::string& value) {
  _internal_set_property_name(value);
  // @@protoc_insertion_point(field_set:cert_properties_message.property_name)
}
inline std::string* cert_properties_message::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:cert_properties_message.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& cert_properties_message::_internal_property_name() const {
  return property_name_.Get();
}
inline void cert_properties_message::_internal_set_property_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void cert_properties_message::set_property_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cert_properties_message.property_name)
}
inline void cert_properties_message::set_property_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cert_properties_message.property_name)
}
inline void cert_properties_message::set_property_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  property_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cert_properties_message.property_name)
}
inline std::string* cert_properties_message::_internal_mutable_property_name() {
  _has_bits_[0] |= 0x00000001u;
  return property_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* cert_properties_message::release_property_name() {
  // @@protoc_insertion_point(field_release:cert_properties_message.property_name)
  if (!_internal_has_property_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return property_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void cert_properties_message::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cert_properties_message.property_name)
}
inline std::string* cert_properties_message::unsafe_arena_release_property_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cert_properties_message.property_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return property_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void cert_properties_message::unsafe_arena_set_allocated_property_name(
    std::string* property_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (property_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  property_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      property_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_properties_message.property_name)
}

// optional string property_value = 2;
inline bool cert_properties_message::_internal_has_property_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool cert_properties_message::has_property_value() const {
  return _internal_has_property_value();
}
inline void cert_properties_message::clear_property_value() {
  property_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& cert_properties_message::property_value() const {
  // @@protoc_insertion_point(field_get:cert_properties_message.property_value)
  return _internal_property_value();
}
inline void cert_properties_message::set_property_value(const std::string& value) {
  _internal_set_property_value(value);
  // @@protoc_insertion_point(field_set:cert_properties_message.property_value)
}
inline std::string* cert_properties_message::mutable_property_value() {
  // @@protoc_insertion_point(field_mutable:cert_properties_message.property_value)
  return _internal_mutable_property_value();
}
inline const std::string& cert_properties_message::_internal_property_value() const {
  return property_value_.Get();
}
inline void cert_properties_message::_internal_set_property_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  property_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void cert_properties_message::set_property_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  property_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:cert_properties_message.property_value)
}
inline void cert_properties_message::set_property_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  property_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:cert_properties_message.property_value)
}
inline void cert_properties_message::set_property_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  property_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:cert_properties_message.property_value)
}
inline std::string* cert_properties_message::_internal_mutable_property_value() {
  _has_bits_[0] |= 0x00000002u;
  return property_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* cert_properties_message::release_property_value() {
  // @@protoc_insertion_point(field_release:cert_properties_message.property_value)
  if (!_internal_has_property_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return property_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void cert_properties_message::set_allocated_property_value(std::string* property_value) {
  if (property_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  property_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:cert_properties_message.property_value)
}
inline std::string* cert_properties_message::unsafe_arena_release_property_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:cert_properties_message.property_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return property_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void cert_properties_message::unsafe_arena_set_allocated_property_value(
    std::string* property_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (property_value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  property_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      property_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cert_properties_message.property_value)
}

// -------------------------------------------------------------------

// certificate_message

// required string version = 1;
inline bool certificate_message::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool certificate_message::has_version() const {
  return _internal_has_version();
}
inline void certificate_message::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& certificate_message::version() const {
  // @@protoc_insertion_point(field_get:certificate_message.version)
  return _internal_version();
}
inline void certificate_message::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:certificate_message.version)
}
inline std::string* certificate_message::mutable_version() {
  // @@protoc_insertion_point(field_mutable:certificate_message.version)
  return _internal_mutable_version();
}
inline const std::string& certificate_message::_internal_version() const {
  return version_.Get();
}
inline void certificate_message::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_version(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.version)
}
inline void certificate_message::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.version)
}
inline void certificate_message::set_version(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.version)
}
inline std::string* certificate_message::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_version() {
  // @@protoc_insertion_point(field_release:certificate_message.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return version_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.version)
}
inline std::string* certificate_message::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.version)
}

// repeated .cert_name_message subject = 2;
inline int certificate_message::_internal_subject_size() const {
  return subject_.size();
}
inline int certificate_message::subject_size() const {
  return _internal_subject_size();
}
inline void certificate_message::clear_subject() {
  subject_.Clear();
}
inline ::cert_name_message* certificate_message::mutable_subject(int index) {
  // @@protoc_insertion_point(field_mutable:certificate_message.subject)
  return subject_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >*
certificate_message::mutable_subject() {
  // @@protoc_insertion_point(field_mutable_list:certificate_message.subject)
  return &subject_;
}
inline const ::cert_name_message& certificate_message::_internal_subject(int index) const {
  return subject_.Get(index);
}
inline const ::cert_name_message& certificate_message::subject(int index) const {
  // @@protoc_insertion_point(field_get:certificate_message.subject)
  return _internal_subject(index);
}
inline ::cert_name_message* certificate_message::_internal_add_subject() {
  return subject_.Add();
}
inline ::cert_name_message* certificate_message::add_subject() {
  // @@protoc_insertion_point(field_add:certificate_message.subject)
  return _internal_add_subject();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >&
certificate_message::subject() const {
  // @@protoc_insertion_point(field_list:certificate_message.subject)
  return subject_;
}

// optional .cert_algorithm_message subject_key = 3;
inline bool certificate_message::_internal_has_subject_key() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || subject_key_ != nullptr);
  return value;
}
inline bool certificate_message::has_subject_key() const {
  return _internal_has_subject_key();
}
inline void certificate_message::clear_subject_key() {
  if (subject_key_ != nullptr) subject_key_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::cert_algorithm_message& certificate_message::_internal_subject_key() const {
  const ::cert_algorithm_message* p = subject_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cert_algorithm_message*>(
      &::_cert_algorithm_message_default_instance_);
}
inline const ::cert_algorithm_message& certificate_message::subject_key() const {
  // @@protoc_insertion_point(field_get:certificate_message.subject_key)
  return _internal_subject_key();
}
inline void certificate_message::unsafe_arena_set_allocated_subject_key(
    ::cert_algorithm_message* subject_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(subject_key_);
  }
  subject_key_ = subject_key;
  if (subject_key) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.subject_key)
}
inline ::cert_algorithm_message* certificate_message::release_subject_key() {
  auto temp = unsafe_arena_release_subject_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cert_algorithm_message* certificate_message::unsafe_arena_release_subject_key() {
  // @@protoc_insertion_point(field_release:certificate_message.subject_key)
  _has_bits_[0] &= ~0x00000200u;
  ::cert_algorithm_message* temp = subject_key_;
  subject_key_ = nullptr;
  return temp;
}
inline ::cert_algorithm_message* certificate_message::_internal_mutable_subject_key() {
  _has_bits_[0] |= 0x00000200u;
  if (subject_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::cert_algorithm_message>(GetArena());
    subject_key_ = p;
  }
  return subject_key_;
}
inline ::cert_algorithm_message* certificate_message::mutable_subject_key() {
  // @@protoc_insertion_point(field_mutable:certificate_message.subject_key)
  return _internal_mutable_subject_key();
}
inline void certificate_message::set_allocated_subject_key(::cert_algorithm_message* subject_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete subject_key_;
  }
  if (subject_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(subject_key);
    if (message_arena != submessage_arena) {
      subject_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subject_key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  subject_key_ = subject_key;
  // @@protoc_insertion_point(field_set_allocated:certificate_message.subject_key)
}

// repeated .cert_properties_message properties = 4;
inline int certificate_message::_internal_properties_size() const {
  return properties_.size();
}
inline int certificate_message::properties_size() const {
  return _internal_properties_size();
}
inline void certificate_message::clear_properties() {
  properties_.Clear();
}
inline ::cert_properties_message* certificate_message::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:certificate_message.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_properties_message >*
certificate_message::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:certificate_message.properties)
  return &properties_;
}
inline const ::cert_properties_message& certificate_message::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::cert_properties_message& certificate_message::properties(int index) const {
  // @@protoc_insertion_point(field_get:certificate_message.properties)
  return _internal_properties(index);
}
inline ::cert_properties_message* certificate_message::_internal_add_properties() {
  return properties_.Add();
}
inline ::cert_properties_message* certificate_message::add_properties() {
  // @@protoc_insertion_point(field_add:certificate_message.properties)
  return _internal_add_properties();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_properties_message >&
certificate_message::properties() const {
  // @@protoc_insertion_point(field_list:certificate_message.properties)
  return properties_;
}

// optional string purpose = 5;
inline bool certificate_message::_internal_has_purpose() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool certificate_message::has_purpose() const {
  return _internal_has_purpose();
}
inline void certificate_message::clear_purpose() {
  purpose_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& certificate_message::purpose() const {
  // @@protoc_insertion_point(field_get:certificate_message.purpose)
  return _internal_purpose();
}
inline void certificate_message::set_purpose(const std::string& value) {
  _internal_set_purpose(value);
  // @@protoc_insertion_point(field_set:certificate_message.purpose)
}
inline std::string* certificate_message::mutable_purpose() {
  // @@protoc_insertion_point(field_mutable:certificate_message.purpose)
  return _internal_mutable_purpose();
}
inline const std::string& certificate_message::_internal_purpose() const {
  return purpose_.Get();
}
inline void certificate_message::_internal_set_purpose(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_purpose(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  purpose_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.purpose)
}
inline void certificate_message::set_purpose(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.purpose)
}
inline void certificate_message::set_purpose(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  purpose_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.purpose)
}
inline std::string* certificate_message::_internal_mutable_purpose() {
  _has_bits_[0] |= 0x00000002u;
  return purpose_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_purpose() {
  // @@protoc_insertion_point(field_release:certificate_message.purpose)
  if (!_internal_has_purpose()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return purpose_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_purpose(std::string* purpose) {
  if (purpose != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  purpose_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purpose,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.purpose)
}
inline std::string* certificate_message::unsafe_arena_release_purpose() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.purpose)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return purpose_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_purpose(
    std::string* purpose) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (purpose != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  purpose_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      purpose, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.purpose)
}

// optional string not_before = 6;
inline bool certificate_message::_internal_has_not_before() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool certificate_message::has_not_before() const {
  return _internal_has_not_before();
}
inline void certificate_message::clear_not_before() {
  not_before_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& certificate_message::not_before() const {
  // @@protoc_insertion_point(field_get:certificate_message.not_before)
  return _internal_not_before();
}
inline void certificate_message::set_not_before(const std::string& value) {
  _internal_set_not_before(value);
  // @@protoc_insertion_point(field_set:certificate_message.not_before)
}
inline std::string* certificate_message::mutable_not_before() {
  // @@protoc_insertion_point(field_mutable:certificate_message.not_before)
  return _internal_mutable_not_before();
}
inline const std::string& certificate_message::_internal_not_before() const {
  return not_before_.Get();
}
inline void certificate_message::_internal_set_not_before(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  not_before_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_not_before(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  not_before_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.not_before)
}
inline void certificate_message::set_not_before(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  not_before_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.not_before)
}
inline void certificate_message::set_not_before(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  not_before_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.not_before)
}
inline std::string* certificate_message::_internal_mutable_not_before() {
  _has_bits_[0] |= 0x00000004u;
  return not_before_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_not_before() {
  // @@protoc_insertion_point(field_release:certificate_message.not_before)
  if (!_internal_has_not_before()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return not_before_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_not_before(std::string* not_before) {
  if (not_before != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  not_before_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), not_before,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.not_before)
}
inline std::string* certificate_message::unsafe_arena_release_not_before() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.not_before)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return not_before_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_not_before(
    std::string* not_before) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (not_before != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  not_before_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      not_before, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.not_before)
}

// optional string not_after = 7;
inline bool certificate_message::_internal_has_not_after() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool certificate_message::has_not_after() const {
  return _internal_has_not_after();
}
inline void certificate_message::clear_not_after() {
  not_after_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& certificate_message::not_after() const {
  // @@protoc_insertion_point(field_get:certificate_message.not_after)
  return _internal_not_after();
}
inline void certificate_message::set_not_after(const std::string& value) {
  _internal_set_not_after(value);
  // @@protoc_insertion_point(field_set:certificate_message.not_after)
}
inline std::string* certificate_message::mutable_not_after() {
  // @@protoc_insertion_point(field_mutable:certificate_message.not_after)
  return _internal_mutable_not_after();
}
inline const std::string& certificate_message::_internal_not_after() const {
  return not_after_.Get();
}
inline void certificate_message::_internal_set_not_after(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  not_after_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_not_after(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  not_after_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.not_after)
}
inline void certificate_message::set_not_after(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  not_after_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.not_after)
}
inline void certificate_message::set_not_after(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  not_after_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.not_after)
}
inline std::string* certificate_message::_internal_mutable_not_after() {
  _has_bits_[0] |= 0x00000008u;
  return not_after_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_not_after() {
  // @@protoc_insertion_point(field_release:certificate_message.not_after)
  if (!_internal_has_not_after()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return not_after_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_not_after(std::string* not_after) {
  if (not_after != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  not_after_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), not_after,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.not_after)
}
inline std::string* certificate_message::unsafe_arena_release_not_after() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.not_after)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return not_after_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_not_after(
    std::string* not_after) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (not_after != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  not_after_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      not_after, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.not_after)
}

// optional bytes nonce = 8;
inline bool certificate_message::_internal_has_nonce() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool certificate_message::has_nonce() const {
  return _internal_has_nonce();
}
inline void certificate_message::clear_nonce() {
  nonce_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& certificate_message::nonce() const {
  // @@protoc_insertion_point(field_get:certificate_message.nonce)
  return _internal_nonce();
}
inline void certificate_message::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:certificate_message.nonce)
}
inline std::string* certificate_message::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:certificate_message.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& certificate_message::_internal_nonce() const {
  return nonce_.Get();
}
inline void certificate_message::_internal_set_nonce(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_nonce(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  nonce_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.nonce)
}
inline void certificate_message::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.nonce)
}
inline void certificate_message::set_nonce(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  nonce_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.nonce)
}
inline std::string* certificate_message::_internal_mutable_nonce() {
  _has_bits_[0] |= 0x00000010u;
  return nonce_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_nonce() {
  // @@protoc_insertion_point(field_release:certificate_message.nonce)
  if (!_internal_has_nonce()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return nonce_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nonce_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.nonce)
}
inline std::string* certificate_message::unsafe_arena_release_nonce() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.nonce)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return nonce_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_nonce(
    std::string* nonce) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nonce != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  nonce_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nonce, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.nonce)
}

// optional bytes canonical = 9;
inline bool certificate_message::_internal_has_canonical() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool certificate_message::has_canonical() const {
  return _internal_has_canonical();
}
inline void certificate_message::clear_canonical() {
  canonical_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& certificate_message::canonical() const {
  // @@protoc_insertion_point(field_get:certificate_message.canonical)
  return _internal_canonical();
}
inline void certificate_message::set_canonical(const std::string& value) {
  _internal_set_canonical(value);
  // @@protoc_insertion_point(field_set:certificate_message.canonical)
}
inline std::string* certificate_message::mutable_canonical() {
  // @@protoc_insertion_point(field_mutable:certificate_message.canonical)
  return _internal_mutable_canonical();
}
inline const std::string& certificate_message::_internal_canonical() const {
  return canonical_.Get();
}
inline void certificate_message::_internal_set_canonical(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  canonical_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_canonical(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  canonical_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.canonical)
}
inline void certificate_message::set_canonical(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  canonical_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.canonical)
}
inline void certificate_message::set_canonical(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  canonical_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.canonical)
}
inline std::string* certificate_message::_internal_mutable_canonical() {
  _has_bits_[0] |= 0x00000020u;
  return canonical_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_canonical() {
  // @@protoc_insertion_point(field_release:certificate_message.canonical)
  if (!_internal_has_canonical()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return canonical_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_canonical(std::string* canonical) {
  if (canonical != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  canonical_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), canonical,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.canonical)
}
inline std::string* certificate_message::unsafe_arena_release_canonical() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.canonical)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return canonical_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_canonical(
    std::string* canonical) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (canonical != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  canonical_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      canonical, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.canonical)
}

// optional string revocation_address = 10;
inline bool certificate_message::_internal_has_revocation_address() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool certificate_message::has_revocation_address() const {
  return _internal_has_revocation_address();
}
inline void certificate_message::clear_revocation_address() {
  revocation_address_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& certificate_message::revocation_address() const {
  // @@protoc_insertion_point(field_get:certificate_message.revocation_address)
  return _internal_revocation_address();
}
inline void certificate_message::set_revocation_address(const std::string& value) {
  _internal_set_revocation_address(value);
  // @@protoc_insertion_point(field_set:certificate_message.revocation_address)
}
inline std::string* certificate_message::mutable_revocation_address() {
  // @@protoc_insertion_point(field_mutable:certificate_message.revocation_address)
  return _internal_mutable_revocation_address();
}
inline const std::string& certificate_message::_internal_revocation_address() const {
  return revocation_address_.Get();
}
inline void certificate_message::_internal_set_revocation_address(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  revocation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_revocation_address(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  revocation_address_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.revocation_address)
}
inline void certificate_message::set_revocation_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  revocation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.revocation_address)
}
inline void certificate_message::set_revocation_address(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  revocation_address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.revocation_address)
}
inline std::string* certificate_message::_internal_mutable_revocation_address() {
  _has_bits_[0] |= 0x00000040u;
  return revocation_address_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_revocation_address() {
  // @@protoc_insertion_point(field_release:certificate_message.revocation_address)
  if (!_internal_has_revocation_address()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return revocation_address_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_revocation_address(std::string* revocation_address) {
  if (revocation_address != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  revocation_address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), revocation_address,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.revocation_address)
}
inline std::string* certificate_message::unsafe_arena_release_revocation_address() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.revocation_address)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return revocation_address_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_revocation_address(
    std::string* revocation_address) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (revocation_address != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  revocation_address_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      revocation_address, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.revocation_address)
}

// optional string date_signed = 11;
inline bool certificate_message::_internal_has_date_signed() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool certificate_message::has_date_signed() const {
  return _internal_has_date_signed();
}
inline void certificate_message::clear_date_signed() {
  date_signed_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& certificate_message::date_signed() const {
  // @@protoc_insertion_point(field_get:certificate_message.date_signed)
  return _internal_date_signed();
}
inline void certificate_message::set_date_signed(const std::string& value) {
  _internal_set_date_signed(value);
  // @@protoc_insertion_point(field_set:certificate_message.date_signed)
}
inline std::string* certificate_message::mutable_date_signed() {
  // @@protoc_insertion_point(field_mutable:certificate_message.date_signed)
  return _internal_mutable_date_signed();
}
inline const std::string& certificate_message::_internal_date_signed() const {
  return date_signed_.Get();
}
inline void certificate_message::_internal_set_date_signed(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  date_signed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_date_signed(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  date_signed_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.date_signed)
}
inline void certificate_message::set_date_signed(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  date_signed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.date_signed)
}
inline void certificate_message::set_date_signed(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  date_signed_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.date_signed)
}
inline std::string* certificate_message::_internal_mutable_date_signed() {
  _has_bits_[0] |= 0x00000080u;
  return date_signed_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_date_signed() {
  // @@protoc_insertion_point(field_release:certificate_message.date_signed)
  if (!_internal_has_date_signed()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return date_signed_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_date_signed(std::string* date_signed) {
  if (date_signed != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  date_signed_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_signed,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.date_signed)
}
inline std::string* certificate_message::unsafe_arena_release_date_signed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.date_signed)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return date_signed_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_date_signed(
    std::string* date_signed) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (date_signed != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  date_signed_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      date_signed, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.date_signed)
}

// repeated .cert_name_message issuer = 12;
inline int certificate_message::_internal_issuer_size() const {
  return issuer_.size();
}
inline int certificate_message::issuer_size() const {
  return _internal_issuer_size();
}
inline void certificate_message::clear_issuer() {
  issuer_.Clear();
}
inline ::cert_name_message* certificate_message::mutable_issuer(int index) {
  // @@protoc_insertion_point(field_mutable:certificate_message.issuer)
  return issuer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >*
certificate_message::mutable_issuer() {
  // @@protoc_insertion_point(field_mutable_list:certificate_message.issuer)
  return &issuer_;
}
inline const ::cert_name_message& certificate_message::_internal_issuer(int index) const {
  return issuer_.Get(index);
}
inline const ::cert_name_message& certificate_message::issuer(int index) const {
  // @@protoc_insertion_point(field_get:certificate_message.issuer)
  return _internal_issuer(index);
}
inline ::cert_name_message* certificate_message::_internal_add_issuer() {
  return issuer_.Add();
}
inline ::cert_name_message* certificate_message::add_issuer() {
  // @@protoc_insertion_point(field_add:certificate_message.issuer)
  return _internal_add_issuer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cert_name_message >&
certificate_message::issuer() const {
  // @@protoc_insertion_point(field_list:certificate_message.issuer)
  return issuer_;
}

// optional .cert_algorithm_message signing_key = 13;
inline bool certificate_message::_internal_has_signing_key() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || signing_key_ != nullptr);
  return value;
}
inline bool certificate_message::has_signing_key() const {
  return _internal_has_signing_key();
}
inline void certificate_message::clear_signing_key() {
  if (signing_key_ != nullptr) signing_key_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::cert_algorithm_message& certificate_message::_internal_signing_key() const {
  const ::cert_algorithm_message* p = signing_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::cert_algorithm_message*>(
      &::_cert_algorithm_message_default_instance_);
}
inline const ::cert_algorithm_message& certificate_message::signing_key() const {
  // @@protoc_insertion_point(field_get:certificate_message.signing_key)
  return _internal_signing_key();
}
inline void certificate_message::unsafe_arena_set_allocated_signing_key(
    ::cert_algorithm_message* signing_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signing_key_);
  }
  signing_key_ = signing_key;
  if (signing_key) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.signing_key)
}
inline ::cert_algorithm_message* certificate_message::release_signing_key() {
  auto temp = unsafe_arena_release_signing_key();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::cert_algorithm_message* certificate_message::unsafe_arena_release_signing_key() {
  // @@protoc_insertion_point(field_release:certificate_message.signing_key)
  _has_bits_[0] &= ~0x00000400u;
  ::cert_algorithm_message* temp = signing_key_;
  signing_key_ = nullptr;
  return temp;
}
inline ::cert_algorithm_message* certificate_message::_internal_mutable_signing_key() {
  _has_bits_[0] |= 0x00000400u;
  if (signing_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::cert_algorithm_message>(GetArena());
    signing_key_ = p;
  }
  return signing_key_;
}
inline ::cert_algorithm_message* certificate_message::mutable_signing_key() {
  // @@protoc_insertion_point(field_mutable:certificate_message.signing_key)
  return _internal_mutable_signing_key();
}
inline void certificate_message::set_allocated_signing_key(::cert_algorithm_message* signing_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete signing_key_;
  }
  if (signing_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signing_key);
    if (message_arena != submessage_arena) {
      signing_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signing_key, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  signing_key_ = signing_key;
  // @@protoc_insertion_point(field_set_allocated:certificate_message.signing_key)
}

// optional bytes signature = 14;
inline bool certificate_message::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool certificate_message::has_signature() const {
  return _internal_has_signature();
}
inline void certificate_message::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& certificate_message::signature() const {
  // @@protoc_insertion_point(field_get:certificate_message.signature)
  return _internal_signature();
}
inline void certificate_message::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:certificate_message.signature)
}
inline std::string* certificate_message::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:certificate_message.signature)
  return _internal_mutable_signature();
}
inline const std::string& certificate_message::_internal_signature() const {
  return signature_.Get();
}
inline void certificate_message::_internal_set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void certificate_message::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:certificate_message.signature)
}
inline void certificate_message::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:certificate_message.signature)
}
inline void certificate_message::set_signature(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:certificate_message.signature)
}
inline std::string* certificate_message::_internal_mutable_signature() {
  _has_bits_[0] |= 0x00000100u;
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* certificate_message::release_signature() {
  // @@protoc_insertion_point(field_release:certificate_message.signature)
  if (!_internal_has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return signature_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void certificate_message::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:certificate_message.signature)
}
inline std::string* certificate_message::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:certificate_message.signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void certificate_message::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:certificate_message.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_support_2eproto
